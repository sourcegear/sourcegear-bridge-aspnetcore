// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Routing
extension Microsoft.AspNetCore.Routing {
// type: Microsoft.AspNetCore.Routing.IOutboundParameterTransformer
    /**
    
            Defines the contract that a class must implement to transform route values while building
            a URI.
            

    */
open class IOutboundParameterTransformer
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IOutboundParameterTransformer,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IOutboundParameterTransformer_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String TransformOutbound(System.Object)
// docid: M:Microsoft.AspNetCore.Routing.IOutboundParameterTransformer.TransformOutbound(System.Object)
    /**
    
            Transforms the specified route value to a string for inclusion in a URI.
            

    - Parameter value: The route value to transform.
    - Returns: The transformed value.

    */
    open func TransformOutbound(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IOutboundParameterTransformer_String__TransformOutbound_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IOutboundParameterTransformer


// type: Microsoft.AspNetCore.Routing.IParameterPolicy
    /**
    
            A marker interface for types that are associated with route parameters.
            

    */
open class IParameterPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IParameterPolicy_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IParameterPolicy


// type: Microsoft.AspNetCore.Routing.IRouteConstraint
    /**
    
            Defines the contract that a class must implement in order to check whether a URL parameter
            value is valid for a constraint.
            

    */
open class IRouteConstraint
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouteConstraint_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.IRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    
            Determines whether the URL parameter contains a valid value for this constraint.
            

    - Parameter httpContext: An object that encapsulates information about the HTTP request.
    - Parameter route: The router that this constraint belongs to.
    - Parameter routeKey: The name of the parameter that is being checked.
    - Parameter values: A dictionary that contains the parameters for the URL.
    - Parameter routeDirection: 
            An object that indicates whether the constraint check is being performed
            when an incoming request is being handled or when a URL is being generated.
            
    - Returns: true if the URL parameter contains a valid value; otherwise, false.

    */
    open func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IRouteConstraint


// type: Microsoft.AspNetCore.Routing.IRouteHandler
    /**
    
            Defines a contract for a handler of a route.
            

    */
open class IRouteHandler
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouteHandler
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouteHandler_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Http.RequestDelegate GetRequestHandler(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.IRouteHandler.GetRequestHandler(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)
    /**
    
            Gets a  to handle the request, based on the provided
            .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter routeData: The  associated with the current routing match.
    - Returns: 
            A , or null if the handler cannot handle this request.
            

    */
    open func GetRequestHandler(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteHandler_RequestDelegate__GetRequestHandler_0__2__HttpContext_RouteData(&__thrown, self.get_handle(), httpContext.get_handle(), routeData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
} // IRouteHandler


// type: Microsoft.AspNetCore.Routing.IRouter
    /**
    
            Interface for implementing a router.
            

    */
open class IRouter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Routing.IRouter.RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    
            Asynchronously routes based on the current .
            

    - Parameter context: A  instance.
    */
    open func RouteAsync(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouter_Task__RouteAsync_0__1__RouteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // Microsoft.AspNetCore.Routing.VirtualPathData GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
// docid: M:Microsoft.AspNetCore.Routing.IRouter.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
    /**
    
            Returns the URL that is associated with the route details provided in 
            

    - Parameter context: A  instance.
    - Returns: A  object. Can be null.

    */
    open func GetVirtualPath(context : aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouter_VirtualPathData__GetVirtualPath_0__1__VirtualPathContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRouter


// type: Microsoft.AspNetCore.Routing.IRoutingFeature
    /**
    
            A feature interface for routing functionality.
            

    */
open class IRoutingFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRoutingFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRoutingFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Routing.IRoutingFeature.get_RouteData
    open func get_RouteData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRoutingFeature_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.IRoutingFeature.set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
    open func set_RouteData(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_IRoutingFeature_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRoutingFeature


// type: Microsoft.AspNetCore.Routing.LinkGenerator
    /**
    
            Defines a contract to generate absolute and related URIs based on endpoint routing.
            

    */
open class LinkGenerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_LinkGenerator_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String GetPathByAddress<TAddress>(Microsoft.AspNetCore.Http.HttpContext, TAddress, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGenerator.GetPathByAddress``1(Microsoft.AspNetCore.Http.HttpContext,``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values and .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter address: The address value. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template.
    - Parameter ambientValues: The values associated with the current request. Optional.
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    open func GetPathByAddress<UTAddress : SGBridgeGenericValue>(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, address : UTAddress, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, ambientValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGenerator_String__GetPathByAddress_1__7__HttpContext_UTAddress_RouteValueDictionary_RouteValueDictionary_System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(UTAddress.get_type_handle(), &__thrown, self.get_handle(), httpContext.get_handle(), address.to_gval(), values.get_handle(), ambientValues?.get_handle() ?? nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathByAddress<TAddress>(TAddress, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGenerator.GetPathByAddress``1(``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter address: The address value. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    open func GetPathByAddress<UTAddress : SGBridgeGenericValue>(address : UTAddress, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGenerator_String__GetPathByAddress_1__5__UTAddress_RouteValueDictionary_PathString_FragmentString_LinkOptions(UTAddress.get_type_handle(), &__thrown, self.get_handle(), address.to_gval(), values.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByAddress<TAddress>(Microsoft.AspNetCore.Http.HttpContext, TAddress, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGenerator.GetUriByAddress``1(Microsoft.AspNetCore.Http.HttpContext,``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values and .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter address: The address value. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template.
    - Parameter ambientValues: The values associated with the current request. Optional.
    - Parameter scheme: 
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of  will be used.
            
    - Parameter host: 
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value  will be used.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    open func GetUriByAddress<UTAddress : SGBridgeGenericValue>(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, address : UTAddress, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, ambientValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> = nil, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGenerator_String__GetUriByAddress_1__9__HttpContext_UTAddress_RouteValueDictionary_RouteValueDictionary_String_System_Nullable_Microsoft_AspNetCore_Http_HostString__System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(UTAddress.get_type_handle(), &__thrown, self.get_handle(), httpContext.get_handle(), address.to_gval(), values.get_handle(), ambientValues?.get_handle() ?? nil, scheme?.get_handle() ?? nil, (host != nil) ? host!.get_handle() : nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByAddress<TAddress>(TAddress, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGenerator.GetUriByAddress``1(``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter address: The address value. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template.
    - Parameter scheme: The URI scheme, applied to the resulting URI.
    - Parameter host: 
            The URI host/authority, applied to the resulting URI.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: An absolute URI, or null.

    */
    open func GetUriByAddress<UTAddress : SGBridgeGenericValue>(address : UTAddress, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, scheme : Optional<dotnet.System.String>, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGenerator_String__GetUriByAddress_1__7__UTAddress_RouteValueDictionary_String_HostString_PathString_FragmentString_LinkOptions(UTAddress.get_type_handle(), &__thrown, self.get_handle(), address.to_gval(), values.get_handle(), scheme?.get_handle() ?? nil, host.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LinkGenerator


// type: Microsoft.AspNetCore.Routing.LinkOptions
    /**
    
            Configures options for generated URLs.
            

    */
open class LinkOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_LinkOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_LinkOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_LowercaseUrls()
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.get_LowercaseUrls
    open func get_LowercaseUrls() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkOptions_System_Nullable_bool___get_LowercaseUrls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_LowercaseUrls(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.set_LowercaseUrls(System.Nullable{System.Boolean})
    open func set_LowercaseUrls(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_LinkOptions_void__set_LowercaseUrls_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_LowercaseQueryStrings()
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.get_LowercaseQueryStrings
    open func get_LowercaseQueryStrings() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkOptions_System_Nullable_bool___get_LowercaseQueryStrings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_LowercaseQueryStrings(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.set_LowercaseQueryStrings(System.Nullable{System.Boolean})
    open func set_LowercaseQueryStrings(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_LinkOptions_void__set_LowercaseQueryStrings_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_AppendTrailingSlash()
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.get_AppendTrailingSlash
    open func get_AppendTrailingSlash() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkOptions_System_Nullable_bool___get_AppendTrailingSlash_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_AppendTrailingSlash(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Routing.LinkOptions.set_AppendTrailingSlash(System.Nullable{System.Boolean})
    open func set_AppendTrailingSlash(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_LinkOptions_void__set_AppendTrailingSlash_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value indicating whether a trailing slash should be appended to the generated URLs.
            

    */
    open var AppendTrailingSlash : Optional<Bool> {
        get {
            return try! get_AppendTrailingSlash();
        }
        set(v) {
            return try! set_AppendTrailingSlash(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether a generated query strings are lowercase.
            This property will be false unless  is also true.
            

    */
    open var LowercaseQueryStrings : Optional<Bool> {
        get {
            return try! get_LowercaseQueryStrings();
        }
        set(v) {
            return try! set_LowercaseQueryStrings(value: v!);
        }
    }
    /**
    
            Gets or sets a value indicating whether all generated paths URLs are lowercase.
            Use  to configure the behavior for query strings.
            

    */
    open var LowercaseUrls : Optional<Bool> {
        get {
            return try! get_LowercaseUrls();
        }
        set(v) {
            return try! set_LowercaseUrls(value: v!);
        }
    }
} // LinkOptions


// type: Microsoft.AspNetCore.Routing.RouteContext
    /**
    
            A context object for .
            

    */
open class RouteContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.#ctor(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Creates a new instance of  for the provided .
            

    - Parameter httpContext: The  associated with the current request.
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteContext_ctor_0__1__HttpContext(&__thrown, httpContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.RequestDelegate get_Handler()
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.get_Handler
    open func get_Handler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteContext_RequestDelegate__get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Handler(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.set_Handler(Microsoft.AspNetCore.Http.RequestDelegate)
    open func set_Handler(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteContext_void__set_Handler_0__1__RequestDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Handler(value : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) async throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(value);
        return try set_Handler(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteContext_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.RouteContext.set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
    open func set_RouteData(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteContext_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the handler for the request. An  should set 
            when it matches.
            

    */
    open var Handler : Optional<aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate> {
        get {
            return try! get_Handler();
        }
        set(v) {
            return try! set_Handler(value: v!);
        }
    }
    /**
    
            Gets the  associated with the current request.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets or sets the  associated with the current context.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
        set(v) {
            return try! set_RouteData(value: v);
        }
    }
} // RouteContext


// type: Microsoft.AspNetCore.Routing.RouteData
    /**
    
            Information about the current routing path.
            

    */
open class RouteData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteData.#ctor
    /**
    
            Creates a new instance of  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteData_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.RouteData.#ctor(Microsoft.AspNetCore.Routing.RouteData)
    /**
    
            Creates a new instance of  instance with values copied from .
            

    - Parameter other: The other  instance to copy.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteData_ctor_0__1__RouteData(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteData.#ctor(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new instance of  instance with the specified values.
            

    - Parameter values: The  values.
    */
    public init(values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteData_ctor_0__1__RouteValueDictionary(&__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.RouteData.RouteDataSnapshot PushState(Microsoft.AspNetCore.Routing.IRouter, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteData.PushState(Microsoft.AspNetCore.Routing.IRouter,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            
            Creates a snapshot of the current state of the  before appending
             to , merging  into
            , and merging  into .
            
            
            Call  to restore the state of this 
            to the state at the time of calling
            .
            
            

    - Parameter router: 
            An  to append to . If null, then 
            will not be changed.
            
    - Parameter values: 
            A  to merge into . If null, then
             will not be changed.
            
    - Parameter dataTokens: 
            A  to merge into . If null, then
             will not be changed.
            
    - Returns: A  that captures the current state.

    */
    open func PushState(router : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, values : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, dataTokens : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData_RouteDataSnapshot {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteData_RouteData_RouteDataSnapshot__PushState_0__3__IRouter_RouteValueDictionary_RouteValueDictionary(&__thrown, self.get_handle(), router?.get_handle() ?? nil, values?.get_handle() ?? nil, dataTokens?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData_RouteDataSnapshot(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_DataTokens()
// docid: M:Microsoft.AspNetCore.Routing.RouteData.get_DataTokens
    open func get_DataTokens() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteData_RouteValueDictionary__get_DataTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.IRouter> get_Routers()
// docid: M:Microsoft.AspNetCore.Routing.RouteData.get_Routers
    open func get_Routers() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteData_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_IRouter___get_Routers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Values()
// docid: M:Microsoft.AspNetCore.Routing.RouteData.get_Values
    open func get_Values() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteData_RouteValueDictionary__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    /**
    
            Gets the data tokens produced by routes on the current routing path.
            

    */
    open var DataTokens : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_DataTokens();
        }
    }
    /**
    
            Gets the list of  instances on the current routing path.
            

    */
    open var Routers : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        get {
            return try! get_Routers();
        }
    }
    /**
    
            Gets the values produced by routes on the current routing path.
            

    */
    open var Values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_Values();
        }
    }
} // RouteData


// type: Microsoft.AspNetCore.Routing.RouteData+RouteDataSnapshot
// boxed value type
    /**
    
            A snapshot of the state of a  instance.
            

    */
public final class RouteData_RouteDataSnapshot
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteData_RouteDataSnapshot_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.RouteData, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.IRouter>, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteData.RouteDataSnapshot.#ctor(Microsoft.AspNetCore.Routing.RouteData,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IList{Microsoft.AspNetCore.Routing.IRouter},Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new instance of  for .
            

    - Parameter routeData: The .
    - Parameter dataTokens: The data tokens.
    - Parameter routers: The routers.
    - Parameter values: The route values.
    */
    public init(routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData, dataTokens : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, routers : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>>, values : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteData_RouteDataSnapshot_ctor_0__4__RouteData_RouteValueDictionary_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_IRouter__RouteValueDictionary(&__thrown, routeData.get_handle(), dataTokens?.get_handle() ?? nil, (routers?.get_handle()), values?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Routing_RouteData_RouteDataSnapshot_implicit_ctor();
            super.init(hndl: h);
    }
    // void Restore()
// docid: M:Microsoft.AspNetCore.Routing.RouteData.RouteDataSnapshot.Restore
    /**
    
            Restores the  to the captured state.
            

    */
    public func Restore() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteData_RouteDataSnapshot_void__Restore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RouteData_RouteDataSnapshot


// type: Microsoft.AspNetCore.Routing.RouteDirection
    /**
    
            Indicates whether ASP.NET routing is processing a URL from an HTTP request or generating a URL.
            

    */
public struct RouteDirection : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteDirection_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Routing.RouteDirection IncomingRequest
    /**
    
            A URL from a client is being processed.
            

    */
    public static var IncomingRequest : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection(val: Microsoft_AspNetCore_Routing_RouteDirection_get_IncomingRequest());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Routing.RouteDirection UrlGeneration
    /**
    
            A URL is being created based on the route definition.
            

    */
    public static var UrlGeneration : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection(val: Microsoft_AspNetCore_Routing_RouteDirection_get_UrlGeneration());
            return __return;
        }
    }
} // RouteDirection


// type: Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions
public struct RoutingHttpContextExtensions {
    // Microsoft.AspNetCore.Routing.RouteData GetRouteData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Gets the  associated with the provided .
            

    - Parameter httpContext: The  associated with the current request.
    - Returns: The , or null.

    */
    public static func GetRouteData(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RoutingHttpContextExtensions_RouteData__GetRouteData_0__1__HttpContext(&__thrown, httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // System.Object GetRouteValue(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteValue(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Gets a route value from  associated with the provided
            .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter key: The key of the route value.
    - Returns: The corresponding route value, or null.

    */
    public static func GetRouteValue(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RoutingHttpContextExtensions_Object__GetRouteValue_0__2__HttpContext_String(&__thrown, httpContext.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RoutingHttpContextExtensions


// type: Microsoft.AspNetCore.Routing.VirtualPathContext
    /**
    
            A context for virtual path generation operations.
            

    */
open class VirtualPathContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_VirtualPathContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new instance of .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter ambientValues: The set of route values associated with the current request.
    - Parameter values: The set of new values provided for virtual path generation.
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, ambientValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_VirtualPathContext_ctor_0__3__HttpContext_RouteValueDictionary_RouteValueDictionary(&__thrown, httpContext.get_handle(), ambientValues.get_handle(), values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter ambientValues: The set of route values associated with the current request.
    - Parameter values: The set of new values provided for virtual path generation.
    - Parameter routeName: The name of the route to use for virtual path generation.
    */
    public init(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, ambientValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_VirtualPathContext_ctor_0__4__HttpContext_RouteValueDictionary_RouteValueDictionary_String(&__thrown, httpContext.get_handle(), ambientValues.get_handle(), values.get_handle(), routeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_AmbientValues()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.get_AmbientValues
    open func get_AmbientValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathContext_RouteValueDictionary__get_AmbientValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathContext_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathContext_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Values()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.get_Values
    open func get_Values() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathContext_RouteValueDictionary__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Values(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathContext.set_Values(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_Values(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_VirtualPathContext_void__set_Values_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the set of route values associated with the current request.
            

    */
    open var AmbientValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_AmbientValues();
        }
    }
    /**
    
            Gets the  associated with the current request.
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets the name of the route to use for virtual path generation.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
    }
    /**
    
            Gets or sets the set of new values provided for virtual path generation.
            

    */
    open var Values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_Values();
        }
        set(v) {
            return try! set_Values(value: v);
        }
    }
} // VirtualPathContext


// type: Microsoft.AspNetCore.Routing.VirtualPathData
    /**
    
            Represents information about the route and virtual path that are the result of
            generating a URL with the ASP.NET routing middleware.
            

    */
open class VirtualPathData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_VirtualPathData_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IRouter, System.String)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.#ctor(Microsoft.AspNetCore.Routing.IRouter,System.String)
    /**
    
             Initializes a new instance of the  class.
            

    - Parameter router: The object that is used to generate the URL.
    - Parameter virtualPath: The generated URL.
    */
    public init(router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, virtualPath : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_VirtualPathData_ctor_0__2__IRouter_String(&__thrown, router.get_handle(), virtualPath.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.#ctor(Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
             Initializes a new instance of the  class.
            

    - Parameter router: The object that is used to generate the URL.
    - Parameter virtualPath: The generated URL.
    - Parameter dataTokens: The collection of custom values.
    */
    public init(router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, virtualPath : dotnet.System.String, dataTokens : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_VirtualPathData_ctor_0__3__IRouter_String_RouteValueDictionary(&__thrown, router.get_handle(), virtualPath.get_handle(), dataTokens.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_DataTokens()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.get_DataTokens
    open func get_DataTokens() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathData_RouteValueDictionary__get_DataTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_Router()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.get_Router
    open func get_Router() throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathData_IRouter__get_Router_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Router(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.set_Router(Microsoft.AspNetCore.Routing.IRouter)
    open func set_Router(value : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_VirtualPathData_void__set_Router_0__1__IRouter(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VirtualPath()
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.get_VirtualPath
    open func get_VirtualPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_VirtualPathData_String__get_VirtualPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_VirtualPath(System.String)
// docid: M:Microsoft.AspNetCore.Routing.VirtualPathData.set_VirtualPath(System.String)
    open func set_VirtualPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_VirtualPathData_void__set_VirtualPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the collection of custom values for the .
            

    */
    open var DataTokens : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_DataTokens();
        }
    }
    /**
    
            Gets or sets the  that was used to generate the URL.
            

    */
    open var Router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter {
        get {
            return try! get_Router();
        }
        set(v) {
            return try! set_Router(value: v);
        }
    }
    /**
    
            Gets or sets the URL that was generated from the .
            

    */
    open var VirtualPath : dotnet.System.String {
        get {
            return try! get_VirtualPath();
        }
        set(v) {
            return try! set_VirtualPath(value: v);
        }
    }
} // VirtualPathData


}



public protocol Microsoft_AspNetCore_Routing_IOutboundParameterTransformer
    :
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
}

public protocol Microsoft_AspNetCore_Routing_IParameterPolicy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IRouteConstraint
    :
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
}

public protocol Microsoft_AspNetCore_Routing_IRouteHandler
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IRouter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IRoutingFeature
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.RouteData GetRouteData(Microsoft.AspNetCore.Http.HttpContext)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetRouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteData(httpContext: self);
    }
}

// EXTENSION METHOD System.Object GetRouteValue(Microsoft.AspNetCore.Http.HttpContext, System.String)
extension aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
    public func GetRouteValue(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteValue(httpContext: self, key: key);
    }
}

