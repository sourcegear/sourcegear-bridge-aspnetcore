// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.ConfigurationExtensions
public struct ConfigurationExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder Add<TSource>(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<TSource>)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Add``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{``0})
    /**
    
            Adds a new configuration source.
            

    - Parameter builder: The  to add to.
    - Parameter configureSource: Configures the source secrets.
    - Returns: The .

    */
    public static func Add<UTSource : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : dotnet.System.Action_1<UTSource>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_IConfigurationBuilder__Add_1__2__IConfigurationBuilder_System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, builder?.get_handle() ?? nil, nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func Add<UTSource : SGBridgeGenericValue>(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : @escaping (UTSource) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<UTSource>(configureSource);
        return try Add(builder: builder, configureSource: del_configureSource);
    }
    // System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
    /**
    
            Get the enumeration of key value pairs within the 
            

    - Parameter configuration: The  to enumerate.
    - Returns: An enumeration of key value pairs.

    */
    public static func AsEnumerable(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____AsEnumerable_0__1__IConfiguration(&__thrown, configuration?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration, bool)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)
    /**
    
            Get the enumeration of key value pairs within the 
            

    - Parameter configuration: The  to enumerate.
    - Parameter makePathsRelative: If true, the child keys returned will have the current configuration's Path trimmed from the front.
    - Returns: An enumeration of key value pairs.

    */
    public static func AsEnumerable(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, makePathsRelative : Bool) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____AsEnumerable_0__2__IConfiguration_bool(&__thrown, configuration?.get_handle() ?? nil, Swift.Int32(makePathsRelative ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool Exists(Microsoft.Extensions.Configuration.IConfigurationSection)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfigurationSection)
    /**
    
            Determines whether the section has a  or has children
            

    */
    public static func Exists(section : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_bool__Exists_0__1__IConfigurationSection(&__thrown, section?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)
    /**
    
            Shorthand for GetSection("ConnectionStrings")[name].
            

    - Parameter configuration: The configuration.
    - Parameter name: The connection string key.
    - Returns: The connection string.

    */
    public static func GetConnectionString(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_String__GetConnectionString_0__2__IConfiguration_String(&__thrown, configuration?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationSection GetRequiredSection(Microsoft.Extensions.Configuration.IConfiguration, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetRequiredSection(Microsoft.Extensions.Configuration.IConfiguration,System.String)
    /**
    
            Gets a configuration sub-section with the specified key.
            

    - Parameter configuration: 
    - Parameter key: The key of the configuration section.
    - Returns: The .

    */
    public static func GetRequiredSection(configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationExtensions_IConfigurationSection__GetRequiredSection_0__2__IConfiguration_String(&__thrown, configuration?.get_handle() ?? nil, key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ConfigurationExtensions


// type: Microsoft.Extensions.Configuration.ConfigurationKeyNameAttribute
public final class ConfigurationKeyNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationKeyNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationKeyNameAttribute.#ctor(System.String)
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationKeyNameAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationKeyNameAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationKeyNameAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ConfigurationKeyNameAttribute


// type: Microsoft.Extensions.Configuration.ConfigurationPath
public struct ConfigurationPath {
    // static field: System.String KeyDelimiter
    /**
    
            The delimiter ":" used to separate individual keys in a path.
            

    */
    public static var KeyDelimiter : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_Extensions_Configuration_ConfigurationPath_get_KeyDelimiter();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // System.String Combine(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Combines path segments into one path.
            

    - Parameter pathSegments: The path segments to combine.
    - Returns: The combined path.

    */
    public static func Combine(pathSegments : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationPath_String__Combine_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, (pathSegments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Combine(System.String[])
// docid: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
    /**
    
            Combines path segments into one path.
            

    - Parameter pathSegments: The path segments to combine.
    - Returns: The combined path.

    */
    public static func Combine(pathSegments : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationPath_String__Combine_0__1__StringArray(&__thrown, (pathSegments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetParentPath(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
    /**
    
            Extracts the path corresponding to the parent node for a given path.
            

    - Parameter path: The path.
    - Returns: The original path minus the last individual segment found in it. Null if the original path corresponds to a top level node.

    */
    public static func GetParentPath(path : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationPath_String__GetParentPath_0__1__String(&__thrown, path?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetSectionKey(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
    /**
    
            Extracts the last path segment from the path.
            

    - Parameter path: The path.
    - Returns: The last path segment of the path.

    */
    public static func GetSectionKey(path : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationPath_String__GetSectionKey_0__1__String(&__thrown, path?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ConfigurationPath


// type: Microsoft.Extensions.Configuration.ConfigurationRootExtensions
public struct ConfigurationRootExtensions {
    // System.String GetDebugView(Microsoft.Extensions.Configuration.IConfigurationRoot)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRootExtensions.GetDebugView(Microsoft.Extensions.Configuration.IConfigurationRoot)
    /**
    
            Generates a human-readable view of the configuration showing where each value came from.
            

    - Returns:  The debug view. 

    */
    public static func GetDebugView(root : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRootExtensions_String__GetDebugView_0__1__IConfigurationRoot(&__thrown, root?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ConfigurationRootExtensions


// type: Microsoft.Extensions.Configuration.IConfiguration
    /**
    
            Represents a set of key/value application configuration properties.
            

    */
open class IConfiguration
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfiguration
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfiguration_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationSection> GetChildren()
// docid: M:Microsoft.Extensions.Configuration.IConfiguration.GetChildren
    /**
    
            Gets the immediate descendant configuration sub-sections.
            

    - Returns: The configuration sub-sections.

    */
    open func GetChildren() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfiguration_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationSection___GetChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken
    /**
    
            Returns a  that can be used to observe when this configuration is reloaded.
            

    - Returns: A .

    */
    open func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfiguration_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationSection GetSection(System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfiguration.GetSection(System.String)
    /**
    
            Gets a configuration sub-section with the specified key.
            

    - Parameter key: The key of the configuration section.
    - Returns: The .

    */
    open func GetSection(key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfiguration_IConfigurationSection__GetSection_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfiguration.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfiguration_String__get_Item_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfiguration.set_Item(System.String,System.String)
    open func set_Item(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_IConfiguration_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConfiguration


// type: Microsoft.Extensions.Configuration.IConfigurationBuilder
    /**
    
            Represents a type used to build application configuration.
            

    */
open class IConfigurationBuilder
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfigurationBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfigurationBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Configuration.IConfigurationBuilder Add(Microsoft.Extensions.Configuration.IConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)
    /**
    
            Adds a new configuration source.
            

    - Parameter source: The configuration source to add.
    - Returns: The same .

    */
    open func Add(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSource>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationBuilder_IConfigurationBuilder__Add_0__1__IConfigurationSource(&__thrown, self.get_handle(), source?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationRoot Build()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Build
    /**
    
            Builds an  with keys and values from the set of sources registered in
            .
            

    - Returns: An  with keys and values from the registered sources.

    */
    open func Build() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationBuilder_IConfigurationRoot__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationBuilder.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationBuilder_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Configuration.IConfigurationSource> get_Sources()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationBuilder.get_Sources
    open func get_Sources() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSource>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationBuilder_System_Collections_Generic_IList_Microsoft_Extensions_Configuration_IConfigurationSource___get_Sources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IConfigurationBuilder


// type: Microsoft.Extensions.Configuration.IConfigurationProvider
    /**
    
            Provides configuration key/values for an application.
            

    */
open class IConfigurationProvider
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfigurationProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfigurationProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<System.String> GetChildKeys(System.Collections.Generic.IEnumerable<System.String>, System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
    /**
    
            Returns the immediate descendant configuration keys for a given parent path based on this
            s data and the set of keys returned by all the preceding
            s.
            

    - Parameter earlierKeys: The child keys returned by the preceding providers for the same parent path.
    - Parameter parentPath: The parent path.
    - Returns: The child keys.

    */
    open func GetChildKeys(earlierKeys : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, parentPath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationProvider_System_Collections_Generic_IEnumerable_string___GetChildKeys_0__2__System_Collections_Generic_IEnumerable_string__String(&__thrown, self.get_handle(), (earlierKeys?.get_handle()), parentPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
    /**
    
            Returns a change token if this provider supports change tracking, null otherwise.
            

    - Returns: The change token.

    */
    open func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationProvider_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationProvider.Load
    /**
    
            Loads configuration values from the source represented by this .
            

    */
    open func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_IConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)
    /**
    
            Sets a configuration value for the specified key.
            

    - Parameter key: The key.
    - Parameter value: The value.
    */
    open func Set(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_IConfigurationProvider_void__Set_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGet(System.String, ref System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String,System.String@)
    /**
    
            Tries to get a configuration value for the specified key.
            

    - Parameter key: The key.
    - Parameter value: The value.
    - Returns: True if a value for the specified key was found, otherwise false.

    */
    open func TryGet(key : Optional<dotnet.System.String>, value : inout dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_Extensions_Configuration_IConfigurationProvider_bool__TryGet_0__2__String_outString(&__thrown, self.get_handle(), key?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = dotnet.System.String(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IConfigurationProvider


// type: Microsoft.Extensions.Configuration.IConfigurationRoot
    /**
    
            Represents the root of an  hierarchy.
            

    */
open class IConfigurationRoot
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfigurationRoot,
    Microsoft_Extensions_Configuration_IConfiguration
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfigurationRoot_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Reload()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationRoot.Reload
    /**
    
            Force the configuration values to be reloaded from the underlying s.
            

    */
    open func Reload() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_IConfigurationRoot_void__Reload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationProvider> get_Providers()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationRoot.get_Providers
    open func get_Providers() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationRoot_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationProvider___get_Providers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IConfigurationRoot


// type: Microsoft.Extensions.Configuration.IConfigurationSection
    /**
    
            Represents a section of application configuration values.
            

    */
open class IConfigurationSection
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfigurationSection,
    Microsoft_Extensions_Configuration_IConfiguration
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfigurationSection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationSection.get_Key
    open func get_Key() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationSection_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationSection.get_Path
    open func get_Path() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationSection_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.Extensions.Configuration.IConfigurationSection.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationSection_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationSection.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_IConfigurationSection_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConfigurationSection


// type: Microsoft.Extensions.Configuration.IConfigurationSource
    /**
    
            Represents a source of configuration key/values for an application.
            

    */
open class IConfigurationSource
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_IConfigurationSource_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.IConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: An 

    */
    open func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_IConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IConfigurationSource


}



public protocol Microsoft_Extensions_Configuration_IConfiguration
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Configuration_IConfigurationBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Configuration_IConfigurationProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Configuration_IConfigurationRoot
    :
    Microsoft_Extensions_Configuration_IConfiguration
{
}

public protocol Microsoft_Extensions_Configuration_IConfigurationSection
    :
    Microsoft_Extensions_Configuration_IConfiguration
{
}

public protocol Microsoft_Extensions_Configuration_IConfigurationSource
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder Add<TSource>(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<TSource>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func Add<UTSource : SGBridgeGenericValue>(configureSource : dotnet.System.Action_1<UTSource>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.Add(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: configureSource);
    }
    // delegate closure overload
    public func Add<UTSource : SGBridgeGenericValue>(configureSource : @escaping (UTSource) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<UTSource>(configureSource);
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.Add(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: del_configureSource);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func AsEnumerable() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration, bool)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func AsEnumerable(makePathsRelative : Bool) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), makePathsRelative: makePathsRelative);
    }
}

// EXTENSION METHOD bool Exists(Microsoft.Extensions.Configuration.IConfigurationSection)
extension Microsoft_Extensions_Configuration_IConfigurationSection {
    public func Exists() throws -> Bool {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists(section: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.String GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration, System.String)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func GetConnectionString(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), name: name);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationSection GetRequiredSection(Microsoft.Extensions.Configuration.IConfiguration, System.String)
extension Microsoft_Extensions_Configuration_IConfiguration {
    public func GetRequiredSection(key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationExtensions.GetRequiredSection(configuration: aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl: __copy_handle(self.get_handle())), key: key);
    }
}

// EXTENSION METHOD System.String GetDebugView(Microsoft.Extensions.Configuration.IConfigurationRoot)
extension Microsoft_Extensions_Configuration_IConfigurationRoot {
    public func GetDebugView() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ConfigurationRootExtensions.GetDebugView(root: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot(hndl: __copy_handle(self.get_handle())));
    }
}

