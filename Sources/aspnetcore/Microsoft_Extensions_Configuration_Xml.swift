// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.XmlConfigurationExtensions
public struct XmlConfigurationExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool, bool)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)
    /**
    
            Adds a XML configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter provider: The  to use to access the file.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The .

    */
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, provider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlFile_0__5__IConfigurationBuilder_IFileProvider_String_bool_bool(&__thrown, builder?.get_handle() ?? nil, provider?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0), Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource})
    /**
    
            Adds a XML configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter configureSource: Configures the source.
    - Returns: The .

    */
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlFile_0__2__IConfigurationBuilder_System_Action_Microsoft_Extensions_Configuration_Xml_XmlConfigurationSource_(&__thrown, builder?.get_handle() ?? nil, (configureSource?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>(configureSource);
        return try AddXmlFile(builder: builder, configureSource: del_configureSource);
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)
    /**
    
            Adds the XML configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Returns: The .

    */
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlFile_0__2__IConfigurationBuilder_String(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)
    /**
    
            Adds the XML configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Returns: The .

    */
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlFile_0__3__IConfigurationBuilder_String_bool(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool, bool)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)
    /**
    
            Adds the XML configuration provider at  to .
            

    - Parameter builder: The  to add to.
    - Parameter path: Path relative to the base path stored in
             of .
    - Parameter optional: Whether the file is optional.
    - Parameter reloadOnChange: Whether the configuration should be reloaded if the file changes.
    - Returns: The .

    */
    public static func AddXmlFile(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlFile_0__4__IConfigurationBuilder_String_bool_bool(&__thrown, builder?.get_handle() ?? nil, path?.get_handle() ?? nil, Swift.Int32(optional ? 1 : 0), Swift.Int32(reloadOnChange ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlStream(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlStream(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.IO.Stream)
    /**
    
            Adds a XML configuration source to .
            

    - Parameter builder: The  to add to.
    - Parameter stream: The  to read the XML configuration data from.
    - Returns: The .

    */
    public static func AddXmlStream(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, stream : Optional<dotnet.System.IO.Stream>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_XmlConfigurationExtensions_IConfigurationBuilder__AddXmlStream_0__2__IConfigurationBuilder_Stream(&__thrown, builder?.get_handle() ?? nil, stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlConfigurationExtensions


}
// Microsoft.Extensions.Configuration.Xml
extension Microsoft.Extensions.Configuration.Xml {
// type: Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider
    /**
    
            Represents an XML file as an .
            

    */
open class XmlConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.FileConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Xml_XmlConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Configuration_Xml_XmlConfigurationProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource)
    /**
    
            Initializes a new instance with the specified source.
            

    - Parameter source: The source settings.
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Xml_XmlConfigurationProvider_ctor_0__1__XmlConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider.Load(System.IO.Stream)
    /**
    
            Loads the XML data from a stream.
            

    - Parameter stream: The stream to read.
    */
    open override func Load(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Xml_XmlConfigurationProvider_void__Load_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlConfigurationProvider


// type: Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource
    /**
    
            An XML file based .
            

    */
open class XmlConfigurationSource
    :
    aspnetcore.Microsoft.Extensions.Configuration.FileConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Xml_XmlConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Configuration_Xml_XmlConfigurationSource_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Xml_XmlConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: A 

    */
    open override func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Xml_XmlConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlConfigurationSource


// type: Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor
    /**
    
            Class responsible for encrypting and decrypting XML.
            

    */
open class XmlDocumentDecryptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Xml_XmlDocumentDecryptor_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Configuration_Xml_XmlDocumentDecryptor_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor Instance
    /**
    
            Accesses the singleton decryptor instance.
            

    */
    open class var Instance : Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor> {
        get {
        let __h___return = Microsoft_Extensions_Configuration_Xml_XmlDocumentDecryptor_get_Instance();
        let __return = (__h___return != nil) ? aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // System.Xml.XmlReader CreateDecryptingXmlReader(System.IO.Stream, System.Xml.XmlReaderSettings)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor.CreateDecryptingXmlReader(System.IO.Stream,System.Xml.XmlReaderSettings)
    /**
    
            Returns an XmlReader that decrypts data transparently.
            

    */
    open func CreateDecryptingXmlReader(input : Optional<dotnet.System.IO.Stream>, settings : Optional<dotnet.System.Xml.XmlReaderSettings>) throws -> Optional<dotnet.System.Xml.XmlReader> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Xml_XmlDocumentDecryptor_XmlReader__CreateDecryptingXmlReader_0__2__Stream_XmlReaderSettings(&__thrown, self.get_handle(), input?.get_handle() ?? nil, settings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlReader(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlDocumentDecryptor


// type: Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider
    /**
    
            An XML file based .
            

    */
open class XmlStreamConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource)
    /**
    
            Constructor.
            

    - Parameter source: The .
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationProvider_ctor_0__1__XmlStreamConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider.Load(System.IO.Stream)
    /**
    
            Loads XML configuration key/values from a stream into a provider.
            

    - Parameter stream: The  to load ini configuration data from.
    */
    open override func Load(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationProvider_void__Load_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.String> Read(System.IO.Stream, Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationProvider.Read(System.IO.Stream,Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor)
    /**
    
            Read a stream of XML values into a key/value dictionary.
            

    - Parameter stream: The stream of XML data.
    - Parameter decryptor: The  to use to decrypt.
    - Returns: The  which was read from the stream.

    */
    open class func Read(stream : Optional<dotnet.System.IO.Stream>, decryptor : Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationProvider_System_Collections_Generic_IDictionary_string_string___Read_0__2__Stream_XmlDocumentDecryptor(&__thrown, stream?.get_handle() ?? nil, decryptor?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlStreamConfigurationProvider


// type: Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource
    /**
    
            Represents a XML file as an .
            

    */
open class XmlStreamConfigurationSource
    :
    aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationSource_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: An 

    */
    open override func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Xml_XmlStreamConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // XmlStreamConfigurationSource


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, bool, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlFile(provider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>, path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), provider: provider, path: path, optional: optional, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlFile(configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: configureSource);
    }
    // delegate closure overload
    public func AddXmlFile(configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource>(configureSource);
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: del_configureSource);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlFile(path : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlFile(path : Optional<dotnet.System.String>, optional : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path, optional: optional);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, bool, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlFile(path : Optional<dotnet.System.String>, optional : Bool, reloadOnChange : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), path: path, optional: optional, reloadOnChange: reloadOnChange);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlStream(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.IO.Stream)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddXmlStream(stream : Optional<dotnet.System.IO.Stream>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlStream(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), stream: stream);
    }
}

