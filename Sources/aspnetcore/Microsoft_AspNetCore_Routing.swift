// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder
    /**
    
            Builds conventions that will be used for customization of MapAction  instances.
            

    */
public final class DelegateEndpointConventionBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Builder_IEndpointConventionBuilder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_DelegateEndpointConventionBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})
    /**
    
            Adds the specified convention to the builder. Conventions are used to customize  instances.
            

    - Parameter convention: The convention to add to the builder.
    */
    public func Add(convention : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_DelegateEndpointConventionBuilder_void__Add_0__1__System_Action_Microsoft_AspNetCore_Builder_EndpointBuilder_(&__thrown, self.get_handle(), convention.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func Add(convention : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws -> Void) throws {
        let del_convention = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>(convention);
        return try Add(convention: del_convention);
    }
} // DelegateEndpointConventionBuilder


// type: Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions
public struct DelegateEndpointRouteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP GET requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapGet(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapGet_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP POST requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapPost(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapPost_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP PUT requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapPut(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapPut_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP DELETE requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapDelete(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapDelete_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Collections.Generic.IEnumerable<System.String>, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Collections.Generic.IEnumerable{System.String},System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified HTTP methods and pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Parameter httpMethods: HTTP methods that the endpoint will match.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapMethods(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapMethods_0__4__IEndpointRouteBuilder_String_System_Collections_Generic_IEnumerable_string__Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), httpMethods.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__Map_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.AspNetCore.Routing.Patterns.RoutePattern,System.Delegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__Map_0__3__IEndpointRouteBuilder_RoutePattern_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Delegate)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapFallback_0__2__IEndpointRouteBuilder_Delegate(&__thrown, endpoints.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
// docid: M:Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Delegate)
    /**
    
            Adds a specialized  to the  that will match
            the provided pattern with the lowest possible priority.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter handler: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_DelegateEndpointRouteBuilderExtensions_DelegateEndpointConventionBuilder__MapFallback_0__3__IEndpointRouteBuilder_String_Delegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder(hndl : __return);
        }
    }
} // DelegateEndpointRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions
public struct EndpointRouteBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP GET requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapGet(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapGet_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapGet(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapGet(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP POST requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapPost(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapPost_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPost(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapPost(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP PUT requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapPut(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapPut_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPut(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapPut(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP DELETE requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapDelete(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapDelete_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapDelete(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapDelete(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Collections.Generic.IEnumerable<System.String>, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified HTTP methods and pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Parameter httpMethods: HTTP methods that the endpoint will match.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapMethods(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapMethods_0__4__IEndpointRouteBuilder_String_System_Collections_Generic_IEnumerable_string__RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), httpMethods.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMethods(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapMethods(endpoints: endpoints, pattern: pattern, httpMethods: httpMethods, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__Map_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try Map(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.AspNetCore.Routing.Patterns.RoutePattern,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a  to the  that matches HTTP requests
            for the specified pattern.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRouteBuilderExtensions_IEndpointConventionBuilder__Map_0__3__IEndpointRouteBuilder_RoutePattern_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Map(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try Map(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
} // EndpointRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions
public struct EndpointRoutingApplicationBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions.UseRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a  middleware to the specified .
            

    - Parameter builder: The  to add the middleware to.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseRouting(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRoutingApplicationBuilderExtensions_IApplicationBuilder__UseRouting_0__1__IApplicationBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseEndpoints(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions.UseEndpoints(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IEndpointRouteBuilder})
    /**
    
            Adds a  middleware to the specified 
            with the  instances built from configured .
            The  will execute the  associated with the current
            request.
            

    - Parameter builder: The  to add the middleware to.
    - Parameter configure: An  to configure the provided .
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseEndpoints(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_EndpointRoutingApplicationBuilderExtensions_IApplicationBuilder__UseEndpoints_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Routing_IEndpointRouteBuilder_(&__thrown, builder.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseEndpoints(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>(configure);
        return try UseEndpoints(builder: builder, configure: del_configure);
    }
} // EndpointRoutingApplicationBuilderExtensions


// type: Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions
public struct FallbackEndpointRouteBuilderExtensions {
    // static field: System.String DefaultPattern
    /**
    
            The default route pattern used by fallback routing. {(ASTERISK)path:nonfile}
            

    */
    public static var DefaultPattern : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Builder_FallbackEndpointRouteBuilderExtensions_get_DefaultPattern());
            return __return;
        }
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a specialized  to the  that will match
            requests for non-file-names with the lowest possible priority.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FallbackEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallback_0__2__IEndpointRouteBuilder_RequestDelegate(&__thrown, endpoints.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapFallback(endpoints: endpoints, requestDelegate: del_requestDelegate);
    }
    // Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a specialized  to the  that will match
            the provided pattern with the lowest possible priority.
            

    - Parameter endpoints: The  to add the route to.
    - Parameter pattern: The route pattern.
    - Parameter requestDelegate: The delegate executed when the endpoint is matched.
    - Returns: A  that can be used to further customize the endpoint.

    */
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_FallbackEndpointRouteBuilderExtensions_IEndpointConventionBuilder__MapFallback_0__3__IEndpointRouteBuilder_String_RequestDelegate(&__thrown, endpoints.get_handle(), pattern.get_handle(), requestDelegate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapFallback(endpoints : aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try MapFallback(endpoints: endpoints, pattern: pattern, requestDelegate: del_requestDelegate);
    }
} // FallbackEndpointRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions
public struct MapRouteRouteBuilderExtensions {
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String)
    /**
    
            Adds a route to the  with the specified name and template.
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter template: The URL pattern of the route.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapRouteRouteBuilderExtensions_IRouteBuilder__MapRoute_0__3__IRouteBuilder_String_String(&__thrown, routeBuilder.get_handle(), name?.get_handle() ?? nil, template?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object)
    /**
    
            Adds a route to the  with the specified name, template, and default values.
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the names
            and values of the default values.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapRouteRouteBuilderExtensions_IRouteBuilder__MapRoute_0__4__IRouteBuilder_String_String_Object(&__thrown, routeBuilder.get_handle(), name?.get_handle() ?? nil, template?.get_handle() ?? nil, defaults?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object)
    /**
    
            Adds a route to the  with the specified name, template, default values, and
            constraints.
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the names
            and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and values
            of the constraints.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapRouteRouteBuilderExtensions_IRouteBuilder__MapRoute_0__5__IRouteBuilder_String_String_Object_Object(&__thrown, routeBuilder.get_handle(), name?.get_handle() ?? nil, template?.get_handle() ?? nil, defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)
    /**
    
            Adds a route to the  with the specified name, template, default values, and
            data tokens.
            

    - Parameter routeBuilder: The  to add the route to.
    - Parameter name: The name of the route.
    - Parameter template: The URL pattern of the route.
    - Parameter defaults: 
            An object that contains default values for route parameters. The object's properties represent the names
            and values of the default values.
            
    - Parameter constraints: 
            An object that contains constraints for the route. The object's properties represent the names and values
            of the constraints.
            
    - Parameter dataTokens: 
            An object that contains data tokens for the route. The object's properties represent the names and values
            of the data tokens.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func MapRoute(routeBuilder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>, dataTokens : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_MapRouteRouteBuilderExtensions_IRouteBuilder__MapRoute_0__6__IRouteBuilder_String_String_Object_Object_Object(&__thrown, routeBuilder.get_handle(), name?.get_handle() ?? nil, template?.get_handle() ?? nil, defaults?.get_handle() ?? nil, constraints?.get_handle() ?? nil, dataTokens?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
} // MapRouteRouteBuilderExtensions


// type: Microsoft.AspNetCore.Builder.RouterMiddleware
    /**
    
            Middleware responsible for routing.
            

    */
open class RouterMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_RouterMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Builder.RouterMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Routing.IRouter)
    /**
    
            Constructs a new  instance with a given .
            

    - Parameter next: The delegate representing the remaining middleware in the request pipeline.
    - Parameter loggerFactory: The .
    - Parameter router: The  to use for routing requests.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_RouterMiddleware_ctor_0__3__RequestDelegate_ILoggerFactory_IRouter(&__thrown, next.get_handle(), loggerFactory.get_handle(), router.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Evaluates the handler associated with the 
            derived from .
            

    - Parameter httpContext: A  instance.
    */
    open func Invoke(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RouterMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RouterMiddleware


// type: Microsoft.AspNetCore.Builder.RoutingBuilderExtensions
public struct RoutingBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IRouter)
    /**
    
            Adds a  middleware to the specified  with the specified .
            

    - Parameter builder: The  to add the middleware to.
    - Parameter router: The  to use for routing requests.
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseRouter(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingBuilderExtensions_IApplicationBuilder__UseRouter_0__2__IApplicationBuilder_IRouter(&__thrown, builder.get_handle(), router.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
// docid: M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})
    /**
    
            Adds a  middleware to the specified 
            with the  built from configured .
            

    - Parameter builder: The  to add the middleware to.
    - Parameter action: An  to configure the provided .
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func UseRouter(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingBuilderExtensions_IApplicationBuilder__UseRouter_0__2__IApplicationBuilder_System_Action_Microsoft_AspNetCore_Routing_IRouteBuilder_(&__thrown, builder.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseRouter(builder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(action);
        return try UseRouter(builder: builder, action: del_action);
    }
} // RoutingBuilderExtensions


// type: Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions
public struct RoutingEndpointConventionBuilderExtensions {
    // TBuilder RequireHost<TBuilder>(TBuilder, System.String[])
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.RequireHost``1(``0,System.String[])
    /**
    
            Requires that endpoints match one of the specified hosts during routing.
            

    - Parameter builder: The  to add the metadata to.
    - Parameter hosts: 
            The hosts used during routing.
            Hosts should be Unicode rather than punycode, and may have a port.
            An empty collection means any host will be accepted.
            
    - Returns: A reference to this instance after the operation has completed.

    */
    public static func RequireHost<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, hosts : dotnet.System_Arr<dotnet.System.String>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__RequireHost_1__2__UTBuilder_StringArray(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), hosts.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder WithDisplayName<TBuilder>(TBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.WithDisplayName``1(``0,System.String)
    /**
    
            Sets the  to the provided  for all
            builders created by .
            

    - Parameter builder: The .
    - Parameter displayName: The display name.
    - Returns: The .

    */
    public static func WithDisplayName<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, displayName : dotnet.System.String) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__WithDisplayName_1__2__UTBuilder_String(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), displayName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder WithDisplayName<TBuilder>(TBuilder, System.Func<Microsoft.AspNetCore.Builder.EndpointBuilder,System.String>)
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.WithDisplayName``1(``0,System.Func{Microsoft.AspNetCore.Builder.EndpointBuilder,System.String})
    /**
    
            Sets the  using the provided  for all
            builders created by .
            

    - Parameter builder: The .
    - Parameter func: A delegate that produces the display name for each .
    - Returns: The .

    */
    public static func WithDisplayName<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, func_ : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder,dotnet.System.String>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__WithDisplayName_1__2__UTBuilder_System_Func_Microsoft_AspNetCore_Builder_EndpointBuilder_string_(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // delegate closure overload
    public static func WithDisplayName<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, func_ : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder>) throws -> dotnet.System.String) throws -> UTBuilder {
        let del_func_ = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder,dotnet.System.String>(func_);
        return try WithDisplayName(builder: builder, func_: del_func_);
    }
    // TBuilder WithMetadata<TBuilder>(TBuilder, System.Object[])
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.WithMetadata``1(``0,System.Object[])
    /**
    
            Adds the provided metadata  to  for all builders
            produced by .
            

    - Parameter builder: The .
    - Parameter items: A collection of metadata items.
    - Returns: The .

    */
    public static func WithMetadata<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, items : dotnet.System_Arr<dotnet.System.Object>) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__WithMetadata_1__2__UTBuilder_ObjectArray(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), items.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder WithName<TBuilder>(TBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.WithName``1(``0,System.String)
    /**
    
            Sets the  for all endpoints produced
            on the target  given the .
            The  on the endpoint is used for link generation and
            is treated as the operation ID in the given endpoint's OpenAPI specification.
            

    - Parameter builder: The .
    - Parameter endpointName: The endpoint name.
    - Returns: The .

    */
    public static func WithName<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, endpointName : dotnet.System.String) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__WithName_1__2__UTBuilder_String(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), endpointName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
    // TBuilder WithGroupName<TBuilder>(TBuilder, System.String)
// docid: M:Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.WithGroupName``1(``0,System.String)
    /**
    
            Sets the  for all endpoints produced
            on the target  given the .
            The  on the endpoint is used to set the endpoint's
            GroupName in the OpenAPI specification.
            

    - Parameter builder: The .
    - Parameter endpointGroupName: The endpoint group name.
    - Returns: The .

    */
    public static func WithGroupName<UTBuilder : SGBridgeGenericValue>(builder : UTBuilder, endpointGroupName : dotnet.System.String) throws -> UTBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_RoutingEndpointConventionBuilderExtensions_UTBuilder__WithGroupName_1__2__UTBuilder_String(UTBuilder.get_type_handle(), &__thrown, builder.to_gval(), endpointGroupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTBuilder(gval: __return);
        }
    }
} // RoutingEndpointConventionBuilderExtensions


}

// Microsoft.AspNetCore.Routing
extension Microsoft.AspNetCore.Routing {
// type: Microsoft.AspNetCore.Routing.CompositeEndpointDataSource
    /**
    
            Represents an  whose values come from a collection of  instances.
            

    */
public final class CompositeEndpointDataSource
    :
    aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_CompositeEndpointDataSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.EndpointDataSource>)
// docid: M:Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.EndpointDataSource})
    /**
    
            Instantiates a  object from .
            

    - Parameter endpointDataSources: An collection of  objects.
    */
    public init(endpointDataSources : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_CompositeEndpointDataSource_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_EndpointDataSource_(&__thrown, endpointDataSources.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.GetChangeToken
    /**
    
            Gets a  used to signal invalidation of cached 
            instances.
            

    - Returns: The .

    */
    public override func GetChangeToken() throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_CompositeEndpointDataSource_IChangeToken__GetChangeToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.EndpointDataSource> get_DataSources()
// docid: M:Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.get_DataSources
    public func get_DataSources() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_CompositeEndpointDataSource_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_EndpointDataSource___get_DataSources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint> get_Endpoints()
// docid: M:Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.get_Endpoints
    public override func get_Endpoints() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_CompositeEndpointDataSource_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint___get_Endpoints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns the collection of  instances associated with the object.
            

    */
    public var DataSources : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource> {
        get {
            return try! get_DataSources();
        }
    }
    /**
    
            Returns a read-only collection of  instances.
            

    */
    public override var Endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoints();
        }
    }
} // CompositeEndpointDataSource


// type: Microsoft.AspNetCore.Routing.DataTokensMetadata
    /**
    
            Metadata that defines data tokens for an . This metadata
            type provides data tokens value for  associated
            with an endpoint.
            

    */
public final class DataTokensMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IDataTokensMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_DataTokensMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Routing.DataTokensMetadata.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    /**
    
            Constructor for a new  given .
            

    - Parameter dataTokens: The data tokens.
    */
    public init(dataTokens : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_DataTokensMetadata_ctor_0__1__System_Collections_Generic_IReadOnlyDictionary_string_object_(&__thrown, dataTokens.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_DataTokens()
// docid: M:Microsoft.AspNetCore.Routing.DataTokensMetadata.get_DataTokens
    public func get_DataTokens() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_DataTokensMetadata_System_Collections_Generic_IReadOnlyDictionary_string_object___get_DataTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    /**
    
            Get the data tokens.
            

    */
    public var DataTokens : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_DataTokens();
        }
    }
} // DataTokensMetadata


// type: Microsoft.AspNetCore.Routing.DefaultEndpointDataSource
    /**
    
            Provides a collection of  instances.
            

    */
public final class DefaultEndpointDataSource
    :
    aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_DefaultEndpointDataSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.Endpoint[])
// docid: M:Microsoft.AspNetCore.Routing.DefaultEndpointDataSource.#ctor(Microsoft.AspNetCore.Http.Endpoint[])
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter endpoints: The  instances that the data source will return.
    */
    public init(endpoints : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_DefaultEndpointDataSource_ctor_0__1__EndpointArray(&__thrown, endpoints.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.DefaultEndpointDataSource.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter endpoints: The  instances that the data source will return.
    */
    public init(endpoints : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_DefaultEndpointDataSource_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, endpoints.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.AspNetCore.Routing.DefaultEndpointDataSource.GetChangeToken
    /**
    
            Gets a  used to signal invalidation of cached 
            instances.
            

    - Returns: The .

    */
    public override func GetChangeToken() throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_DefaultEndpointDataSource_IChangeToken__GetChangeToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint> get_Endpoints()
// docid: M:Microsoft.AspNetCore.Routing.DefaultEndpointDataSource.get_Endpoints
    public override func get_Endpoints() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_DefaultEndpointDataSource_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint___get_Endpoints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns a read-only collection of  instances.
            

    */
    public override var Endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoints();
        }
    }
} // DefaultEndpointDataSource


// type: Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver
    /**
    
            The default implementation of . Resolves constraints by parsing
            a constraint key and constraint arguments, using a map to resolve the constraint type, and calling an
            appropriate constructor for the constraint type.
            

    */
open class DefaultInlineConstraintResolver
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IInlineConstraintResolver
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_DefaultInlineConstraintResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Routing.RouteOptions>, System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Routing.RouteOptions},System.IServiceProvider)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter routeOptions: Accessor for  containing the constraints of interest.
    - Parameter serviceProvider: The  to get service arguments from.
    */
    public init(routeOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>, serviceProvider : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_DefaultInlineConstraintResolver_ctor_0__2__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Routing_RouteOptions__IServiceProvider(&__thrown, routeOptions.get_handle(), serviceProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouteConstraint ResolveConstraint(System.String)
// docid: M:Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)
    /**
    */
    open func ResolveConstraint(inlineConstraint : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_DefaultInlineConstraintResolver_IRouteConstraint__ResolveConstraint_0__1__String(&__thrown, self.get_handle(), inlineConstraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultInlineConstraintResolver


// type: Microsoft.AspNetCore.Routing.EndpointDataSource
    /**
    
            Provides a collection of  instances.
            

    */
open class EndpointDataSource
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_EndpointDataSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.Extensions.Primitives.IChangeToken GetChangeToken()
// docid: M:Microsoft.AspNetCore.Routing.EndpointDataSource.GetChangeToken
    /**
    
            Gets a  used to signal invalidation of cached 
            instances.
            

    - Returns: The .

    */
    open func GetChangeToken() throws -> aspnetcore.Microsoft.Extensions.Primitives.IChangeToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_EndpointDataSource_IChangeToken__GetChangeToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint> get_Endpoints()
// docid: M:Microsoft.AspNetCore.Routing.EndpointDataSource.get_Endpoints
    open func get_Endpoints() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_EndpointDataSource_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint___get_Endpoints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns a read-only collection of  instances.
            

    */
    open var Endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoints();
        }
    }
} // EndpointDataSource


// type: Microsoft.AspNetCore.Routing.EndpointGroupNameAttribute
    /**
    
            Specifies the endpoint group name in .
            

    */
public final class EndpointGroupNameAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Routing_IEndpointGroupNameMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_EndpointGroupNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.EndpointGroupNameAttribute.#ctor(System.String)
    /**
    
            Initializes an instance of the .
            

    - Parameter endpointGroupName: The endpoint group name.
    */
    public init(endpointGroupName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_EndpointGroupNameAttribute_ctor_0__1__String(&__thrown, endpointGroupName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_EndpointGroupName()
// docid: M:Microsoft.AspNetCore.Routing.EndpointGroupNameAttribute.get_EndpointGroupName
    public func get_EndpointGroupName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_EndpointGroupNameAttribute_String__get_EndpointGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    */
    public var EndpointGroupName : dotnet.System.String {
        get {
            return try! get_EndpointGroupName();
        }
    }
} // EndpointGroupNameAttribute


// type: Microsoft.AspNetCore.Routing.EndpointNameAttribute
    /**
    
            Specifies the endpoint name in .
            

    */
public final class EndpointNameAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Routing_IEndpointNameMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_EndpointNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.EndpointNameAttribute.#ctor(System.String)
    /**
    
            Initializes an instance of the EndpointNameAttribute.
            

    - Parameter endpointName: The endpoint name.
    */
    public init(endpointName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_EndpointNameAttribute_ctor_0__1__String(&__thrown, endpointName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_EndpointName()
// docid: M:Microsoft.AspNetCore.Routing.EndpointNameAttribute.get_EndpointName
    public func get_EndpointName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_EndpointNameAttribute_String__get_EndpointName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    */
    public var EndpointName : dotnet.System.String {
        get {
            return try! get_EndpointName();
        }
    }
} // EndpointNameAttribute


// type: Microsoft.AspNetCore.Routing.EndpointNameMetadata
    /**
    
            Specifies an endpoint name in .
            

    */
open class EndpointNameMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IEndpointNameMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_EndpointNameMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.EndpointNameMetadata.#ctor(System.String)
    /**
    
            Creates a new instance of  with the provided endpoint name.
            

    - Parameter endpointName: The endpoint name.
    */
    public init(endpointName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_EndpointNameMetadata_ctor_0__1__String(&__thrown, endpointName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_EndpointName()
// docid: M:Microsoft.AspNetCore.Routing.EndpointNameMetadata.get_EndpointName
    open /* method final */ func get_EndpointName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_EndpointNameMetadata_String__get_EndpointName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the endpoint name.
            

    */
    public var EndpointName : dotnet.System.String {
        get {
            return try! get_EndpointName();
        }
    }
} // EndpointNameMetadata


// type: Microsoft.AspNetCore.Routing.ExcludeFromDescriptionAttribute
    /**
    
            Indicates that this  should not be included in the generated API metadata.
            

    */
public final class ExcludeFromDescriptionAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Routing_IExcludeFromDescriptionMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_ExcludeFromDescriptionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.ExcludeFromDescriptionAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_ExcludeFromDescriptionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_ExcludeFromDescription()
// docid: M:Microsoft.AspNetCore.Routing.ExcludeFromDescriptionAttribute.get_ExcludeFromDescription
    public func get_ExcludeFromDescription() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ExcludeFromDescriptionAttribute_bool__get_ExcludeFromDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var ExcludeFromDescription : Bool {
        get {
            return try! get_ExcludeFromDescription();
        }
    }
} // ExcludeFromDescriptionAttribute


// type: Microsoft.AspNetCore.Routing.HostAttribute
    /**
    
            Attribute for providing host metdata that is used during routing.
            

    */
public final class HostAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Routing_IHostMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_HostAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.HostAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter host: 
            The host used during routing.
            Host should be Unicode rather than punycode, and may have a port.
            
    */
    public init(host : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_HostAttribute_ctor_0__1__String(&__thrown, host.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Routing.HostAttribute.#ctor(System.String[])
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter hosts: 
            The hosts used during routing.
            Hosts should be Unicode rather than punycode, and may have a port.
            An empty collection means any host will be accepted.
            
    */
    public init(hosts : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_HostAttribute_ctor_0__1__StringArray(&__thrown, hosts.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_Hosts()
// docid: M:Microsoft.AspNetCore.Routing.HostAttribute.get_Hosts
    public func get_Hosts() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_HostAttribute_System_Collections_Generic_IReadOnlyList_string___get_Hosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns a read-only collection of hosts used during routing.
            Hosts will be Unicode rather than punycode, and may have a port.
            An empty collection means any host will be accepted.
            

    */
    public var Hosts : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        get {
            return try! get_Hosts();
        }
    }
} // HostAttribute


// type: Microsoft.AspNetCore.Routing.HttpMethodMetadata
    /**
    
            Represents HTTP method metadata used during routing.
            

    */
public final class HttpMethodMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IHttpMethodMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_HttpMethodMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Routing.HttpMethodMetadata.#ctor(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter httpMethods: 
            The HTTP methods used during routing.
            An empty collection means any HTTP method will be accepted.
            
    */
    public init(httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_HttpMethodMetadata_ctor_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, httpMethods.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.String>, bool)
// docid: M:Microsoft.AspNetCore.Routing.HttpMethodMetadata.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter httpMethods: 
            The HTTP methods used during routing.
            An empty collection means any HTTP method will be accepted.
            
    - Parameter acceptCorsPreflight: A value indicating whether routing accepts CORS preflight requests.
    */
    public init(httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, acceptCorsPreflight : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_HttpMethodMetadata_ctor_0__2__System_Collections_Generic_IEnumerable_string__bool(&__thrown, httpMethods.get_handle(), Swift.Int32(acceptCorsPreflight ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_AcceptCorsPreflight()
// docid: M:Microsoft.AspNetCore.Routing.HttpMethodMetadata.get_AcceptCorsPreflight
    public func get_AcceptCorsPreflight() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_HttpMethodMetadata_bool__get_AcceptCorsPreflight_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Routing.HttpMethodMetadata.get_HttpMethods
    public func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_HttpMethodMetadata_System_Collections_Generic_IReadOnlyList_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns a value indicating whether the associated endpoint should accept CORS preflight requests.
            

    */
    public var AcceptCorsPreflight : Bool {
        get {
            return try! get_AcceptCorsPreflight();
        }
    }
    /**
    
            Returns a read-only collection of HTTP methods used during routing.
            An empty collection means any HTTP method will be accepted.
            

    */
    public var HttpMethods : dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        get {
            return try! get_HttpMethods();
        }
    }
} // HttpMethodMetadata


// type: Microsoft.AspNetCore.Routing.IDataTokensMetadata
    /**
    
            Metadata that defines data tokens for an . This metadata
            type provides data tokens value for  associated
            with an endpoint.
            

    */
open class IDataTokensMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IDataTokensMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IDataTokensMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_DataTokens()
// docid: M:Microsoft.AspNetCore.Routing.IDataTokensMetadata.get_DataTokens
    open func get_DataTokens() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IDataTokensMetadata_System_Collections_Generic_IReadOnlyDictionary_string_object___get_DataTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
} // IDataTokensMetadata


// type: Microsoft.AspNetCore.Routing.IDynamicEndpointMetadata
    /**
    
            A metadata interface that can be used to specify that the associated 
            will be dynamically replaced during matching.
            

    */
open class IDynamicEndpointMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IDynamicEndpointMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IDynamicEndpointMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsDynamic()
// docid: M:Microsoft.AspNetCore.Routing.IDynamicEndpointMetadata.get_IsDynamic
    open func get_IsDynamic() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IDynamicEndpointMetadata_bool__get_IsDynamic_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IDynamicEndpointMetadata


// type: Microsoft.AspNetCore.Routing.IEndpointAddressScheme`1
    /**
    
            Defines a contract to find endpoints based on the provided address.
            

    */
open class IEndpointAddressScheme_1<TAddress : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IEndpointAddressScheme_1
{
    public typealias TAddress_IEndpointAddressScheme_1 = TAddress;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IEndpointAddressScheme_1_get_type_handle(TAddress.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Http.Endpoint> FindEndpoints(TAddress)
// docid: M:Microsoft.AspNetCore.Routing.IEndpointAddressScheme`1.FindEndpoints(`0)
    /**
    
            Finds endpoints based on the provided .
            

    - Parameter address: The information used to look up endpoints.
    - Returns: A collection of .

    */
    open func FindEndpoints(address : TAddress) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointAddressScheme_1_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Http_Endpoint___FindEndpoints_0__1__TAddress(TAddress.get_type_handle(), &__thrown, self.get_handle(), address.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // IEndpointAddressScheme_1


// type: Microsoft.AspNetCore.Routing.IEndpointGroupNameMetadata
    /**
    
            Defines a contract used to specify an endpoint group name in .
            

    */
open class IEndpointGroupNameMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IEndpointGroupNameMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IEndpointGroupNameMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_EndpointGroupName()
// docid: M:Microsoft.AspNetCore.Routing.IEndpointGroupNameMetadata.get_EndpointGroupName
    open func get_EndpointGroupName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointGroupNameMetadata_String__get_EndpointGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IEndpointGroupNameMetadata


// type: Microsoft.AspNetCore.Routing.IEndpointNameMetadata
    /**
    
            Defines a contract use to specify an endpoint name in .
            

    */
open class IEndpointNameMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IEndpointNameMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IEndpointNameMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_EndpointName()
// docid: M:Microsoft.AspNetCore.Routing.IEndpointNameMetadata.get_EndpointName
    open func get_EndpointName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointNameMetadata_String__get_EndpointName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IEndpointNameMetadata


// type: Microsoft.AspNetCore.Routing.IEndpointRouteBuilder
    /**
    
            Defines a contract for a route builder in an application. A route builder specifies the routes for
            an application.
            

    */
open class IEndpointRouteBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IEndpointRouteBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IEndpointRouteBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Builder.IApplicationBuilder CreateApplicationBuilder()
// docid: M:Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.CreateApplicationBuilder
    /**
    
            Creates a new .
            

    - Returns: The new .

    */
    open func CreateApplicationBuilder() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointRouteBuilder_IApplicationBuilder__CreateApplicationBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.get_ServiceProvider
    open func get_ServiceProvider() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointRouteBuilder_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<Microsoft.AspNetCore.Routing.EndpointDataSource> get_DataSources()
// docid: M:Microsoft.AspNetCore.Routing.IEndpointRouteBuilder.get_DataSources
    open func get_DataSources() throws -> dotnet.System.Collections.Generic.ICollection_1<aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IEndpointRouteBuilder_System_Collections_Generic_ICollection_Microsoft_AspNetCore_Routing_EndpointDataSource___get_DataSources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
} // IEndpointRouteBuilder


// type: Microsoft.AspNetCore.Routing.IExcludeFromDescriptionMetadata
    /**
    
            Indicates whether or not that API explorer data should be emitted for this endpoint.
            

    */
open class IExcludeFromDescriptionMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IExcludeFromDescriptionMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IExcludeFromDescriptionMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_ExcludeFromDescription()
// docid: M:Microsoft.AspNetCore.Routing.IExcludeFromDescriptionMetadata.get_ExcludeFromDescription
    open func get_ExcludeFromDescription() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IExcludeFromDescriptionMetadata_bool__get_ExcludeFromDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IExcludeFromDescriptionMetadata


// type: Microsoft.AspNetCore.Routing.IHostMetadata
    /**
    
            Represents host metadata used during routing.
            

    */
open class IHostMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IHostMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IHostMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_Hosts()
// docid: M:Microsoft.AspNetCore.Routing.IHostMetadata.get_Hosts
    open func get_Hosts() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IHostMetadata_System_Collections_Generic_IReadOnlyList_string___get_Hosts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // IHostMetadata


// type: Microsoft.AspNetCore.Routing.IHttpMethodMetadata
    /**
    
            Represents HTTP method metadata used during routing.
            

    */
open class IHttpMethodMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IHttpMethodMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IHttpMethodMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_AcceptCorsPreflight()
// docid: M:Microsoft.AspNetCore.Routing.IHttpMethodMetadata.get_AcceptCorsPreflight
    open func get_AcceptCorsPreflight() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IHttpMethodMetadata_bool__get_AcceptCorsPreflight_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.String> get_HttpMethods()
// docid: M:Microsoft.AspNetCore.Routing.IHttpMethodMetadata.get_HttpMethods
    open func get_HttpMethods() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IHttpMethodMetadata_System_Collections_Generic_IReadOnlyList_string___get_HttpMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // IHttpMethodMetadata


// type: Microsoft.AspNetCore.Routing.IInlineConstraintResolver
    /**
    
            Defines an abstraction for resolving inline constraints as instances of .
            

    */
open class IInlineConstraintResolver
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IInlineConstraintResolver
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IInlineConstraintResolver_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Routing.IRouteConstraint ResolveConstraint(System.String)
// docid: M:Microsoft.AspNetCore.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)
    /**
    
            Resolves the inline constraint.
            

    - Parameter inlineConstraint: The inline constraint to resolve.
    - Returns: The  the inline constraint was resolved to.

    */
    open func ResolveConstraint(inlineConstraint : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IInlineConstraintResolver_IRouteConstraint__ResolveConstraint_0__1__String(&__thrown, self.get_handle(), inlineConstraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IInlineConstraintResolver


// type: Microsoft.AspNetCore.Routing.INamedRouter
    /**
    
            An interface for an  with a name.
            

    */
open class INamedRouter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_INamedRouter,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_INamedRouter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Routing.INamedRouter.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_INamedRouter_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // INamedRouter


// type: Microsoft.AspNetCore.Routing.IRouteBuilder
    /**
    
            Defines a contract for a route builder in an application. A route builder specifies the routes for
            an application.
            

    */
open class IRouteBuilder
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouteBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouteBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Routing.IRouter Build()
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.Build
    /**
    
            Builds an  that routes the routes specified in the  property.
            

    */
    open func Build() throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteBuilder_IRouter__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.IApplicationBuilder get_ApplicationBuilder()
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.get_ApplicationBuilder
    open func get_ApplicationBuilder() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteBuilder_IApplicationBuilder__get_ApplicationBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_DefaultHandler()
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.get_DefaultHandler
    open func get_DefaultHandler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteBuilder_IRouter__get_DefaultHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultHandler(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.set_DefaultHandler(Microsoft.AspNetCore.Routing.IRouter)
    open func set_DefaultHandler(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_IRouteBuilder_void__set_DefaultHandler_0__1__IRouter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.get_ServiceProvider
    open func get_ServiceProvider() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteBuilder_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.IRouter> get_Routes()
// docid: M:Microsoft.AspNetCore.Routing.IRouteBuilder.get_Routes
    open func get_Routes() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteBuilder_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_IRouter___get_Routes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
} // IRouteBuilder


// type: Microsoft.AspNetCore.Routing.IRouteCollection
    /**
    
            Interface for a router that supports appending new routes.
            

    */
open class IRouteCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouteCollection,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouteCollection_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Add(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.IRouteCollection.Add(Microsoft.AspNetCore.Routing.IRouter)
    /**
    
            Appends the collection of routes defined in .
            

    - Parameter router: A  instance.
    */
    open func Add(router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_IRouteCollection_void__Add_0__1__IRouter(&__thrown, self.get_handle(), router.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRouteCollection


// type: Microsoft.AspNetCore.Routing.IRouteNameMetadata
    /**
    
            Represents metadata used during link generation to find
            the associated endpoint using route name.
            

    */
open class IRouteNameMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_IRouteNameMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_IRouteNameMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.IRouteNameMetadata.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_IRouteNameMetadata_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRouteNameMetadata


// type: Microsoft.AspNetCore.Routing.ISuppressLinkGenerationMetadata
    /**
    
            Represents metadata used during link generation. If  is true
            the associated endpoint will not be used for link generation.
            

    */
open class ISuppressLinkGenerationMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_ISuppressLinkGenerationMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_ISuppressLinkGenerationMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_SuppressLinkGeneration()
// docid: M:Microsoft.AspNetCore.Routing.ISuppressLinkGenerationMetadata.get_SuppressLinkGeneration
    open func get_SuppressLinkGeneration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ISuppressLinkGenerationMetadata_bool__get_SuppressLinkGeneration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ISuppressLinkGenerationMetadata


// type: Microsoft.AspNetCore.Routing.ISuppressMatchingMetadata
    /**
    
            Metadata used to prevent URL matching. If  is true the
            associated endpoint will not be considered for URL matching.
            

    */
open class ISuppressMatchingMetadata
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_ISuppressMatchingMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_ISuppressMatchingMetadata_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_SuppressMatching()
// docid: M:Microsoft.AspNetCore.Routing.ISuppressMatchingMetadata.get_SuppressMatching
    open func get_SuppressMatching() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ISuppressMatchingMetadata_bool__get_SuppressMatching_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ISuppressMatchingMetadata


// type: Microsoft.AspNetCore.Routing.InlineRouteParameterParser
public struct InlineRouteParameterParser {
    // Microsoft.AspNetCore.Routing.Template.TemplatePart ParseRouteParameter(System.String)
// docid: M:Microsoft.AspNetCore.Routing.InlineRouteParameterParser.ParseRouteParameter(System.String)
    /**
    
            Parses a string representing the provided  into a .
            

    - Parameter routeParameter: A string representation of the route parameter.
    - Returns: A  instance.

    */
    public static func ParseRouteParameter(routeParameter : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_InlineRouteParameterParser_TemplatePart__ParseRouteParameter_0__1__String(&__thrown, routeParameter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart(hndl : __return);
        }
    }
} // InlineRouteParameterParser


// type: Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions
public struct LinkGeneratorEndpointNameAddressExtensions {
    // System.String GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Object,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter endpointName: The endpoint name. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template. Optional.
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetPathByName(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorEndpointNameAddressExtensions_String__GetPathByName_0__7__LinkGenerator_HttpContext_String_Object_System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), endpointName.get_handle(), values?.get_handle() ?? nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.Object,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter endpointName: The endpoint name. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template. Optional.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetPathByName(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorEndpointNameAddressExtensions_String__GetPathByName_0__6__LinkGenerator_String_Object_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), endpointName.get_handle(), values?.get_handle() ?? nil, pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Object,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter endpointName: The endpoint name. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template. Optional.
    - Parameter scheme: 
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of  will be used.
            
    - Parameter host: 
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value  will be used.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetUriByName(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorEndpointNameAddressExtensions_String__GetUriByName_0__9__LinkGenerator_HttpContext_String_Object_String_System_Nullable_Microsoft_AspNetCore_Http_HostString__System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), endpointName.get_handle(), values?.get_handle() ?? nil, scheme?.get_handle() ?? nil, (host != nil) ? host!.get_handle() : nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.Object,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter endpointName: The endpoint name. Used to resolve endpoints.
    - Parameter values: The route values. Used to expand parameters in the route template. Optional.
    - Parameter scheme: The URI scheme, applied to the resulting URI.
    - Parameter host: 
            The URI host/authority, applied to the resulting URI.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: An absolute URI, or null.

    */
    public static func GetUriByName(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorEndpointNameAddressExtensions_String__GetUriByName_0__8__LinkGenerator_String_Object_String_HostString_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), endpointName.get_handle(), values?.get_handle() ?? nil, scheme.get_handle(), host.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LinkGeneratorEndpointNameAddressExtensions


// type: Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions
public struct LinkGeneratorRouteValuesAddressExtensions {
    // System.String GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Object,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter routeName: The route name. Used to resolve endpoints. Optional.
    - Parameter values: The route values. Used to resolve endpoints and expand parameters in the route template. Optional.
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetPathByRouteValues(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorRouteValuesAddressExtensions_String__GetPathByRouteValues_0__7__LinkGenerator_HttpContext_String_Object_System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.Object,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates a URI with an absolute path based on the provided values.
            

    - Parameter generator: The .
    - Parameter routeName: The route name. Used to resolve endpoints. Optional.
    - Parameter values: The route values. Used to resolve endpoints and expand parameters in the route template. Optional.
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetPathByRouteValues(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorRouteValuesAddressExtensions_String__GetPathByRouteValues_0__6__LinkGenerator_String_Object_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Object,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter httpContext: The  associated with the current request.
    - Parameter routeName: The route name. Used to resolve endpoints. Optional.
    - Parameter values: The route values. Used to resolve endpoints and expand parameters in the route template. Optional.
    - Parameter scheme: 
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of  will be used.
            
    - Parameter host: 
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value  will be used.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: 
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of  will be used.
            
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: A URI with an absolute path, or null.

    */
    public static func GetUriByRouteValues(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorRouteValuesAddressExtensions_String__GetUriByRouteValues_0__9__LinkGenerator_HttpContext_String_Object_String_System_Nullable_Microsoft_AspNetCore_Http_HostString__System_Nullable_Microsoft_AspNetCore_Http_PathString__FragmentString_LinkOptions(&__thrown, generator.get_handle(), httpContext.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, scheme?.get_handle() ?? nil, (host != nil) ? host!.get_handle() : nil, (pathBase != nil) ? pathBase!.get_handle() : nil, fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
// docid: M:Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator,System.String,System.Object,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)
    /**
    
            Generates an absolute URI based on the provided values.
            

    - Parameter generator: The .
    - Parameter routeName: The route name. Used to resolve endpoints. Optional.
    - Parameter values: The route values. Used to resolve endpoints and expand parameters in the route template. Optional.
    - Parameter scheme: The URI scheme, applied to the resulting URI.
    - Parameter host: 
            The URI host/authority, applied to the resulting URI.
            See the remarks section for details about the security implications of the .
            
    - Parameter pathBase: An optional URI path base. Prepended to the path in the resulting URI.
    - Parameter fragment: An optional URI fragment. Appended to the resulting URI.
    - Parameter options: 
            An optional . Settings on provided object override the settings with matching
            names from RouteOptions.
            
    - Returns: An absolute URI, or null.

    */
    public static func GetUriByRouteValues(generator : aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkGeneratorRouteValuesAddressExtensions_String__GetUriByRouteValues_0__8__LinkGenerator_String_Object_String_HostString_PathString_FragmentString_LinkOptions(&__thrown, generator.get_handle(), routeName?.get_handle() ?? nil, values?.get_handle() ?? nil, scheme.get_handle(), host.get_handle(), pathBase.get_handle(), fragment.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LinkGeneratorRouteValuesAddressExtensions


// type: Microsoft.AspNetCore.Routing.LinkParser
    /**
    
            Defines a contract to parse URIs using information from routing.
            

    */
open class LinkParser
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_LinkParser_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.RouteValueDictionary ParsePathByAddress<TAddress>(TAddress, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Routing.LinkParser.ParsePathByAddress``1(``0,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Attempts to parse the provided  using the route pattern
            specified by the  matching .
            

    - Parameter address: The address value. Used to resolve endpoints.
    - Parameter path: The URI path to parse.
    - Returns: 
            A  with the parsed values if parsing is successful;
            otherwise null.
            

    */
    open func ParsePathByAddress<UTAddress : SGBridgeGenericValue>(address : UTAddress, path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkParser_RouteValueDictionary__ParsePathByAddress_1__2__UTAddress_PathString(UTAddress.get_type_handle(), &__thrown, self.get_handle(), address.to_gval(), path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LinkParser


// type: Microsoft.AspNetCore.Routing.LinkParserEndpointNameAddressExtensions
public struct LinkParserEndpointNameAddressExtensions {
    // Microsoft.AspNetCore.Routing.RouteValueDictionary ParsePathByEndpointName(Microsoft.AspNetCore.Routing.LinkParser, System.String, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Routing.LinkParserEndpointNameAddressExtensions.ParsePathByEndpointName(Microsoft.AspNetCore.Routing.LinkParser,System.String,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Attempts to parse the provided  using the route pattern
            specified by the  matching .
            

    - Parameter parser: The .
    - Parameter endpointName: The endpoint name. Used to resolve endpoints.
    - Parameter path: The URI path to parse.
    - Returns: 
            A  with the parsed values if parsing is successful;
            otherwise null.
            

    */
    public static func ParsePathByEndpointName(parser : aspnetcore.Microsoft.AspNetCore.Routing.LinkParser, endpointName : dotnet.System.String, path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_LinkParserEndpointNameAddressExtensions_RouteValueDictionary__ParsePathByEndpointName_0__3__LinkParser_String_PathString(&__thrown, parser.get_handle(), endpointName.get_handle(), path.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LinkParserEndpointNameAddressExtensions


// type: Microsoft.AspNetCore.Routing.MatcherPolicy
    /**
    
            Defines a policy that applies behaviors to the URL matcher. Implementations
            of  and related interfaces must be registered
            in the dependency injection container as singleton services of type
            .
            

    */
open class MatcherPolicy
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_MatcherPolicy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.MatcherPolicy.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_MatcherPolicy_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets a value that determines the order the  should
            be applied. Policies are applied in ascending numeric value of the 
            property.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // MatcherPolicy


// type: Microsoft.AspNetCore.Routing.ParameterPolicyFactory
    /**
    
            Defines an abstraction for resolving inline parameter policies as instances of .
            

    */
open class ParameterPolicyFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_ParameterPolicyFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.IParameterPolicy Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart, System.String)
// docid: M:Microsoft.AspNetCore.Routing.ParameterPolicyFactory.Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart,System.String)
    /**
    
            Creates a parameter policy.
            

    - Parameter parameter: The parameter the parameter policy is being created for.
    - Parameter inlineText: The inline text to resolve.
    - Returns: The  for the parameter.

    */
    open func Create(parameter : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart>, inlineText : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ParameterPolicyFactory_IParameterPolicy__Create_0__2__RoutePatternParameterPart_String(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil, inlineText.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IParameterPolicy Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart, Microsoft.AspNetCore.Routing.IParameterPolicy)
// docid: M:Microsoft.AspNetCore.Routing.ParameterPolicyFactory.Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart,Microsoft.AspNetCore.Routing.IParameterPolicy)
    /**
    
            Creates a parameter policy.
            

    - Parameter parameter: The parameter the parameter policy is being created for.
    - Parameter parameterPolicy: An existing parameter policy.
    - Returns: The  for the parameter.

    */
    open func Create(parameter : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart>, parameterPolicy : aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ParameterPolicyFactory_IParameterPolicy__Create_0__2__RoutePatternParameterPart_IParameterPolicy(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil, parameterPolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.IParameterPolicy Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart, Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference)
// docid: M:Microsoft.AspNetCore.Routing.ParameterPolicyFactory.Create(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart,Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference)
    /**
    
            Creates a parameter policy.
            

    - Parameter parameter: The parameter the parameter policy is being created for.
    - Parameter reference: The reference to resolve.
    - Returns: The  for the parameter.

    */
    open func Create(parameter : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart>, reference : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_ParameterPolicyFactory_IParameterPolicy__Create_0__2__RoutePatternParameterPart_RoutePatternParameterPolicyReference(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil, reference.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy(hndl : __return);
        }
    }
} // ParameterPolicyFactory


// type: Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions
public struct RequestDelegateRouteBuilderExtensions {
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  for the given , and
            .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapRoute(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapRoute_0__3__IRouteBuilder_String_RequestDelegate(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapRoute(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapRoute(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  for the given , and
            .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewareRoute(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewareRoute_0__3__IRouteBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewareRoute(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewareRoute(builder: builder, template: template, action: del_action);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  that only matches HTTP DELETE requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapDelete_0__3__IRouteBuilder_String_RequestDelegate(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapDelete(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  that only matches HTTP DELETE requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewareDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewareDelete_0__3__IRouteBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewareDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewareDelete(builder: builder, template: template, action: del_action);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})
    /**
    
            Adds a route to the  that only matches HTTP DELETE requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapDelete_0__3__IRouteBuilder_String_System_Func_Microsoft_AspNetCore_Http_HttpRequest_Microsoft_AspNetCore_Http_HttpResponse_Microsoft_AspNetCore_Routing_RouteData_Task_(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapDelete(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try MapDelete(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  that only matches HTTP GET requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapGet_0__3__IRouteBuilder_String_RequestDelegate(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapGet(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  that only matches HTTP GET requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewareGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewareGet_0__3__IRouteBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewareGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewareGet(builder: builder, template: template, action: del_action);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})
    /**
    
            Adds a route to the  that only matches HTTP GET requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapGet_0__3__IRouteBuilder_String_System_Func_Microsoft_AspNetCore_Http_HttpRequest_Microsoft_AspNetCore_Http_HttpResponse_Microsoft_AspNetCore_Routing_RouteData_Task_(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapGet(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try MapGet(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  that only matches HTTP POST requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapPost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapPost_0__3__IRouteBuilder_String_RequestDelegate(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapPost(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  that only matches HTTP POST requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewarePost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewarePost_0__3__IRouteBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewarePost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewarePost(builder: builder, template: template, action: del_action);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})
    /**
    
            Adds a route to the  that only matches HTTP POST requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapPost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapPost_0__3__IRouteBuilder_String_System_Func_Microsoft_AspNetCore_Http_HttpRequest_Microsoft_AspNetCore_Http_HttpResponse_Microsoft_AspNetCore_Routing_RouteData_Task_(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPost(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try MapPost(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  that only matches HTTP PUT requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapPut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapPut_0__3__IRouteBuilder_String_RequestDelegate(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapPut(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  that only matches HTTP PUT requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewarePut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewarePut_0__3__IRouteBuilder_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewarePut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewarePut(builder: builder, template: template, action: del_action);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})
    /**
    
            Adds a route to the  that only matches HTTP PUT requests for the given
            , and .
            

    - Parameter builder: The .
    - Parameter template: The route template.
    - Parameter handler: The route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapPut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapPut_0__3__IRouteBuilder_String_System_Func_Microsoft_AspNetCore_Http_HttpRequest_Microsoft_AspNetCore_Http_HttpResponse_Microsoft_AspNetCore_Routing_RouteData_Task_(&__thrown, builder.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapPut(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try MapPut(builder: builder, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})
    /**
    
            Adds a route to the  that only matches HTTP requests for the given
            , , and .
            

    - Parameter builder: The .
    - Parameter verb: The HTTP verb allowed by the route.
    - Parameter template: The route template.
    - Parameter handler: The route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapVerb_0__4__IRouteBuilder_String_String_System_Func_Microsoft_AspNetCore_Http_HttpRequest_Microsoft_AspNetCore_Http_HttpResponse_Microsoft_AspNetCore_Routing_RouteData_Task_(&__thrown, builder.get_handle(), verb.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try MapVerb(builder: builder, verb: verb, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Adds a route to the  that only matches HTTP requests for the given
            , , and .
            

    - Parameter builder: The .
    - Parameter verb: The HTTP verb allowed by the route.
    - Parameter template: The route template.
    - Parameter handler: The  route handler.
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapVerb_0__4__IRouteBuilder_String_String_RequestDelegate(&__thrown, builder.get_handle(), verb.get_handle(), template.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try MapVerb(builder: builder, verb: verb, template: template, handler: del_handler);
    }
    // Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
// docid: M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})
    /**
    
            Adds a route to the  that only matches HTTP requests for the given
            , , and .
            

    - Parameter builder: The .
    - Parameter verb: The HTTP verb allowed by the route.
    - Parameter template: The route template.
    - Parameter action: The action to apply to the .
    - Returns: A reference to the  after this operation has completed.

    */
    public static func MapMiddlewareVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RequestDelegateRouteBuilderExtensions_IRouteBuilder__MapMiddlewareVerb_0__4__IRouteBuilder_String_String_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder_(&__thrown, builder.get_handle(), verb.get_handle(), template.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func MapMiddlewareVerb(builder : aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder, verb : dotnet.System.String, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try MapMiddlewareVerb(builder: builder, verb: verb, template: template, action: del_action);
    }
} // RequestDelegateRouteBuilderExtensions


// type: Microsoft.AspNetCore.Routing.Route
    /**
    
            Represents an instance of a route.
            

    */
open class Route
    :
    aspnetcore.Microsoft.AspNetCore.Routing.RouteBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Route_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
// docid: M:Microsoft.AspNetCore.Routing.Route.#ctor(Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
    /**
    
            Constructs a new  instance.
            

    - Parameter target: An  instance associated with the component.
    - Parameter routeTemplate: A string representation of the route template.
    - Parameter inlineConstraintResolver: An  used for resolving inline constraints.
    */
    public init(target : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, routeTemplate : dotnet.System.String, inlineConstraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Route_ctor_0__3__IRouter_String_IInlineConstraintResolver(&__thrown, target.get_handle(), routeTemplate.get_handle(), inlineConstraintResolver.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Collections.Generic.IDictionary<System.String,System.Object>, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
// docid: M:Microsoft.AspNetCore.Routing.Route.#ctor(Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
    /**
    
            Constructs a new  instance.
            

    - Parameter target: An  instance associated with the component.
    - Parameter routeTemplate: A string representation of the route template.
    - Parameter defaults: The default values for parameters in the route.
    - Parameter constraints: The constraints for the route.
    - Parameter dataTokens: The data tokens for the route.
    - Parameter inlineConstraintResolver: An  used for resolving inline constraints.
    */
    public init(target : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, routeTemplate : dotnet.System.String, defaults : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, constraints : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>, dataTokens : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, inlineConstraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Route_ctor_0__6__IRouter_String_RouteValueDictionary_System_Collections_Generic_IDictionary_string_object__RouteValueDictionary_IInlineConstraintResolver(&__thrown, target.get_handle(), routeTemplate.get_handle(), defaults?.get_handle() ?? nil, (constraints?.get_handle()), dataTokens?.get_handle() ?? nil, inlineConstraintResolver.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.IRouter, System.String, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Collections.Generic.IDictionary<System.String,System.Object>, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
// docid: M:Microsoft.AspNetCore.Routing.Route.#ctor(Microsoft.AspNetCore.Routing.IRouter,System.String,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.IInlineConstraintResolver)
    /**
    
            Constructs a new  instance.
            

    - Parameter target: An  instance associated with the component.
    - Parameter routeName: The name of the route.
    - Parameter routeTemplate: A string representation of the route template.
    - Parameter defaults: The default values for parameters in the route.
    - Parameter constraints: The constraints for the route.
    - Parameter dataTokens: The data tokens for the route.
    - Parameter inlineConstraintResolver: An  used for resolving inline constraints.
    */
    public init(target : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, routeName : Optional<dotnet.System.String>, routeTemplate : Optional<dotnet.System.String>, defaults : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, constraints : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>, dataTokens : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, inlineConstraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Route_ctor_0__7__IRouter_String_String_RouteValueDictionary_System_Collections_Generic_IDictionary_string_object__RouteValueDictionary_IInlineConstraintResolver(&__thrown, target.get_handle(), routeName?.get_handle() ?? nil, routeTemplate?.get_handle() ?? nil, defaults?.get_handle() ?? nil, (constraints?.get_handle()), dataTokens?.get_handle() ?? nil, inlineConstraintResolver.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Routing.Route.get_RouteTemplate
    open func get_RouteTemplate() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Route_String__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets a string representation of the route template.
            

    */
    open var RouteTemplate : Optional<dotnet.System.String> {
        get {
            return try! get_RouteTemplate();
        }
    }
} // Route


// type: Microsoft.AspNetCore.Routing.RouteBase
    /**
    
            Base class implementation of an .
            

    */
open class RouteBase
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouter,
    Microsoft_AspNetCore_Routing_INamedRouter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, Microsoft.AspNetCore.Routing.IInlineConstraintResolver, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.Collections.Generic.IDictionary<System.String,System.Object>, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.#ctor(System.String,System.String,Microsoft.AspNetCore.Routing.IInlineConstraintResolver,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new  instance.
            

    - Parameter template: The route template.
    - Parameter name: The name of the route.
    - Parameter constraintResolver: An  used for resolving inline constraints.
    - Parameter defaults: The default values for parameters in the route.
    - Parameter constraints: The constraints for the route.
    - Parameter dataTokens: The data tokens for the route.
    */
    public init(template : Optional<dotnet.System.String>, name : Optional<dotnet.System.String>, constraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver, defaults : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, constraints : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>, dataTokens : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteBase_ctor_0__6__String_String_IInlineConstraintResolver_RouteValueDictionary_System_Collections_Generic_IDictionary_string_object__RouteValueDictionary(&__thrown, template?.get_handle() ?? nil, name?.get_handle() ?? nil, constraintResolver.get_handle(), defaults?.get_handle() ?? nil, (constraints?.get_handle()), dataTokens?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    */
    open func RouteAsync(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_Task__RouteAsync_0__1__RouteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.VirtualPathData GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
    /**
    */
    open func GetVirtualPath(context : aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_VirtualPathData__GetVirtualPath_0__1__VirtualPathContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.ToString
    /**
    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.get_Constraints
    open func get_Constraints() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Constraints(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint>)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.set_Constraints(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Routing.IRouteConstraint})
    open func set_Constraints(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBase_void__set_Constraints_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_DataTokens()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.get_DataTokens
    open func get_DataTokens() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_RouteValueDictionary__get_DataTokens_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DataTokens(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.set_DataTokens(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_DataTokens(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBase_void__set_DataTokens_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Defaults()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.get_Defaults
    open func get_Defaults() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_RouteValueDictionary__get_Defaults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_Defaults(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBase_void__set_Defaults_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBase_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.RouteTemplate get_ParsedTemplate()
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.get_ParsedTemplate
    open func get_ParsedTemplate() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBase_RouteTemplate__get_ParsedTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParsedTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
// docid: M:Microsoft.AspNetCore.Routing.RouteBase.set_ParsedTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
    open func set_ParsedTemplate(value : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBase_void__set_ParsedTemplate_0__1__RouteTemplate(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the set of constraints associated with each route.
            

    */
    open var Constraints : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        get {
            return try! get_Constraints();
        }
        set(v) {
            return try! set_Constraints(value: v);
        }
    }
    /**
    
            Gets the data tokens associated with the route.
            

    */
    open var DataTokens : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_DataTokens();
        }
        set(v) {
            return try! set_DataTokens(value: v);
        }
    }
    /**
    
            Gets the default values for each route parameter.
            

    */
    open var Defaults : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_Defaults();
        }
        set(v) {
            return try! set_Defaults(value: v);
        }
    }
    /**
    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            Gets the  associated with the route.
            

    */
    open var ParsedTemplate : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate {
        get {
            return try! get_ParsedTemplate();
        }
        set(v) {
            return try! set_ParsedTemplate(value: v);
        }
    }
} // RouteBase


// type: Microsoft.AspNetCore.Routing.RouteBuilder
    /**
    
            Provides support for specifying routes in an application.
            

    */
open class RouteBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteBuilder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.#ctor(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Constructs a new  instance given an .
            

    - Parameter applicationBuilder: An  instance.
    */
    public init(applicationBuilder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteBuilder_ctor_0__1__IApplicationBuilder(&__thrown, applicationBuilder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.#ctor(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IRouter)
    /**
    
            Constructs a new  instance given an 
            and .
            

    - Parameter applicationBuilder: An  instance.
    - Parameter defaultHandler: The default  used if a new route is added without a handler.
    */
    public init(applicationBuilder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, defaultHandler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteBuilder_ctor_0__2__IApplicationBuilder_IRouter(&__thrown, applicationBuilder.get_handle(), defaultHandler?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.IRouter Build()
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.Build
    /**
    */
    open /* method final */ func Build() throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBuilder_IRouter__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Builder.IApplicationBuilder get_ApplicationBuilder()
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.get_ApplicationBuilder
    open /* method final */ func get_ApplicationBuilder() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBuilder_IApplicationBuilder__get_ApplicationBuilder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_DefaultHandler()
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.get_DefaultHandler
    open /* method final */ func get_DefaultHandler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBuilder_IRouter__get_DefaultHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultHandler(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.set_DefaultHandler(Microsoft.AspNetCore.Routing.IRouter)
    open /* method final */ func set_DefaultHandler(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteBuilder_void__set_DefaultHandler_0__1__IRouter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IServiceProvider get_ServiceProvider()
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.get_ServiceProvider
    open /* method final */ func get_ServiceProvider() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBuilder_IServiceProvider__get_ServiceProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.IRouter> get_Routes()
// docid: M:Microsoft.AspNetCore.Routing.RouteBuilder.get_Routes
    open /* method final */ func get_Routes() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteBuilder_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_IRouter___get_Routes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    */
    public var ApplicationBuilder : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        get {
            return try! get_ApplicationBuilder();
        }
    }
    /**
    */
    public var DefaultHandler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        get {
            return try! get_DefaultHandler();
        }
        set(v) {
            return try! set_DefaultHandler(value: v!);
        }
    }
    /**
    */
    public var Routes : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        get {
            return try! get_Routes();
        }
    }
    /**
    */
    public var ServiceProvider : dotnet.System.IServiceProvider {
        get {
            return try! get_ServiceProvider();
        }
    }
} // RouteBuilder


// type: Microsoft.AspNetCore.Routing.RouteCollection
    /**
    
            Supports managing a collection fo multiple routes.
            

    */
open class RouteCollection
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteCollection,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.Add(Microsoft.AspNetCore.Routing.IRouter)
    /**
    */
    open /* method final */ func Add(router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteCollection_void__Add_0__1__IRouter(&__thrown, self.get_handle(), router.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    */
    open func RouteAsync(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteCollection_Task__RouteAsync_0__1__RouteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.VirtualPathData GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
    /**
    */
    open func GetVirtualPath(context : aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteCollection_VirtualPathData__GetVirtualPath_0__1__VirtualPathContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_Item(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.RouteCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteCollection_IRouter__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __return);
        }
    }
    /**
    
            Gets the total number of routes registered in the collection.
            

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // RouteCollection


// type: Microsoft.AspNetCore.Routing.RouteConstraintBuilder
    /**
    
            A builder for produding a mapping of keys to see .
            

    */
open class RouteConstraintBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteConstraintBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IInlineConstraintResolver, System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.#ctor(Microsoft.AspNetCore.Routing.IInlineConstraintResolver,System.String)
    /**
    
            Creates a new instance of  instance.
            

    - Parameter inlineConstraintResolver: The .
    - Parameter displayName: The display name (for use in error messages).
    */
    public init(inlineConstraintResolver : aspnetcore.Microsoft.AspNetCore.Routing.IInlineConstraintResolver, displayName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteConstraintBuilder_ctor_0__2__IInlineConstraintResolver_String(&__thrown, inlineConstraintResolver.get_handle(), displayName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint> Build()
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.Build
    /**
    
            Builds a mapping of constraints.
            

    - Returns: An  of the constraints.

    */
    open func Build() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteConstraintBuilder_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint___Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // void AddConstraint(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.AddConstraint(System.String,System.Object)
    /**
    
             Adds a constraint instance for the given key.
             

    - Parameter key: The key.
    - Parameter value: 
             The constraint instance. Must either be a string or an instance of .
             
    */
    open func AddConstraint(key : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteConstraintBuilder_void__AddConstraint_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResolvedConstraint(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.AddResolvedConstraint(System.String,System.String)
    /**
    
            Adds a constraint for the given key, resolved by the .
            

    - Parameter key: The key.
    - Parameter constraintText: The text to be resolved by .
    */
    open func AddResolvedConstraint(key : dotnet.System.String, constraintText : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteConstraintBuilder_void__AddResolvedConstraint_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), constraintText.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetOptional(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintBuilder.SetOptional(System.String)
    /**
    
            Sets the given key as optional.
            

    - Parameter key: The key.
    */
    open func SetOptional(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteConstraintBuilder_void__SetOptional_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RouteConstraintBuilder


// type: Microsoft.AspNetCore.Routing.RouteConstraintMatcher
public struct RouteConstraintMatcher {
    // bool Match(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint>, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, Microsoft.AspNetCore.Routing.RouteDirection, Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.AspNetCore.Routing.RouteConstraintMatcher.Match(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Routing.IRouteConstraint},Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,Microsoft.AspNetCore.Routing.RouteDirection,Microsoft.Extensions.Logging.ILogger)
    /**
    
            Determines if  match the provided .
            

    - Parameter constraints: The constraints for the route.
    - Parameter routeValues: The route parameter values extracted from the matched route.
    - Parameter httpContext: The  associated with the current request.
    - Parameter route: The router that this constraint belongs to.
    - Parameter routeDirection: 
            Indicates whether the constraint check is performed
            when the incoming request is handled or when a URL is generated.
            
    - Parameter logger: The .
    - Returns:  if the all route values match their constraints.

    */
    public static func Match(constraints : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>, routeValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, route : aspnetcore.Microsoft.AspNetCore.Routing.IRouter, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteConstraintMatcher_bool__Match_0__6__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint__RouteValueDictionary_HttpContext_IRouter_RouteDirection_ILogger(&__thrown, constraints.get_handle(), routeValues.get_handle(), httpContext.get_handle(), route.get_handle(), routeDirection.get_value(), logger.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // RouteConstraintMatcher


// type: Microsoft.AspNetCore.Routing.RouteCreationException
    /**
    
            The exception that is thrown for invalid routes or constraints.
            

    */
open class RouteCreationException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteCreationException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteCreationException.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class with a specified error message.
            

    - Parameter message: The message that describes the error.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteCreationException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.AspNetCore.Routing.RouteCreationException.#ctor(System.String,System.Exception)
    /**
    
            Initializes a new instance of the  class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteCreationException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RouteCreationException


// type: Microsoft.AspNetCore.Routing.RouteEndpoint
    /**
    
            Represents an  that can be used in URL matching or URL generation.
            

    */
public final class RouteEndpoint
    :
    aspnetcore.Microsoft.AspNetCore.Http.Endpoint
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteEndpoint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, System.Int32, Microsoft.AspNetCore.Http.EndpointMetadataCollection, System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpoint.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Routing.Patterns.RoutePattern,System.Int32,Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter requestDelegate: The delegate used to process requests for the endpoint.
    - Parameter routePattern: The  to use in URL matching.
    - Parameter order: The order assigned to the endpoint.
    - Parameter metadata: 
            The  or metadata associated with the endpoint.
            
    - Parameter displayName: The informational display name of the endpoint.
    */
    public init(requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, routePattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, order : Swift.Int32, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Http.EndpointMetadataCollection>, displayName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteEndpoint_ctor_0__5__RequestDelegate_RoutePattern_i32_EndpointMetadataCollection_String(&__thrown, requestDelegate.get_handle(), routePattern.get_handle(), order, metadata?.get_handle() ?? nil, displayName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpoint.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteEndpoint_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Patterns.RoutePattern get_RoutePattern()
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpoint.get_RoutePattern
    public func get_RoutePattern() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteEndpoint_RoutePattern__get_RoutePattern_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    /**
    
            Gets the order value of endpoint.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  associated with the endpoint.
            

    */
    public var RoutePattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        get {
            return try! get_RoutePattern();
        }
    }
} // RouteEndpoint


// type: Microsoft.AspNetCore.Routing.RouteEndpointBuilder
    /**
    
            Supports building a new .
            

    */
public final class RouteEndpointBuilder
    :
    aspnetcore.Microsoft.AspNetCore.Builder.EndpointBuilder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteEndpointBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Routing.Patterns.RoutePattern,System.Int32)
    /**
    
            Constructs a new  instance.
            

    - Parameter requestDelegate: The delegate used to process requests for the endpoint.
    - Parameter routePattern: The  to use in URL matching.
    - Parameter order: The order assigned to the endpoint.
    */
    public init(requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, routePattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, order : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteEndpointBuilder_ctor_0__3__RequestDelegate_RoutePattern_i32(&__thrown, requestDelegate.get_handle(), routePattern.get_handle(), order);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.Endpoint Build()
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.Build
    /**
    */
    public override func Build() throws -> aspnetcore.Microsoft.AspNetCore.Http.Endpoint {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteEndpointBuilder_Endpoint__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Patterns.RoutePattern get_RoutePattern()
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.get_RoutePattern
    public func get_RoutePattern() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteEndpointBuilder_RoutePattern__get_RoutePattern_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RoutePattern(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.set_RoutePattern(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
    public func set_RoutePattern(value : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteEndpointBuilder_void__set_RoutePattern_0__1__RoutePattern(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteEndpointBuilder_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.RouteEndpointBuilder.set_Order(System.Int32)
    public func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteEndpointBuilder_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
             Gets or sets the order assigned to the endpoint.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets the  associated with this endpoint.
            

    */
    public var RoutePattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        get {
            return try! get_RoutePattern();
        }
        set(v) {
            return try! set_RoutePattern(value: v);
        }
    }
} // RouteEndpointBuilder


// type: Microsoft.AspNetCore.Routing.RouteHandler
    /**
    
            Supports implementing a handler that executes for a given route.
            

    */
open class RouteHandler
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteHandler,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate)
// docid: M:Microsoft.AspNetCore.Routing.RouteHandler.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)
    /**
    
            Constructs a new  instance.
            

    - Parameter requestDelegate: The delegate used to process requests.
    */
    public init(requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteHandler_ctor_0__1__RequestDelegate(&__thrown, requestDelegate.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Http.RequestDelegate GetRequestHandler(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.RouteHandler.GetRequestHandler(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)
    /**
    */
    open /* method final */ func GetRequestHandler(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData) throws -> aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteHandler_RequestDelegate__GetRequestHandler_0__2__HttpContext_RouteData(&__thrown, self.get_handle(), httpContext.get_handle(), routeData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.VirtualPathData GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteHandler.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
    /**
    */
    open /* method final */ func GetVirtualPath(context : aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathContext) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteHandler_VirtualPathData__GetVirtualPath_0__1__VirtualPathContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Routing.RouteHandler.RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    */
    open /* method final */ func RouteAsync(context : aspnetcore.Microsoft.AspNetCore.Routing.RouteContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteHandler_Task__RouteAsync_0__1__RouteContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // RouteHandler


// type: Microsoft.AspNetCore.Routing.RouteNameMetadata
    /**
    
            Metadata used during link generation to find the associated endpoint using route name.
            

    */
public final class RouteNameMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteNameMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteNameMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteNameMetadata.#ctor(System.String)
    /**
    
            Creates a new instance of  with the provided route name.
            

    - Parameter routeName: The route name. Can be .
    */
    public init(routeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteNameMetadata_ctor_0__1__String(&__thrown, routeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.RouteNameMetadata.get_RouteName
    public func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteNameMetadata_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the route name. Can be .
            

    */
    public var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
    }
} // RouteNameMetadata


// type: Microsoft.AspNetCore.Routing.RouteOptions
    /**
    
            Represents the configurable options on a route.
            

    */
open class RouteOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_LowercaseUrls()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.get_LowercaseUrls
    open func get_LowercaseUrls() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteOptions_bool__get_LowercaseUrls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_LowercaseUrls(bool)
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.set_LowercaseUrls(System.Boolean)
    open func set_LowercaseUrls(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteOptions_void__set_LowercaseUrls_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_LowercaseQueryStrings()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.get_LowercaseQueryStrings
    open func get_LowercaseQueryStrings() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteOptions_bool__get_LowercaseQueryStrings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_LowercaseQueryStrings(bool)
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.set_LowercaseQueryStrings(System.Boolean)
    open func set_LowercaseQueryStrings(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteOptions_void__set_LowercaseQueryStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AppendTrailingSlash()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.get_AppendTrailingSlash
    open func get_AppendTrailingSlash() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteOptions_bool__get_AppendTrailingSlash_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AppendTrailingSlash(bool)
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.set_AppendTrailingSlash(System.Boolean)
    open func set_AppendTrailingSlash(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteOptions_void__set_AppendTrailingSlash_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressCheckForUnhandledSecurityMetadata()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.get_SuppressCheckForUnhandledSecurityMetadata
    open func get_SuppressCheckForUnhandledSecurityMetadata() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteOptions_bool__get_SuppressCheckForUnhandledSecurityMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressCheckForUnhandledSecurityMetadata(bool)
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.set_SuppressCheckForUnhandledSecurityMetadata(System.Boolean)
    open func set_SuppressCheckForUnhandledSecurityMetadata(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteOptions_void__set_SuppressCheckForUnhandledSecurityMetadata_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Type> get_ConstraintMap()
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.get_ConstraintMap
    open func get_ConstraintMap() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteOptions_System_Collections_Generic_IDictionary_string_System_Type___get_ConstraintMap_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConstraintMap(System.Collections.Generic.IDictionary<System.String,System.Type>)
// docid: M:Microsoft.AspNetCore.Routing.RouteOptions.set_ConstraintMap(System.Collections.Generic.IDictionary{System.String,System.Type})
    open func set_ConstraintMap(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteOptions_void__set_ConstraintMap_0__1__System_Collections_Generic_IDictionary_string_System_Type_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value indicating whether a trailing slash should be appended to the generated URLs.
            

    */
    open var AppendTrailingSlash : Bool {
        get {
            return try! get_AppendTrailingSlash();
        }
        set(v) {
            return try! set_AppendTrailingSlash(value: v);
        }
    }
    /**
    
            Gets or sets a collection of constraints on the current route.
            

    */
    open var ConstraintMap : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Type_> {
        get {
            return try! get_ConstraintMap();
        }
        set(v) {
            return try! set_ConstraintMap(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether a generated query strings are lowercase.
            This property will not be used unless  is also true.
            

    */
    open var LowercaseQueryStrings : Bool {
        get {
            return try! get_LowercaseQueryStrings();
        }
        set(v) {
            return try! set_LowercaseQueryStrings(value: v);
        }
    }
    /**
    
            Gets or sets a value indicating whether all generated paths URLs are lowercase.
            Use  to configure the behavior for query strings.
            

    */
    open var LowercaseUrls : Bool {
        get {
            return try! get_LowercaseUrls();
        }
        set(v) {
            return try! set_LowercaseUrls(value: v);
        }
    }
    /**
    
            Gets or sets a value that indicates if the check for unhandled security endpoint metadata is suppressed.
            
            Endpoints can be associated with metadata such as authorization, or CORS, that needs to be
            handled by a specific middleware to be actionable. If the middleware is not configured, such
            metadata will go unhandled.
            
            
            When , prior to the execution of the endpoint, routing will verify that
            all known security-specific metadata has been handled.
            Setting this property to  suppresses this check.
            
            

    */
    open var SuppressCheckForUnhandledSecurityMetadata : Bool {
        get {
            return try! get_SuppressCheckForUnhandledSecurityMetadata();
        }
        set(v) {
            return try! set_SuppressCheckForUnhandledSecurityMetadata(value: v);
        }
    }
} // RouteOptions


// type: Microsoft.AspNetCore.Routing.RouteValueEqualityComparer
    /**
    
             An  implementation that compares objects as-if
             they were route value strings.
             

    */
open class RouteValueEqualityComparer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteValueEqualityComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Routing.RouteValueEqualityComparer Default
    /**
    
            A default instance of the .
            

    */
    open class var Default : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueEqualityComparer {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.RouteValueEqualityComparer(hndl: Microsoft_AspNetCore_Routing_RouteValueEqualityComparer_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteValueEqualityComparer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.Equals(System.Object,System.Object)
    /**
    */
    open /* method final */ func Equals(x : Optional<dotnet.System.Object>, y : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueEqualityComparer_bool__Equals_0__2__Object_Object(&__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(System.Object)
// docid: M:Microsoft.AspNetCore.Routing.RouteValueEqualityComparer.GetHashCode(System.Object)
    /**
    */
    open /* method final */ func GetHashCode(obj : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValueEqualityComparer_i32__GetHashCode_0__1__Object(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // RouteValueEqualityComparer


// type: Microsoft.AspNetCore.Routing.RouteValuesAddress
    /**
    
            An address of route name and values.
            

    */
open class RouteValuesAddress
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RouteValuesAddress_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RouteValuesAddress_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValuesAddress_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValuesAddress_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_ExplicitValues()
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.get_ExplicitValues
    open func get_ExplicitValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValuesAddress_RouteValueDictionary__get_ExplicitValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ExplicitValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.set_ExplicitValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_ExplicitValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValuesAddress_void__set_ExplicitValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_AmbientValues()
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.get_AmbientValues
    open func get_AmbientValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RouteValuesAddress_RouteValueDictionary__get_AmbientValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_AmbientValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.RouteValuesAddress.set_AmbientValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_AmbientValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RouteValuesAddress_void__set_AmbientValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets ambient route values from the current HTTP request.
            

    */
    open var AmbientValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_AmbientValues();
        }
        set(v) {
            return try! set_AmbientValues(value: v!);
        }
    }
    /**
    
            Gets or sets the route values that are explicitly specified.
            

    */
    open var ExplicitValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_ExplicitValues();
        }
        set(v) {
            return try! set_ExplicitValues(value: v);
        }
    }
    /**
    
            Gets or sets the route name.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
} // RouteValuesAddress


// type: Microsoft.AspNetCore.Routing.RoutingFeature
    /**
    
            A feature for routing functionality.
            

    */
open class RoutingFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRoutingFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_RoutingFeature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.RoutingFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_RoutingFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Routing.RoutingFeature.get_RouteData
    open /* method final */ func get_RouteData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_RoutingFeature_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
// docid: M:Microsoft.AspNetCore.Routing.RoutingFeature.set_RouteData(Microsoft.AspNetCore.Routing.RouteData)
    open /* method final */ func set_RouteData(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_RoutingFeature_void__set_RouteData_0__1__RouteData(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var RouteData : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData> {
        get {
            return try! get_RouteData();
        }
        set(v) {
            return try! set_RouteData(value: v!);
        }
    }
} // RoutingFeature


// type: Microsoft.AspNetCore.Routing.SuppressLinkGenerationMetadata
    /**
    
            Represents metadata used during link generation. If  is true
            the associated endpoint will not be used for link generation.
            

    */
public final class SuppressLinkGenerationMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_ISuppressLinkGenerationMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_SuppressLinkGenerationMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.SuppressLinkGenerationMetadata.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_SuppressLinkGenerationMetadata_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SuppressLinkGeneration()
// docid: M:Microsoft.AspNetCore.Routing.SuppressLinkGenerationMetadata.get_SuppressLinkGeneration
    public func get_SuppressLinkGeneration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_SuppressLinkGenerationMetadata_bool__get_SuppressLinkGeneration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a value indicating whether the assocated endpoint should be used for link generation.
            

    */
    public var SuppressLinkGeneration : Bool {
        get {
            return try! get_SuppressLinkGeneration();
        }
    }
} // SuppressLinkGenerationMetadata


// type: Microsoft.AspNetCore.Routing.SuppressMatchingMetadata
    /**
    
            Metadata used to prevent URL matching. If  is true the
            associated endpoint will not be considered for URL matching.
            

    */
public final class SuppressMatchingMetadata
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_ISuppressMatchingMetadata
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_SuppressMatchingMetadata_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.SuppressMatchingMetadata.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_SuppressMatchingMetadata_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_SuppressMatching()
// docid: M:Microsoft.AspNetCore.Routing.SuppressMatchingMetadata.get_SuppressMatching
    public func get_SuppressMatching() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_SuppressMatchingMetadata_bool__get_SuppressMatching_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a value indicating whether the associated endpoint should be used for URL matching.
            

    */
    public var SuppressMatching : Bool {
        get {
            return try! get_SuppressMatching();
        }
    }
} // SuppressMatchingMetadata


}
// Microsoft.AspNetCore.Routing.Constraints
extension Microsoft.AspNetCore.Routing.Constraints {
// type: Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint
    /**
    
            Constrains a route parameter to contain only lowercase or uppercase letters A through Z in the English alphabet.
            

    */
open class AlphaRouteConstraint
    :
    aspnetcore.Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_AlphaRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint.#ctor
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_AlphaRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AlphaRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint
    /**
    
            Constrains a route parameter to represent only Boolean values.
            

    */
open class BoolRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_BoolRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_BoolRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_BoolRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // BoolRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint
    /**
    
            Constrains a route by several child constraints.
            

    */
open class CompositeRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_CompositeRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.IRouteConstraint>)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.IRouteConstraint})
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter constraints: The child constraints that must match for this constraint to match.
    */
    public init(constraints : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_CompositeRouteConstraint_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_IRouteConstraint_(&__thrown, constraints.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_CompositeRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.IRouteConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint.get_Constraints
    open func get_Constraints() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_CompositeRouteConstraint_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_IRouteConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    
            Gets the child constraints that must match for this constraint to match.
            

    */
    open var Constraints : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint> {
        get {
            return try! get_Constraints();
        }
    }
} // CompositeRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint
    /**
    
            Constrains a route parameter to represent only  values.
            

    */
open class DateTimeRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_DateTimeRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_DateTimeRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_DateTimeRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DateTimeRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint
    /**
    
            Constrains a route parameter to represent only decimal values.
            

    */
open class DecimalRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_DecimalRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_DecimalRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_DecimalRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DecimalRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint
    /**
    
            Constrains a route parameter to represent only 64-bit floating-point values.
            

    */
open class DoubleRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_DoubleRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_DoubleRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_DoubleRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DoubleRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.FileNameRouteConstraint
    /**
    
            Constrains a route parameter to represent only file name values. Does not validate that
            the route value contains valid file system characters, or that the value represents
            an actual file on disk.
            

    */
open class FileNameRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_FileNameRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.FileNameRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_FileNameRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.FileNameRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_FileNameRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // FileNameRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint
    /**
    
            Constrains a route parameter to represent only 32-bit floating-point values.
            

    */
open class FloatRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_FloatRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_FloatRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_FloatRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // FloatRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint
    /**
    
            Constrains a route parameter to represent only  values.
            Matches values specified in any of the five formats "N", "D", "B", "P", or "X",
            supported by Guid.ToString(string) and Guid.ToString(String, IFormatProvider) methods.
            

    */
open class GuidRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_GuidRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_GuidRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_GuidRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // GuidRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.HttpMethodRouteConstraint
    /**
    
            Constrains the HTTP method of request or a route.
            

    */
open class HttpMethodRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_HttpMethodRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String[])
// docid: M:Microsoft.AspNetCore.Routing.Constraints.HttpMethodRouteConstraint.#ctor(System.String[])
    /**
    
            Creates a new instance of  that accepts the HTTP methods specified
            by .
            

    - Parameter allowedMethods: The allowed HTTP methods.
    */
    public init(allowedMethods : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_HttpMethodRouteConstraint_ctor_0__1__StringArray(&__thrown, allowedMethods.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.HttpMethodRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_HttpMethodRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.String> get_AllowedMethods()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.HttpMethodRouteConstraint.get_AllowedMethods
    open func get_AllowedMethods() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_HttpMethodRouteConstraint_System_Collections_Generic_IList_string___get_AllowedMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the HTTP methods allowed by the constraint.
            

    */
    open var AllowedMethods : dotnet.System.Collections.Generic.IList_1<dotnet.System.String> {
        get {
            return try! get_AllowedMethods();
        }
    }
} // HttpMethodRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint
    /**
    
            Constrains a route parameter to represent only 32-bit integer values.
            

    */
open class IntRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_IntRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_IntRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_IntRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IntRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint
    /**
    
            Constrains a route parameter to be a string of a given length or within a given range of lengths.
            

    */
open class LengthRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)
    /**
    
            Initializes a new instance of the  class that constrains
            a route parameter to be a string of a given length.
            

    - Parameter length: The length of the route parameter.
    */
    public init(length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_ctor_0__1__i32(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)
    /**
    
            Initializes a new instance of the  class that constrains
            a route parameter to be a string of a given length.
            

    - Parameter minLength: The minimum length allowed for the route parameter.
    - Parameter maxLength: The maximum length allowed for the route parameter.
    */
    public init(minLength : Swift.Int32, maxLength : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_ctor_0__2__i32_i32(&__thrown, minLength, maxLength);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MinLength()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.get_MinLength
    open func get_MinLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_i32__get_MinLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxLength()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint.get_MaxLength
    open func get_MaxLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_LengthRouteConstraint_i32__get_MaxLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the maximum length allowed for the route parameter.
            

    */
    open var MaxLength : Swift.Int32 {
        get {
            return try! get_MaxLength();
        }
    }
    /**
    
            Gets the minimum length allowed for the route parameter.
            

    */
    open var MinLength : Swift.Int32 {
        get {
            return try! get_MinLength();
        }
    }
} // LengthRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint
    /**
    
            Constrains a route parameter to represent only 64-bit integer values.
            

    */
open class LongRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_LongRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_LongRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_LongRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // LongRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint
    /**
    
            Constrains a route parameter to be a string with a maximum length.
            

    */
open class MaxLengthRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_MaxLengthRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter maxLength: The maximum length allowed for the route parameter.
    */
    public init(maxLength : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_MaxLengthRouteConstraint_ctor_0__1__i32(&__thrown, maxLength);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MaxLengthRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxLength()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint.get_MaxLength
    open func get_MaxLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MaxLengthRouteConstraint_i32__get_MaxLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the maximum length allowed for the route parameter.
            

    */
    open var MaxLength : Swift.Int32 {
        get {
            return try! get_MaxLength();
        }
    }
} // MaxLengthRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint
    /**
    
            Constrains a route parameter to be an integer with a maximum value.
            

    */
open class MaxRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_MaxRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter max: The maximum value allowed for the route parameter.
    */
    public init(max : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_MaxRouteConstraint_ctor_0__1__i64(&__thrown, max);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MaxRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Max()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint.get_Max
    open func get_Max() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MaxRouteConstraint_i64__get_Max_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the maximum allowed value of the route parameter.
            

    */
    open var Max : Swift.Int64 {
        get {
            return try! get_Max();
        }
    }
} // MaxRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint
    /**
    
            Constrains a route parameter to be a string with a minimum length.
            

    */
open class MinLengthRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_MinLengthRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter minLength: The minimum length allowed for the route parameter.
    */
    public init(minLength : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_MinLengthRouteConstraint_ctor_0__1__i32(&__thrown, minLength);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MinLengthRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MinLength()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint.get_MinLength
    open func get_MinLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MinLengthRouteConstraint_i32__get_MinLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the minimum length allowed for the route parameter.
            

    */
    open var MinLength : Swift.Int32 {
        get {
            return try! get_MinLength();
        }
    }
} // MinLengthRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint
    /**
    
            Constrains a route parameter to be a long with a minimum value.
            

    */
open class MinRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_MinRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter min: The minimum value allowed for the route parameter.
    */
    public init(min : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_MinRouteConstraint_ctor_0__1__i64(&__thrown, min);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MinRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Min()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint.get_Min
    open func get_Min() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_MinRouteConstraint_i64__get_Min_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the minimum allowed value of the route parameter.
            

    */
    open var Min : Swift.Int64 {
        get {
            return try! get_Min();
        }
    }
} // MinRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.NonFileNameRouteConstraint
    /**
    
            Constrains a route parameter to represent only non-file-name values. Does not validate that
            the route value contains valid file system characters, or that the value represents
            an actual file on disk.
            

    */
open class NonFileNameRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_NonFileNameRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.NonFileNameRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_NonFileNameRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.NonFileNameRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_NonFileNameRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // NonFileNameRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint
    /**
    
            Defines a constraint on an optional parameter. If the parameter is present, then it is constrained by InnerConstraint.
            

    */
open class OptionalRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_OptionalRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.IRouteConstraint)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.#ctor(Microsoft.AspNetCore.Routing.IRouteConstraint)
    /**
    
            Creates a new  instance given the .
            

    - Parameter innerConstraint: 
    */
    public init(innerConstraint : aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_OptionalRouteConstraint_ctor_0__1__IRouteConstraint(&__thrown, innerConstraint.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_OptionalRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouteConstraint get_InnerConstraint()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint.get_InnerConstraint
    open func get_InnerConstraint() throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_OptionalRouteConstraint_IRouteConstraint__get_InnerConstraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint(hndl : __return);
        }
    }
    /**
    
            Gets the  associated with the optional parameter.
            

    */
    open var InnerConstraint : aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint {
        get {
            return try! get_InnerConstraint();
        }
    }
} // OptionalRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint
    /**
    
            Constraints a route parameter to be an integer within a given range of values.
            

    */
open class RangeRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_RangeRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int64, System.Int64)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter min: The minimum value.
    - Parameter max: The maximum value.
    */
    public init(min : Swift.Int64, max : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_RangeRouteConstraint_ctor_0__2__i64_i64(&__thrown, min, max);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RangeRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Min()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.get_Min
    open func get_Min() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RangeRouteConstraint_i64__get_Min_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_Max()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint.get_Max
    open func get_Max() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RangeRouteConstraint_i64__get_Max_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the maximum allowed value of the route parameter.
            

    */
    open var Max : Swift.Int64 {
        get {
            return try! get_Max();
        }
    }
    /**
    
            Gets the minimum allowed value of the route parameter.
            

    */
    open var Min : Swift.Int64 {
        get {
            return try! get_Min();
        }
    }
} // RangeRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint
    /**
    
            Represents a regex constraint which can be used as an inlineConstraint.
            

    */
open class RegexInlineRouteConstraint
    :
    aspnetcore.Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_RegexInlineRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter regexPattern: The regular expression pattern to match.
    */
    public override init(regexPattern : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_RegexInlineRouteConstraint_ctor_0__1__String(&__thrown, regexPattern.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RegexInlineRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint
    /**
    
            Constrains a route parameter to match a regular expression.
            

    */
open class RegexRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_RegexRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Text.RegularExpressions.Regex)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.#ctor(System.Text.RegularExpressions.Regex)
    /**
    
            Constructor for a  given a .
            

    - Parameter regex: A  instance to use as a constraint.
    */
    public init(regex : dotnet.System.Text.RegularExpressions.Regex) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_RegexRouteConstraint_ctor_0__1__Regex(&__thrown, regex.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)
    /**
    
            Constructor for a  given a .
            

    - Parameter regexPattern: A string containing the regex pattern.
    */
    public init(regexPattern : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_RegexRouteConstraint_ctor_0__1__String(&__thrown, regexPattern.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RegexRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Text.RegularExpressions.Regex get_Constraint()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint.get_Constraint
    open func get_Constraint() throws -> dotnet.System.Text.RegularExpressions.Regex {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RegexRouteConstraint_Regex__get_Constraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.RegularExpressions.Regex(hndl : __return);
        }
    }
    /**
    
            Gets the regular expression used in the route constraint.
            

    */
    open var Constraint : dotnet.System.Text.RegularExpressions.Regex {
        get {
            return try! get_Constraint();
        }
    }
} // RegexRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.RequiredRouteConstraint
    /**
    
            Constraints a route parameter that must have a value.
            

    */
open class RequiredRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_RequiredRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RequiredRouteConstraint.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_RequiredRouteConstraint_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.RequiredRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_RequiredRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // RequiredRouteConstraint


// type: Microsoft.AspNetCore.Routing.Constraints.StringRouteConstraint
    /**
    
            Constrains a route parameter to contain only a specified string.
            

    */
open class StringRouteConstraint
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouteConstraint,
    Microsoft_AspNetCore_Routing_IParameterPolicy,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Constraints_StringRouteConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.StringRouteConstraint.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter value: The constraint value to match.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Constraints_StringRouteConstraint_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Match(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
// docid: M:Microsoft.AspNetCore.Routing.Constraints.StringRouteConstraint.Match(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
    /**
    */
    open /* method final */ func Match(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, route : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeKey : dotnet.System.String, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, routeDirection : aspnetcore.Microsoft.AspNetCore.Routing.RouteDirection) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Constraints_StringRouteConstraint_bool__Match_0__5__HttpContext_IRouter_String_RouteValueDictionary_RouteDirection(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, route?.get_handle() ?? nil, routeKey.get_handle(), values.get_handle(), routeDirection.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // StringRouteConstraint


}

// Microsoft.AspNetCore.Routing.Internal
extension Microsoft.AspNetCore.Routing.Internal {
// type: Microsoft.AspNetCore.Routing.Internal.DfaGraphWriter
    /**
    
            
            A singleton service that can be used to write the route table as a state machine
            in GraphViz DOT language https://www.graphviz.org/doc/info/lang.html
            
            
            You can use http://www.webgraphviz.com/ to visualize the results.
            
            
            This type has no support contract, and may be removed or changed at any time in
            a future release.
            
            

    */
open class DfaGraphWriter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Internal_DfaGraphWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Routing.Internal.DfaGraphWriter.#ctor(System.IServiceProvider)
    /**
    
            Constructor for a  given .
            

    - Parameter services: The  to add services to.
    */
    public init(services : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Internal_DfaGraphWriter_ctor_0__1__IServiceProvider(&__thrown, services.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Write(Microsoft.AspNetCore.Routing.EndpointDataSource, System.IO.TextWriter)
// docid: M:Microsoft.AspNetCore.Routing.Internal.DfaGraphWriter.Write(Microsoft.AspNetCore.Routing.EndpointDataSource,System.IO.TextWriter)
    /**
    
            Displays a graph representation of  in DOT.
            

    - Parameter dataSource: The  to extract routes from.
    - Parameter writer: The  to which the content is written.
    */
    open func Write(dataSource : aspnetcore.Microsoft.AspNetCore.Routing.EndpointDataSource, writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Internal_DfaGraphWriter_void__Write_0__2__EndpointDataSource_TextWriter(&__thrown, self.get_handle(), dataSource.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DfaGraphWriter


}

// Microsoft.AspNetCore.Routing.Matching
extension Microsoft.AspNetCore.Routing.Matching {
// type: Microsoft.AspNetCore.Routing.Matching.CandidateSet
    /**
    
            Represents a set of  candidates that have been matched
            by the routing system. Used by implementations of 
            and .
            

    */
public final class CandidateSet
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_CandidateSet_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.Endpoint[], Microsoft.AspNetCore.Routing.RouteValueDictionary[], System.Int32[])
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.#ctor(Microsoft.AspNetCore.Http.Endpoint[],Microsoft.AspNetCore.Routing.RouteValueDictionary[],System.Int32[])
    /**
    
            
            Initializes a new instances of the  class with the provided ,
            , and .
            
            
            The constructor is provided to enable unit tests of implementations of 
            and .
            
            

    - Parameter endpoints: The list of endpoints, sorted in descending priority order.
    - Parameter values: The list of  instances.
    - Parameter scores: The list of endpoint scores. .
    */
    public init(endpoints : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>, values : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, scores : dotnet.System_Arr<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Matching_CandidateSet_ctor_0__3__EndpointArray_RouteValueDictionaryArray_i32Array(&__thrown, endpoints.get_handle(), values.get_handle(), scores.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsValidCandidate(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.IsValidCandidate(System.Int32)
    /**
    
            Gets a value which indicates where the  is considered
            a valid candidate for the current request.
            

    - Parameter index: The candidate index.
    - Returns: 
            true if the candidate at position  is considered valid
            for the current request, otherwise false.
            

    */
    public func IsValidCandidate(index : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_CandidateSet_bool__IsValidCandidate_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetValidity(System.Int32, bool)
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.SetValidity(System.Int32,System.Boolean)
    /**
    
            Sets the validity of the candidate at the provided index.
            

    - Parameter index: The candidate index.
    - Parameter value: 
            The value to set. If true the candidate is considered valid for the current request.
            
    */
    public func SetValidity(index : Swift.Int32, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Matching_CandidateSet_void__SetValidity_0__2__i32_bool(&__thrown, self.get_handle(), index, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceEndpoint(System.Int32, Microsoft.AspNetCore.Http.Endpoint, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.ReplaceEndpoint(System.Int32,Microsoft.AspNetCore.Http.Endpoint,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Replaces the  at the provided  with the
            provided .
            

    - Parameter index: The candidate index.
    - Parameter endpoint: 
            The  to replace the original  at
            the . If  is null. the candidate will be marked
            as invalid.
            
    - Parameter values: 
            The  to replace the original  at
            the .
            
    */
    public func ReplaceEndpoint(index : Swift.Int32, endpoint : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>, values : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Matching_CandidateSet_void__ReplaceEndpoint_0__3__i32_Endpoint_RouteValueDictionary(&__thrown, self.get_handle(), index, endpoint?.get_handle() ?? nil, values?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ExpandEndpoint(System.Int32, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>, System.Collections.Generic.IComparer<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.ExpandEndpoint(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint},System.Collections.Generic.IComparer{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Replaces the  at the provided  with the
            provided .
            

    - Parameter index: The candidate index.
    - Parameter endpoints: 
            The list of endpoints  to replace the original  at
            the . If  is empty, the candidate will be marked
            as invalid.
            
    - Parameter comparer: 
            The endpoint comparer used to order the endpoints. Can be retrieved from the service provider as
            type .
            
    */
    public func ExpandEndpoint(index : Swift.Int32, endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>, comparer : dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Matching_CandidateSet_void__ExpandEndpoint_0__3__i32_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint__System_Collections_Generic_IComparer_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), index, endpoints.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_CandidateSet_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the count of candidates in the set.
            

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // CandidateSet


// type: Microsoft.AspNetCore.Routing.Matching.CandidateState
// boxed value type
    /**
    
            The state associated with a candidate in a .
            

    */
public final class CandidateState
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_CandidateState_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the .
            

    */
    public var Endpoint : aspnetcore.Microsoft.AspNetCore.Http.Endpoint {
        get {
            return try! get_Endpoint();
        }
    }
    /**
    
            Gets the score of the  within the current
            .
            

    */
    public var Score : Swift.Int32 {
        get {
            return try! get_Score();
        }
    }
    /**
    
            Gets  associated with the
             and the current request.
            

    */
    public var Values : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_Values();
        }
        set(v) {
            return try! set_Values(value: v!);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Routing_Matching_CandidateState_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.Endpoint get_Endpoint()
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateState.get_Endpoint
    public func get_Endpoint() throws -> aspnetcore.Microsoft.AspNetCore.Http.Endpoint {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_CandidateState_Endpoint__get_Endpoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Endpoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Score()
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateState.get_Score
    public func get_Score() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_CandidateState_i32__get_Score_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Values()
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateState.get_Values
    public func get_Values() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_CandidateState_RouteValueDictionary__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Values(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Matching.CandidateState.set_Values(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    public func set_Values(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Matching_CandidateState_void__set_Values_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CandidateState


// type: Microsoft.AspNetCore.Routing.Matching.EndpointMetadataComparer
    /**
    
            A comparer that can order  instances based on implementations of
            . The implementation can be retrieved from the service
            provider and provided to .
            

    */
public final class EndpointMetadataComparer
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_EndpointMetadataComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EndpointMetadataComparer


// type: Microsoft.AspNetCore.Routing.Matching.EndpointMetadataComparer`1
    /**
    
            A base class for  implementations that use
            a specific type of metadata from  for comparison.
            Useful for implementing .
            

    */
open class EndpointMetadataComparer_1<TMetadata : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_EndpointMetadataComparer_1_get_type_handle(TMetadata.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Compare(Microsoft.AspNetCore.Http.Endpoint, Microsoft.AspNetCore.Http.Endpoint)
// docid: M:Microsoft.AspNetCore.Routing.Matching.EndpointMetadataComparer`1.Compare(Microsoft.AspNetCore.Http.Endpoint,Microsoft.AspNetCore.Http.Endpoint)
    /**
    
            Compares two objects and returns a value indicating whether one is less than, equal to,
            or greater than the other.
            

    - Parameter x: The first object to compare.
    - Parameter y: The second object to compare.
    - Returns: 
            An implementation of this method must return a value less than zero if
            x is less than y, zero if x is equal to y, or a value greater than zero if x is
            greater than y.
            

    */
    open /* method final */ func Compare(x : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>, y : Optional<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_EndpointMetadataComparer_1_i32__Compare_0__2__Endpoint_Endpoint(TMetadata.get_type_handle(), &__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // EndpointMetadataComparer_1


// type: Microsoft.AspNetCore.Routing.Matching.EndpointSelector
    /**
    
            A service that is responsible for the final  selection
            decision. To use a custom  register an implementation
            of  in the dependency injection container as a singleton.
            

    */
open class EndpointSelector
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_EndpointSelector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Threading.Tasks.Task SelectAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet)
// docid: M:Microsoft.AspNetCore.Routing.Matching.EndpointSelector.SelectAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)
    /**
    
            Asynchronously selects an  from the .
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter candidates: The .
    - Returns: A  that completes asynchronously once endpoint selection is complete.

    */
    open func SelectAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, candidates : aspnetcore.Microsoft.AspNetCore.Routing.Matching.CandidateSet) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_EndpointSelector_Task__SelectAsync_0__2__HttpContext_CandidateSet(&__thrown, self.get_handle(), httpContext.get_handle(), candidates.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // EndpointSelector


// type: Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy
    /**
    
            A  that implements filtering and selection by
            the host header of a request.
            

    */
public final class HostMatcherPolicy
    :
    aspnetcore.Microsoft.AspNetCore.Routing.MatcherPolicy,
    Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy,
    Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy,
    Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ApplyAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)
    /**
    */
    public func ApplyAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, candidates : aspnetcore.Microsoft.AspNetCore.Routing.Matching.CandidateSet) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_Task__ApplyAsync_0__2__HttpContext_CandidateSet(&__thrown, self.get_handle(), httpContext.get_handle(), candidates.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> GetEdges(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.GetEdges(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    */
    public func GetEdges(endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge___GetEdges_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable BuildJumpTable(System.Int32, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.BuildJumpTable(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge})
    /**
    */
    public func BuildJumpTable(exitDestination : Swift.Int32, edges : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_PolicyJumpTable__BuildJumpTable_0__2__i32_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_(&__thrown, self.get_handle(), exitDestination, edges.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.get_Order
    public override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<Microsoft.AspNetCore.Http.Endpoint> get_Comparer()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.get_Comparer
    public func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HostMatcherPolicy_System_Collections_Generic_IComparer_Microsoft_AspNetCore_Http_Endpoint___get_Comparer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    /**
    */
    public var Comparer : dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    */
    public override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // HostMatcherPolicy


// type: Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy
    /**
    
            An  that implements filtering and selection by
            the HTTP method of a request.
            

    */
public final class HttpMethodMatcherPolicy
    :
    aspnetcore.Microsoft.AspNetCore.Routing.MatcherPolicy,
    Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy,
    Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy,
    Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ApplyAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)
    /**
    
            For framework use only.
            

    - Parameter httpContext: 
    - Parameter candidates: 
    - Returns: 

    */
    public func ApplyAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, candidates : aspnetcore.Microsoft.AspNetCore.Routing.Matching.CandidateSet) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_Task__ApplyAsync_0__2__HttpContext_CandidateSet(&__thrown, self.get_handle(), httpContext.get_handle(), candidates.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> GetEdges(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.GetEdges(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            For framework use only.
            

    - Parameter endpoints: 
    - Returns: 

    */
    public func GetEdges(endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge___GetEdges_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable BuildJumpTable(System.Int32, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.BuildJumpTable(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge})
    /**
    
            For framework use only.
            

    - Parameter exitDestination: 
    - Parameter edges: 
    - Returns: 

    */
    public func BuildJumpTable(exitDestination : Swift.Int32, edges : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_PolicyJumpTable__BuildJumpTable_0__2__i32_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_(&__thrown, self.get_handle(), exitDestination, edges.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IComparer<Microsoft.AspNetCore.Http.Endpoint> get_Comparer()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.get_Comparer
    public func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_System_Collections_Generic_IComparer_Microsoft_AspNetCore_Http_Endpoint___get_Comparer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy.get_Order
    public override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_HttpMethodMatcherPolicy_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            For framework use only.
            

    */
    public var Comparer : dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Comparer();
        }
    }
    /**
    
            For framework use only.
            

    */
    public override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // HttpMethodMatcherPolicy


// type: Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy
    /**
    
            A  interface that can be implemented to sort
            endpoints. Implementations of  must
            inherit from  and should be registered in
            the dependency injection container as singleton services of type .
            

    */
open class IEndpointComparerPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IComparer<Microsoft.AspNetCore.Http.Endpoint> get_Comparer()
// docid: M:Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IComparer_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy_System_Collections_Generic_IComparer_Microsoft_AspNetCore_Http_Endpoint___get_Comparer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IComparer_1(hndl : __return);
        }
    }
} // IEndpointComparerPolicy


// type: Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy
    /**
    
            A  interface that can implemented to filter endpoints
            in a . Implementations of  must
            inherit from  and should be registered in
            the dependency injection container as singleton services of type .
            

    */
open class IEndpointSelectorPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool AppliesToEndpoints(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Returns a value that indicates whether the  applies
            to any endpoint in .
            

    - Parameter endpoints: The set of candidate  values.
    - Returns: 
            true if the policy applies to any endpoint in , otherwise false.
            

    */
    open func AppliesToEndpoints(endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy_bool__AppliesToEndpoints_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task ApplyAsync(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet)
// docid: M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)
    /**
    
            Applies the policy to the .
            

    - Parameter httpContext: 
            The  associated with the current request.
            
    - Parameter candidates: The .
    */
    open func ApplyAsync(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, candidates : aspnetcore.Microsoft.AspNetCore.Routing.Matching.CandidateSet) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy_Task__ApplyAsync_0__2__HttpContext_CandidateSet(&__thrown, self.get_handle(), httpContext.get_handle(), candidates.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IEndpointSelectorPolicy


// type: Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy
    /**
    
            Implements an interface for a matcher policy with support for generating graph representations of the endpoints.
            

    */
open class INodeBuilderPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool AppliesToEndpoints(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Evaluates if the policy matches any of the endpoints provided in .
            

    - Parameter endpoints: A list of .
    - Returns:  if the policy applies to any of the provided .

    */
    open func AppliesToEndpoints(endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy_bool__AppliesToEndpoints_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> GetEdges(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.GetEdges(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Generates a graph that representations the relationship between endpoints and hosts.
            

    - Parameter endpoints: A list of .
    - Returns: A graph representing the relationship between endpoints and hosts.

    */
    open func GetEdges(endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge___GetEdges_0__1__System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, self.get_handle(), endpoints.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable BuildJumpTable(System.Int32, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.BuildJumpTable(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge})
    /**
    
            Constructs a jump table given the a set of .
            

    - Parameter exitDestination: The default destination for lookups.
    - Parameter edges: A list of .
    - Returns: A  instance.

    */
    open func BuildJumpTable(exitDestination : Swift.Int32, edges : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy_PolicyJumpTable__BuildJumpTable_0__2__i32_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_(&__thrown, self.get_handle(), exitDestination, edges.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable(hndl : __return);
        }
    }
} // INodeBuilderPolicy


// type: Microsoft.AspNetCore.Routing.Matching.IParameterLiteralNodeMatchingPolicy
    /**
    
            Defines the contract that a class must implement in order to check if a literal value is valid for a given constraint.
            
            When a parameter implements this interface, the router is able to optimize away some paths from the route table that don't match this constraint.
            
            

    */
open class IParameterLiteralNodeMatchingPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy,
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool MatchesLiteral(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Routing.Matching.IParameterLiteralNodeMatchingPolicy.MatchesLiteral(System.String,System.String)
    /**
    
            Determines whether the given  can match the constraint.
            

    - Parameter parameterName: The parameter name we are currently evaluating.
    - Parameter literal: The literal to test the constraint against.
    - Returns: true if the literal contains a valid value; otherwise, false.

    */
    open func MatchesLiteral(parameterName : dotnet.System.String, literal : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy_bool__MatchesLiteral_0__2__String_String(&__thrown, self.get_handle(), parameterName.get_handle(), literal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IParameterLiteralNodeMatchingPolicy


// type: Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable
    /**
    
            Supports retrieving endpoints that fulfill a certain matcher policy.
            

    */
open class PolicyJumpTable
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_PolicyJumpTable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 GetDestination(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable.GetDestination(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Returns the destination for a given  in the current jump table.
            

    - Parameter httpContext: The  associated with the current request.
    */
    open func GetDestination(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_PolicyJumpTable_i32__GetDestination_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // PolicyJumpTable


// type: Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge
// boxed value type
    /**
    
            Represents an entry in a .
            

    */
public final class PolicyJumpTableEdge
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the destination of the current entry.
            

    */
    public var Destination : Swift.Int32 {
        get {
            return try! get_Destination();
        }
    }
    /**
    
            Gets the object used to represent the match heuristic. Can be a host, HTTP method, etc.
            depending on the matcher policy.
            

    */
    public var State : dotnet.System.Object {
        get {
            return try! get_State();
        }
    }
    // .ctor(System.Object, System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge.#ctor(System.Object,System.Int32)
    /**
    
            Constructs a new  instance.
            

    - Parameter state: Represents the match heuristic of the policy.
    - Parameter destination: 
    */
    public init(state : dotnet.System.Object, destination : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_ctor_0__2__Object_i32(&__thrown, state.get_handle(), destination);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Object get_State()
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge.get_State
    public func get_State() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_Object__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Destination()
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge.get_Destination
    public func get_Destination() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_PolicyJumpTableEdge_i32__get_Destination_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // PolicyJumpTableEdge


// type: Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge
// boxed value type
    /**
    
            Represents an edge in a matcher policy graph.
            

    */
public final class PolicyNodeEdge
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the endpoints that match the policy defined by .
            

    */
    public var Endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        get {
            return try! get_Endpoints();
        }
    }
    /**
    
            Gets the object used to represent the match heuristic. Can be a host, HTTP method, etc.
            depending on the matcher policy.
            

    */
    public var State : dotnet.System.Object {
        get {
            return try! get_State();
        }
    }
    // .ctor(System.Object, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint>)
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge.#ctor(System.Object,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})
    /**
    
            Constructs a new  instance.
            

    - Parameter state: Represents the match heuristic of the policy.
    - Parameter endpoints: Represents the endpoints that match the policy
    */
    public init(state : dotnet.System.Object, endpoints : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge_ctor_0__2__Object_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint_(&__thrown, state.get_handle(), endpoints.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint> get_Endpoints()
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge.get_Endpoints
    public func get_Endpoints() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.Endpoint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_Endpoint___get_Endpoints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_State()
// docid: M:Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge.get_State
    public func get_State() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Matching_PolicyNodeEdge_Object__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // PolicyNodeEdge


}

// Microsoft.AspNetCore.Routing.Patterns
extension Microsoft.AspNetCore.Routing.Patterns {
// type: Microsoft.AspNetCore.Routing.Patterns.RoutePattern
    /**
    
            Represents a parsed route template with default values and constraints.
            Use  to create 
            instances. Instances of  are immutable.
            

    */
public final class RoutePattern
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePattern_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Object RequiredValueAny
    /**
    
            A marker object that can be used in  to designate that
            any non-null or non-empty value is required.
            

    */
    public class var RequiredValueAny : dotnet.System.Object {
        get {
        let __return = dotnet.System.Object(hndl: Microsoft_AspNetCore_Routing_Patterns_RoutePattern_get_RequiredValueAny());
            return __return;
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart GetParameter(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.GetParameter(System.String)
    /**
    
            Gets the parameter matching the given name.
            

    - Parameter name: The name of the parameter to match.
    - Returns: The matching parameter or null if no parameter matches the given name.

    */
    public func GetParameter(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_RoutePatternParameterPart__GetParameter_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_Defaults()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_Defaults
    public func get_Defaults() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_System_Collections_Generic_IReadOnlyDictionary_string_object___get_Defaults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>> get_ParameterPolicies()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_ParameterPolicies
    public func get_ParameterPolicies() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_System_Collections_Generic_IReadOnlyDictionary_string_System_Collections_Generic_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference____get_ParameterPolicies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object> get_RequiredValues()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_RequiredValues
    public func get_RequiredValues() throws -> dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_System_Collections_Generic_IReadOnlyDictionary_string_object___get_RequiredValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal get_InboundPrecedence()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_InboundPrecedence
    public func get_InboundPrecedence() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_Decimal__get_InboundPrecedence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal get_OutboundPrecedence()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_OutboundPrecedence
    public func get_OutboundPrecedence() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_Decimal__get_OutboundPrecedence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RawText()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_RawText
    public func get_RawText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_String__get_RawText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart> get_Parameters()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_Parameters
    public func get_Parameters() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment> get_PathSegments()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePattern.get_PathSegments
    public func get_PathSegments() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePattern_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment___get_PathSegments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Gets the set of default values for the route pattern.
            The keys of  are the route parameter names.
            

    */
    public var Defaults : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Defaults();
        }
    }
    /**
    
            Gets the precedence value of the route pattern for URL matching.
            

    */
    public var InboundPrecedence : dotnet.System.Decimal {
        get {
            return try! get_InboundPrecedence();
        }
    }
    /**
    
            Gets the precedence value of the route pattern for URL generation.
            

    */
    public var OutboundPrecedence : dotnet.System.Decimal {
        get {
            return try! get_OutboundPrecedence();
        }
    }
    /**
    
            Gets the set of parameter policy references for the route pattern.
            The keys of  are the route parameter names.
            

    */
    public var ParameterPolicies : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>> {
        get {
            return try! get_ParameterPolicies();
        }
    }
    /**
    
            Gets the list of route parameters.
            

    */
    public var Parameters : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets the list of path segments.
            

    */
    public var PathSegments : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment> {
        get {
            return try! get_PathSegments();
        }
    }
    /**
    
            Gets the raw text supplied when parsing the route pattern. May be null.
            

    */
    public var RawText : Optional<dotnet.System.String> {
        get {
            return try! get_RawText();
        }
    }
    /**
    
             Gets a collection of route values that must be provided for this route pattern to be considered
             applicable.
             

    */
    public var RequiredValues : dotnet.System.Collections.Generic.IReadOnlyDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_RequiredValues();
        }
    }
} // RoutePattern


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternException
    /**
    
            An exception that is thrown for error constructing a .
            

    */
public final class RoutePatternException
    :
    dotnet.System.Exception
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.#ctor(System.String,System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter pattern: The route pattern as raw text.
    - Parameter message: The exception message.
    */
    public init(pattern : dotnet.System.String, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Patterns_RoutePatternException_ctor_0__2__String_String(&__thrown, pattern.get_handle(), message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    
            Populates a  with the data needed to serialize the target object.
            

    - Parameter info: The  to populate with data.
    - Parameter context: The destination () for this serialization.
    */
    public override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Patterns_RoutePatternException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Pattern()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternException.get_Pattern
    public func get_Pattern() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternException_String__get_Pattern_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the route pattern associated with this exception.
            

    */
    public var Pattern : dotnet.System.String {
        get {
            return try! get_Pattern();
        }
    }
} // RoutePatternException


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory
public struct RoutePatternFactory {
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Parse(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Parse(System.String)
    /**
    
            Creates a  from its string representation.
            

    - Parameter pattern: The route pattern string to parse.
    - Returns: The .

    */
    public static func Parse(pattern : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Parse_0__1__String(&__thrown, pattern.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Parse(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Parse(System.String,System.Object,System.Object)
    /**
    
            Creates a  from its string representation along
            with provided default values and parameter policies.
            

    - Parameter pattern: The route pattern string to parse.
    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the parsed route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the parsed route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Returns: The .

    */
    public static func Parse(pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Parse_0__3__String_Object_Object(&__thrown, pattern.get_handle(), defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Parse(System.String, System.Object, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Parse(System.String,System.Object,System.Object,System.Object)
    /**
    
            Creates a  from its string representation along
            with provided default values and parameter policies.
            

    - Parameter pattern: The route pattern string to parse.
    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the parsed route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the parsed route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Parameter requiredValues: 
            Route values that can be substituted for parameters in the route pattern. See remarks on .
            
    - Returns: The .

    */
    public static func Parse(pattern : dotnet.System.String, defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>, requiredValues : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Parse_0__4__String_Object_Object_Object(&__thrown, pattern.get_handle(), defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil, requiredValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment})
    /**
    
            Creates a new instance of  from a collection of segments.
            

    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(segments : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_(&__thrown, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment})
    /**
    
            Creates a new instance of  from a collection of segments.
            

    - Parameter rawText: The raw text to associate with the route pattern. May be null.
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(rawText : Optional<dotnet.System.String>, segments : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__2__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_(&__thrown, rawText?.get_handle() ?? nil, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.Object, System.Object, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.Object,System.Object,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment})
    /**
    
            Creates a  from a collection of segments along
            with provided default values and parameter policies.
            

    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>, segments : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__3__Object_Object_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_(&__thrown, defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.String, System.Object, System.Object, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment})
    /**
    
            Creates a  from a collection of segments along
            with provided default values and parameter policies.
            

    - Parameter rawText: The raw text to associate with the route pattern. May be null.
    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(rawText : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>, segments : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__4__String_Object_Object_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_(&__thrown, rawText?.get_handle() ?? nil, defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
    /**
    
            Creates a new instance of  from a collection of segments.
            

    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(segments : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__1__RoutePatternPathSegmentArray(&__thrown, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.String, Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.String,Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
    /**
    
            Creates a new instance of  from a collection of segments.
            

    - Parameter rawText: The raw text to associate with the route pattern. May be null.
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(rawText : dotnet.System.String, segments : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__2__String_RoutePatternPathSegmentArray(&__thrown, rawText.get_handle(), segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.Object, System.Object, Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.Object,System.Object,Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
    /**
    
            Creates a  from a collection of segments along
            with provided default values and parameter policies.
            

    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>, segments : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__3__Object_Object_RoutePatternPathSegmentArray(&__thrown, defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern Pattern(System.String, System.Object, System.Object, Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Pattern(System.String,System.Object,System.Object,Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment[])
    /**
    
            Creates a  from a collection of segments along
            with provided default values and parameter policies.
            

    - Parameter rawText: The raw text to associate with the route pattern.
    - Parameter defaults: 
            Additional default values to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            
    - Parameter parameterPolicies: 
            Additional parameter policies to associated with the route pattern. May be null.
            The provided object will be converted to key-value pairs using 
            and then merged into the route pattern.
            Multiple policies can be specified for a key by providing a collection as the value.
            
    - Parameter segments: The collection of segments.
    - Returns: The .

    */
    public static func Pattern(rawText : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, parameterPolicies : Optional<dotnet.System.Object>, segments : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePattern__Pattern_0__4__String_Object_Object_RoutePatternPathSegmentArray(&__thrown, rawText?.get_handle() ?? nil, defaults?.get_handle() ?? nil, parameterPolicies?.get_handle() ?? nil, segments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment Segment(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Segment(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart})
    /**
    
            Creates a  from the provided collection
            of parts.
            

    - Parameter parts: The collection of parts.
    - Returns: The .

    */
    public static func Segment(parts : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternPathSegment__Segment_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_(&__thrown, parts.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment Segment(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Segment(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart[])
    /**
    
            Creates a  from the provided collection
            of parts.
            

    - Parameter parts: The collection of parts.
    - Returns: The .

    */
    public static func Segment(parts : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternPathSegment__Segment_0__1__RoutePatternPartArray(&__thrown, parts.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart LiteralPart(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.LiteralPart(System.String)
    /**
    
            Creates a  from the provided text
            content.
            

    - Parameter content: The text content.
    - Returns: The .

    */
    public static func LiteralPart(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternLiteralPart__LiteralPart_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart SeparatorPart(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.SeparatorPart(System.String)
    /**
    
            Creates a  from the provided text
            content.
            

    - Parameter content: The text content.
    - Returns: The .

    */
    public static func SeparatorPart(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternSeparatorPart__SeparatorPart_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart ParameterPart(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPart(System.String)
    /**
    
            Creates a  from the provided parameter name.
            

    - Parameter parameterName: The parameter name.
    - Returns: The .

    */
    public static func ParameterPart(parameterName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPart__ParameterPart_0__1__String(&__thrown, parameterName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart ParameterPart(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPart(System.String,System.Object)
    /**
    
            Creates a  from the provided parameter name
            and default value.
            

    - Parameter parameterName: The parameter name.
    - Parameter default: The parameter default value. May be null.
    - Returns: The .

    */
    public static func ParameterPart(parameterName : dotnet.System.String, default_ : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPart__ParameterPart_0__2__String_Object(&__thrown, parameterName.get_handle(), default_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart ParameterPart(System.String, System.Object, Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPart(System.String,System.Object,Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind)
    /**
    
            Creates a  from the provided parameter name
            and default value, and parameter kind.
            

    - Parameter parameterName: The parameter name.
    - Parameter default: The parameter default value. May be null.
    - Parameter parameterKind: The parameter kind.
    - Returns: The .

    */
    public static func ParameterPart(parameterName : dotnet.System.String, default_ : Optional<dotnet.System.Object>, parameterKind : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPart__ParameterPart_0__3__String_Object_RoutePatternParameterKind(&__thrown, parameterName.get_handle(), default_?.get_handle() ?? nil, parameterKind.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart ParameterPart(System.String, System.Object, Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPart(System.String,System.Object,Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference})
    /**
    
            Creates a  from the provided parameter name
            and default value, parameter kind, and parameter policies.
            

    - Parameter parameterName: The parameter name.
    - Parameter default: The parameter default value. May be null.
    - Parameter parameterKind: The parameter kind.
    - Parameter parameterPolicies: The parameter policies to associated with the parameter.
    - Returns: The .

    */
    public static func ParameterPart(parameterName : dotnet.System.String, default_ : Optional<dotnet.System.Object>, parameterKind : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind, parameterPolicies : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPart__ParameterPart_0__4__String_Object_RoutePatternParameterKind_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference_(&__thrown, parameterName.get_handle(), default_?.get_handle() ?? nil, parameterKind.get_value(), parameterPolicies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart ParameterPart(System.String, System.Object, Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind, Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference[])
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPart(System.String,System.Object,Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind,Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference[])
    /**
    
            Creates a  from the provided parameter name
            and default value, parameter kind, and parameter policies.
            

    - Parameter parameterName: The parameter name.
    - Parameter default: The parameter default value. May be null.
    - Parameter parameterKind: The parameter kind.
    - Parameter parameterPolicies: The parameter policies to associated with the parameter.
    - Returns: The .

    */
    public static func ParameterPart(parameterName : dotnet.System.String, default_ : Optional<dotnet.System.Object>, parameterKind : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind, parameterPolicies : dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPart__ParameterPart_0__4__String_Object_RoutePatternParameterKind_RoutePatternParameterPolicyReferenceArray(&__thrown, parameterName.get_handle(), default_?.get_handle() ?? nil, parameterKind.get_value(), parameterPolicies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference Constraint(System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Constraint(System.Object)
    /**
    
            Creates a  from the provided contraint.
            

    - Parameter constraint: 
            The constraint object, which must be of type 
            or . If the constraint object is a 
            then it will be transformed into an instance of .
            
    - Returns: The .

    */
    public static func Constraint(constraint : dotnet.System.Object) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPolicyReference__Constraint_0__1__Object(&__thrown, constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference Constraint(Microsoft.AspNetCore.Routing.IRouteConstraint)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Constraint(Microsoft.AspNetCore.Routing.IRouteConstraint)
    /**
    
            Creates a  from the provided constraint.
            

    - Parameter constraint: 
            The constraint object.
            
    - Returns: The .

    */
    public static func Constraint(constraint : aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPolicyReference__Constraint_0__1__IRouteConstraint(&__thrown, constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference Constraint(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.Constraint(System.String)
    /**
    
            Creates a  from the provided constraint.
            

    - Parameter constraint: 
            The constraint text, which will be resolved by .
            
    - Returns: The .

    */
    public static func Constraint(constraint : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPolicyReference__Constraint_0__1__String(&__thrown, constraint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference ParameterPolicy(Microsoft.AspNetCore.Routing.IParameterPolicy)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPolicy(Microsoft.AspNetCore.Routing.IParameterPolicy)
    /**
    
            Creates a  from the provided object.
            

    - Parameter parameterPolicy: 
            The parameter policy object.
            
    - Returns: The .

    */
    public static func ParameterPolicy(parameterPolicy : aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPolicyReference__ParameterPolicy_0__1__IParameterPolicy(&__thrown, parameterPolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference ParameterPolicy(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternFactory.ParameterPolicy(System.String)
    /**
    
            Creates a  from the provided object.
            

    - Parameter parameterPolicy: 
            The parameter policy text, which will be resolved by .
            
    - Returns: The .

    */
    public static func ParameterPolicy(parameterPolicy : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternFactory_RoutePatternParameterPolicyReference__ParameterPolicy_0__1__String(&__thrown, parameterPolicy.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference(hndl : __return);
        }
    }
} // RoutePatternFactory


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart
    /**
    
            Resprents a literal text part of a route pattern. Instances of 
            are immutable.
            

    */
public final class RoutePatternLiteralPart
    :
    aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternLiteralPart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Content()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternLiteralPart.get_Content
    public func get_Content() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternLiteralPart_String__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the text content.
            

    */
    public var Content : dotnet.System.String {
        get {
            return try! get_Content();
        }
    }
} // RoutePatternLiteralPart


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind
    /**
    
            Defines the kinds of  instances.
            

    */
public struct RoutePatternParameterKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind Standard
    /**
    
            The  of a standard parameter
            without optional or catch all behavior.
            

    */
    public static var Standard : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterKind_get_Standard());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind Optional
    /**
    
            The  of an optional parameter.
            

    */
    public static var Optional : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterKind_get_Optional());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind CatchAll
    /**
    
            The  of a catch-all parameter.
            

    */
    public static var CatchAll : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterKind_get_CatchAll());
            return __return;
        }
    }
} // RoutePatternParameterKind


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart
    /**
    
            Represents a parameter part in a route pattern. Instances of 
            are immutable.
            

    */
public final class RoutePatternParameterPart
    :
    aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference> get_ParameterPolicies()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_ParameterPolicies
    public func get_ParameterPolicies() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference___get_ParameterPolicies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EncodeSlashes()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_EncodeSlashes
    public func get_EncodeSlashes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_bool__get_EncodeSlashes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Default()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_Default
    public func get_Default() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_Object__get_Default_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsCatchAll()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_IsCatchAll
    public func get_IsCatchAll() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_bool__get_IsCatchAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_IsOptional
    public func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind get_ParameterKind()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_ParameterKind
    public func get_ParameterKind() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_RoutePatternParameterKind__get_ParameterKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPart.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPart_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the default value of this route parameter. May be null.
            

    */
    public var Default : Optional<dotnet.System.Object> {
        get {
            return try! get_Default();
        }
    }
    /**
    
            Gets the value indicating if slashes in current parameter's value should be encoded.
            

    */
    public var EncodeSlashes : Bool {
        get {
            return try! get_EncodeSlashes();
        }
    }
    /**
    
            Returns true if this part is a catch-all parameter.
            Otherwise returns false.
            

    */
    public var IsCatchAll : Bool {
        get {
            return try! get_IsCatchAll();
        }
    }
    /**
    
            Returns true if this part is an optional parameter.
            Otherwise returns false.
            

    */
    public var IsOptional : Bool {
        get {
            return try! get_IsOptional();
        }
    }
    /**
    
            Gets the parameter name.
            

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the  of this parameter.
            

    */
    public var ParameterKind : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterKind {
        get {
            return try! get_ParameterKind();
        }
    }
    /**
    
            Gets the list of parameter policies associated with this parameter.
            

    */
    public var ParameterPolicies : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference> {
        get {
            return try! get_ParameterPolicies();
        }
    }
} // RoutePatternParameterPart


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference
    /**
    
            The parsed representation of a policy in a  parameter. Instances
            of  are immutable.
            

    */
public final class RoutePatternParameterPolicyReference
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Content()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference.get_Content
    public func get_Content() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference_String__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IParameterPolicy get_ParameterPolicy()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference.get_ParameterPolicy
    public func get_ParameterPolicy() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternParameterPolicyReference_IParameterPolicy__get_ParameterPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the constraint text.
            

    */
    public var Content : Optional<dotnet.System.String> {
        get {
            return try! get_Content();
        }
    }
    /**
    
            Gets a pre-existing  that was used to construct this reference.
            

    */
    public var ParameterPolicy : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IParameterPolicy> {
        get {
            return try! get_ParameterPolicy();
        }
    }
} // RoutePatternParameterPolicyReference


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart
    /**
    
            Represents a part of a route pattern.
            

    */
open class RoutePatternPart
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind get_PartKind()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.get_PartKind
    open func get_PartKind() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_RoutePatternPartKind__get_PartKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsLiteral()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.get_IsLiteral
    open func get_IsLiteral() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_bool__get_IsLiteral_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsParameter()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.get_IsParameter
    open func get_IsParameter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_bool__get_IsParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSeparator()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart.get_IsSeparator
    open func get_IsSeparator() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart_bool__get_IsSeparator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Returns true if this part is literal text. Otherwise returns false.
            

    */
    open var IsLiteral : Bool {
        get {
            return try! get_IsLiteral();
        }
    }
    /**
    
            Returns true if this part is a route parameter. Otherwise returns false.
            

    */
    open var IsParameter : Bool {
        get {
            return try! get_IsParameter();
        }
    }
    /**
    
            Returns true if this part is an optional separator. Otherwise returns false.
            

    */
    open var IsSeparator : Bool {
        get {
            return try! get_IsSeparator();
        }
    }
    /**
    
            Gets the  of this part.
            

    */
    open var PartKind : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind {
        get {
            return try! get_PartKind();
        }
    }
} // RoutePatternPart


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind
    /**
    
            Defines the kinds of  instances.
            

    */
public struct RoutePatternPartKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternPartKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind Literal
    /**
    
            The  of a .
            

    */
    public static var Literal : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternPartKind_get_Literal());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind Parameter
    /**
    
            The  of a .
            

    */
    public static var Parameter : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternPartKind_get_Parameter());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind Separator
    /**
    
            The  of a .
            

    */
    public static var Separator : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPartKind(val: Microsoft_AspNetCore_Routing_Patterns_RoutePatternPartKind_get_Separator());
            return __return;
        }
    }
} // RoutePatternPartKind


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment
    /**
    
            Represents a path segment in a route pattern. Instances of  are
            immutable.
            

    */
public final class RoutePatternPathSegment
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsSimple()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment.get_IsSimple
    public func get_IsSimple() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_bool__get_IsSimple_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart> get_Parts()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment.get_Parts
    public func get_Parts() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternPathSegment_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Routing_Patterns_RoutePatternPart___get_Parts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    
            Returns true if the segment contains a single part;
            otherwise returns false.
            

    */
    public var IsSimple : Bool {
        get {
            return try! get_IsSimple();
        }
    }
    /**
    
            Gets the list of parts in this segment.
            

    */
    public var Parts : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart> {
        get {
            return try! get_Parts();
        }
    }
} // RoutePatternPathSegment


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart
    /**
    
            Represents an optional separator part of a route pattern. Instances of 
            are immutable.
            

    */
public final class RoutePatternSeparatorPart
    :
    aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternSeparatorPart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Content()
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternSeparatorPart.get_Content
    public func get_Content() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternSeparatorPart_String__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the text content of the part.
            

    */
    public var Content : dotnet.System.String {
        get {
            return try! get_Content();
        }
    }
} // RoutePatternSeparatorPart


// type: Microsoft.AspNetCore.Routing.Patterns.RoutePatternTransformer
    /**
    
            A singleton service that provides transformations on .
            

    */
open class RoutePatternTransformer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Patterns_RoutePatternTransformer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern SubstituteRequiredValues(Microsoft.AspNetCore.Routing.Patterns.RoutePattern, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Patterns.RoutePatternTransformer.SubstituteRequiredValues(Microsoft.AspNetCore.Routing.Patterns.RoutePattern,System.Object)
    /**
    
            Attempts to substitute the provided  into the provided
            .
            

    - Parameter original: The original .
    - Parameter requiredValues: The required values to substitute.
    - Returns: 
            A new  if substitution succeeds, otherwise null.
            

    */
    open func SubstituteRequiredValues(original : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, requiredValues : dotnet.System.Object) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Patterns_RoutePatternTransformer_RoutePattern__SubstituteRequiredValues_0__2__RoutePattern_Object(&__thrown, self.get_handle(), original.get_handle(), requiredValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // RoutePatternTransformer


}

// Microsoft.AspNetCore.Routing.Template
extension Microsoft.AspNetCore.Routing.Template {
// type: Microsoft.AspNetCore.Routing.Template.InlineConstraint
    /**
    
            The parsed representation of an inline constraint in a route parameter.
            

    */
open class InlineConstraint
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_InlineConstraint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Template.InlineConstraint.#ctor(System.String)
    /**
    
            Creates a new instance of .
            

    - Parameter constraint: The constraint text.
    */
    public init(constraint : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_InlineConstraint_ctor_0__1__String(&__thrown, constraint.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference)
// docid: M:Microsoft.AspNetCore.Routing.Template.InlineConstraint.#ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference)
    /**
    
            Creates a new  instance given a .
            

    - Parameter other: A  instance.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternParameterPolicyReference) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_InlineConstraint_ctor_0__1__RoutePatternParameterPolicyReference(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Constraint()
// docid: M:Microsoft.AspNetCore.Routing.Template.InlineConstraint.get_Constraint
    open func get_Constraint() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_InlineConstraint_String__get_Constraint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the constraint text.
            

    */
    open var Constraint : dotnet.System.String {
        get {
            return try! get_Constraint();
        }
    }
} // InlineConstraint


// type: Microsoft.AspNetCore.Routing.Template.RoutePrecedence
public struct RoutePrecedence {
    // System.Decimal ComputeInbound(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
// docid: M:Microsoft.AspNetCore.Routing.Template.RoutePrecedence.ComputeInbound(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
    /**
    
             Compute the precedence for matching a provided url
            

    - Parameter template: The  to compute precedence for.
    - Returns: A  representing the route's precedence.

    */
    public static func ComputeInbound(template : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RoutePrecedence_Decimal__ComputeInbound_0__1__RouteTemplate(&__thrown, template.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Decimal ComputeOutbound(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
// docid: M:Microsoft.AspNetCore.Routing.Template.RoutePrecedence.ComputeOutbound(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
    /**
    
             Compute the precedence for generating a url.
            

    - Parameter template: The  to compute precedence for.
    - Returns: A  representing the route's precedence.

    */
    public static func ComputeOutbound(template : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RoutePrecedence_Decimal__ComputeOutbound_0__1__RouteTemplate(&__thrown, template.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
} // RoutePrecedence


// type: Microsoft.AspNetCore.Routing.Template.RouteTemplate
    /**
    
            Represents the template for a route.
            

    */
open class RouteTemplate
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_RouteTemplate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.#ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
    /**
    
            Constructs a new  instance given .
            

    - Parameter other: A  instance.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_RouteTemplate_ctor_0__1__RoutePattern(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Collections.Generic.List<Microsoft.AspNetCore.Routing.Template.TemplateSegment>)
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.#ctor(System.String,System.Collections.Generic.List{Microsoft.AspNetCore.Routing.Template.TemplateSegment})
    /**
    
            Constructs a a new  instance given the  string
            and a list of . Computes the parameters in the route template.
            

    - Parameter template: A string representation of the route template.
    - Parameter segments: A list of .
    */
    public init(template : dotnet.System.String, segments : dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateSegment>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_RouteTemplate_ctor_0__2__String_System_Collections_Generic_List_Microsoft_AspNetCore_Routing_Template_TemplateSegment_(&__thrown, template.get_handle(), segments.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.Template.TemplateSegment GetSegment(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.GetSegment(System.Int32)
    /**
    
            Gets the  at a given index.
            

    - Parameter index: The index of the element to retrieve.
    - Returns: A  instance.

    */
    open func GetSegment(index : Swift.Int32) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_TemplateSegment__GetSegment_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateSegment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Routing.Template.TemplatePart GetParameter(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.GetParameter(System.String)
    /**
    
            Gets the parameter matching the given name.
            

    - Parameter name: The name of the parameter to match.
    - Returns: The matching parameter or null if no parameter matches the given name.

    */
    open func GetParameter(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_TemplatePart__GetParameter_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePattern ToRoutePattern()
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.ToRoutePattern
    /**
    
            Converts the  to the equivalent
            
            

    - Returns: A .

    */
    open func ToRoutePattern() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_RoutePattern__ToRoutePattern_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TemplateText()
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.get_TemplateText
    open func get_TemplateText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_String__get_TemplateText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.Template.TemplatePart> get_Parameters()
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_Template_TemplatePart___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.Template.TemplateSegment> get_Segments()
// docid: M:Microsoft.AspNetCore.Routing.Template.RouteTemplate.get_Segments
    open func get_Segments() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateSegment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_RouteTemplate_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_Template_TemplateSegment___get_Segments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets the list of  that represent that parameters defined in the route template.
            

    */
    open var Parameters : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart> {
        get {
            return try! get_Parameters();
        }
    }
    /**
    
            Gets the list of  that compromise the route template.
            

    */
    open var Segments : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateSegment> {
        get {
            return try! get_Segments();
        }
    }
    /**
    
            Gets the string representation of the route template.
            

    */
    open var TemplateText : Optional<dotnet.System.String> {
        get {
            return try! get_TemplateText();
        }
    }
} // RouteTemplate


// type: Microsoft.AspNetCore.Routing.Template.TemplateBinder
    /**
    
            Supports processing and binding parameter values in a route template.
            

    */
open class TemplateBinder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplateBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.Template.TemplateValuesResult GetValues(Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinder.GetValues(Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Generates the parameter values in the route.
            

    - Parameter ambientValues: The values associated with the current request.
    - Parameter values: The route values to process.
    - Returns: A  instance. Can be null.

    */
    open func GetValues(ambientValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateValuesResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinder_TemplateValuesResult__GetValues_0__2__RouteValueDictionary_RouteValueDictionary(&__thrown, self.get_handle(), ambientValues?.get_handle() ?? nil, values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateValuesResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool TryProcessConstraints(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary, ref System.String, ref Microsoft.AspNetCore.Routing.IRouteConstraint)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinder.TryProcessConstraints(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String@,Microsoft.AspNetCore.Routing.IRouteConstraint@)
    /**
    
            Processes the constraints (ASTERISK)(ASTERISK)if(ASTERISK)(ASTERISK) they were passed in to the TemplateBinder constructor.
            

    - Parameter httpContext: The  associated with the current request.
    - Parameter combinedValues: A dictionary that contains the parameters for the route.
    - Parameter parameterName: The name of the parameter.
    - Parameter constraint: The constraint object.
    - Returns:  if constraints were processed succesfully and false otherwise.

    */
    open func TryProcessConstraints(httpContext : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, combinedValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary, parameterName : inout dotnet.System.String, constraint : inout aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_parameterName = parameterName.get_handle();
            var _tmp_out_constraint = constraint.get_handle();
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinder_bool__TryProcessConstraints_0__4__HttpContext_RouteValueDictionary_outString_outIRouteConstraint(&__thrown, self.get_handle(), httpContext?.get_handle() ?? nil, combinedValues.get_handle(), &_tmp_out_parameterName, &_tmp_out_constraint);
        let _tmp2_parameterName = dotnet.System.String(hndl: _tmp_out_parameterName);
            parameterName = _tmp2_parameterName;
        let _tmp2_constraint = aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint(hndl: _tmp_out_constraint);
            constraint = _tmp2_constraint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String BindValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinder.BindValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Returns a string representation of the URI associated with the route.
            

    - Parameter acceptedValues: A dictionary that contains the parameters for the route.
    - Returns: The string representation of the route.

    */
    open func BindValues(acceptedValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinder_String__BindValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), acceptedValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool RoutePartsEqual(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinder.RoutePartsEqual(System.Object,System.Object)
    /**
    
            Compares two objects for equality as parts of a case-insensitive path.
            

    - Parameter a: An object to compare.
    - Parameter b: An object to compare.
    - Returns: True if the object are equal, otherwise false.

    */
    open class func RoutePartsEqual(a : Optional<dotnet.System.Object>, b : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinder_bool__RoutePartsEqual_0__2__Object_Object(&__thrown, a?.get_handle() ?? nil, b?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TemplateBinder


// type: Microsoft.AspNetCore.Routing.Template.TemplateBinderFactory
    /**
    
            A factory used to create  instances.
            

    */
open class TemplateBinderFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplateBinderFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.Template.TemplateBinder Create(Microsoft.AspNetCore.Routing.Template.RouteTemplate, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinderFactory.Create(Microsoft.AspNetCore.Routing.Template.RouteTemplate,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new  from the provided  and
            .
            

    - Parameter template: The route template.
    - Parameter defaults: A collection of extra default values that do not appear in the route template.
    - Returns: A .

    */
    open func Create(template : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate, defaults : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinderFactory_TemplateBinder__Create_0__2__RouteTemplate_RouteValueDictionary(&__thrown, self.get_handle(), template.get_handle(), defaults.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Template.TemplateBinder Create(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateBinderFactory.Create(Microsoft.AspNetCore.Routing.Patterns.RoutePattern)
    /**
    
            Creates a new  from the provided .
            

    - Parameter pattern: The .
    - Returns: A .

    */
    open func Create(pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateBinderFactory_TemplateBinder__Create_0__1__RoutePattern(&__thrown, self.get_handle(), pattern.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder(hndl : __return);
        }
    }
} // TemplateBinderFactory


// type: Microsoft.AspNetCore.Routing.Template.TemplateMatcher
    /**
    
            Supports matching paths to route templates and extracting parameter values.
            

    */
open class TemplateMatcher
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplateMatcher_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Routing.Template.RouteTemplate, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateMatcher.#ctor(Microsoft.AspNetCore.Routing.Template.RouteTemplate,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Creates a new  instance given a  and .
            

    - Parameter template: The  to compare against.
    - Parameter defaults: The default values for parameters in the .
    */
    public init(template : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate, defaults : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplateMatcher_ctor_0__2__RouteTemplate_RouteValueDictionary(&__thrown, template.get_handle(), defaults.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool TryMatch(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateMatcher.TryMatch(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Routing.RouteValueDictionary)
    /**
    
            Evaluates if the provided  matches the . Populates
             with parameter values.
            

    - Parameter path: A  representing the route to match.
    - Parameter values: A  to populate with parameter values.
    - Returns:  if  matches .

    */
    open func TryMatch(path : aspnetcore.Microsoft.AspNetCore.Http.PathString, values : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateMatcher_bool__TryMatch_0__2__PathString_RouteValueDictionary(&__thrown, self.get_handle(), path.get_handle(), values.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Defaults()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateMatcher.get_Defaults
    open func get_Defaults() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateMatcher_RouteValueDictionary__get_Defaults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.RouteTemplate get_Template()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateMatcher.get_Template
    open func get_Template() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateMatcher_RouteTemplate__get_Template_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate(hndl : __return);
        }
    }
    /**
    
            Gets the default values for parameters in the .
            

    */
    open var Defaults : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_Defaults();
        }
    }
    /**
    
            Gets the  to match against.
            

    */
    open var Template : aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate {
        get {
            return try! get_Template();
        }
    }
} // TemplateMatcher


// type: Microsoft.AspNetCore.Routing.Template.TemplateParser
public struct TemplateParser {
    // Microsoft.AspNetCore.Routing.Template.RouteTemplate Parse(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateParser.Parse(System.String)
    /**
    
            Creates a  for a given  string.
            

    - Parameter routeTemplate: A string representation of the route template.
    - Returns: A  instance.

    */
    public static func Parse(routeTemplate : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateParser_RouteTemplate__Parse_0__1__String(&__thrown, routeTemplate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate(hndl : __return);
        }
    }
} // TemplateParser


// type: Microsoft.AspNetCore.Routing.Template.TemplatePart
    /**
    
            Represents a part of a route template segment.
            

    */
open class TemplatePart
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplatePart_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.#ctor
    /**
    
            Constructs a new  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplatePart_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.#ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart)
    /**
    
            Constructs a new  instance given a .
            

    - Parameter other: A  instance representing the route part.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplatePart_ctor_0__1__RoutePatternPart(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.Template.TemplatePart CreateLiteral(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.CreateLiteral(System.String)
    /**
    
            Create a  representing a literal route part.
            

    - Parameter text: The text of the literate route part.
    - Returns: A  instance.

    */
    open class func CreateLiteral(text : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_TemplatePart__CreateLiteral_0__1__String(&__thrown, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Template.TemplatePart CreateParameter(System.String, bool, bool, System.Object, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Template.InlineConstraint>)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.CreateParameter(System.String,System.Boolean,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Routing.Template.InlineConstraint})
    /**
    
            Creates a  representing a paramter part.
            

    - Parameter name: The name of the parameter.
    - Parameter isCatchAll:  if the parameter is a catch-all parameter.
    - Parameter isOptional:  if the parameter is an optional parameter.
    - Parameter defaultValue: The default value of the parameter.
    - Parameter inlineConstraints: A collection of constraints associated with the parameter.
    - Returns: A  instance.

    */
    open class func CreateParameter(name : dotnet.System.String, isCatchAll : Bool, isOptional : Bool, defaultValue : Optional<dotnet.System.Object>, inlineConstraints : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.InlineConstraint>>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_TemplatePart__CreateParameter_0__5__String_bool_bool_Object_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Template_InlineConstraint_(&__thrown, name.get_handle(), Swift.Int32(isCatchAll ? 1 : 0), Swift.Int32(isOptional ? 1 : 0), defaultValue?.get_handle() ?? nil, (inlineConstraints?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart ToRoutePatternPart()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.ToRoutePatternPart
    /**
    
            Creates a  for the route part designated by the .
            

    - Returns: A  instance.

    */
    open func ToRoutePatternPart() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_RoutePatternPart__ToRoutePatternPart_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPart(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsCatchAll()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_IsCatchAll
    open func get_IsCatchAll() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_bool__get_IsCatchAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsLiteral()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_IsLiteral
    open func get_IsLiteral() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_bool__get_IsLiteral_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsParameter()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_IsParameter
    open func get_IsParameter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_bool__get_IsParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOptional()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_IsOptional
    open func get_IsOptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_bool__get_IsOptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOptionalSeperator()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_IsOptionalSeperator
    open func get_IsOptionalSeperator() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_bool__get_IsOptionalSeperator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsOptionalSeperator(bool)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.set_IsOptionalSeperator(System.Boolean)
    open func set_IsOptionalSeperator(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Template_TemplatePart_void__set_IsOptionalSeperator_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_Text
    open func get_Text() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_DefaultValue()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_DefaultValue
    open func get_DefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_Object__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Routing.Template.InlineConstraint> get_InlineConstraints()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplatePart.get_InlineConstraints
    open func get_InlineConstraints() throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.InlineConstraint> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplatePart_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Routing_Template_InlineConstraint___get_InlineConstraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    
            The default value for route paramters. Can be null.
            

    */
    open var DefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_DefaultValue();
        }
    }
    /**
    
            The constraints associates with a route paramter.
            

    */
    open var InlineConstraints : dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.InlineConstraint> {
        get {
            return try! get_InlineConstraints();
        }
    }
    /**
    
             if the route part is is a catch-all part (e.g. /(ASTERISK)).
            

    */
    open var IsCatchAll : Bool {
        get {
            return try! get_IsCatchAll();
        }
    }
    /**
    
             if the route part is represents a literal value.
            

    */
    open var IsLiteral : Bool {
        get {
            return try! get_IsLiteral();
        }
    }
    /**
    
             if the route part represents an optional part.
            

    */
    open var IsOptional : Bool {
        get {
            return try! get_IsOptional();
        }
    }
    /**
    
             if the route part represents an optional seperator.
            

    */
    open var IsOptionalSeperator : Bool {
        get {
            return try! get_IsOptionalSeperator();
        }
        set(v) {
            return try! set_IsOptionalSeperator(value: v);
        }
    }
    /**
    
             if the route part represents a parameterized value.
            

    */
    open var IsParameter : Bool {
        get {
            return try! get_IsParameter();
        }
    }
    /**
    
            The name of the route parameter. Can be null.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            The textual representation of the route paramter. Can be null. Used to represent route seperators and literal parts.
            

    */
    open var Text : Optional<dotnet.System.String> {
        get {
            return try! get_Text();
        }
    }
} // TemplatePart


// type: Microsoft.AspNetCore.Routing.Template.TemplateSegment
    /**
    
            Represents a segment of a route template.
            

    */
open class TemplateSegment
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplateSegment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateSegment.#ctor
    /**
    
            Constructs a new  instance.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplateSegment_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateSegment.#ctor(Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment)
    /**
    
            Constructs a new  instance given another .
            

    - Parameter other: A  instance.
    */
    public init(other : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplateSegment_ctor_0__1__RoutePatternPathSegment(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment ToRoutePatternPathSegment()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateSegment.ToRoutePatternPathSegment
    /**
    
            Returns a  for the template segment.
            

    - Returns: A  instance.

    */
    open func ToRoutePatternPathSegment() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateSegment_RoutePatternPathSegment__ToRoutePatternPathSegment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePatternPathSegment(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsSimple()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateSegment.get_IsSimple
    open func get_IsSimple() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateSegment_bool__get_IsSimple_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.List<Microsoft.AspNetCore.Routing.Template.TemplatePart> get_Parts()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateSegment.get_Parts
    open func get_Parts() throws -> dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateSegment_System_Collections_Generic_List_Microsoft_AspNetCore_Routing_Template_TemplatePart___get_Parts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.List_1(hndl : __return);
        }
    }
    /**
    
             if the segment contains a single entry.
            

    */
    open var IsSimple : Bool {
        get {
            return try! get_IsSimple();
        }
    }
    /**
    
            Gets the list of individual parts in the template segment.
            

    */
    open var Parts : dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplatePart> {
        get {
            return try! get_Parts();
        }
    }
} // TemplateSegment


// type: Microsoft.AspNetCore.Routing.Template.TemplateValuesResult
    /**
    
            The values used as inputs for constraints and link generation.
            

    */
open class TemplateValuesResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateValuesResult.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_AcceptedValues()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateValuesResult.get_AcceptedValues
    open func get_AcceptedValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_RouteValueDictionary__get_AcceptedValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptedValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateValuesResult.set_AcceptedValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_AcceptedValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_void__set_AcceptedValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_CombinedValues()
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateValuesResult.get_CombinedValues
    open func get_CombinedValues() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_RouteValueDictionary__get_CombinedValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CombinedValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Template.TemplateValuesResult.set_CombinedValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_CombinedValues(value : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Template_TemplateValuesResult_void__set_CombinedValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The set of values that will appear in the URL.
            

    */
    open var AcceptedValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_AcceptedValues();
        }
        set(v) {
            return try! set_AcceptedValues(value: v);
        }
    }
    /**
    
             The set of values that that were supplied for URL generation.
             

    */
    open var CombinedValues : aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary {
        get {
            return try! get_CombinedValues();
        }
        set(v) {
            return try! set_CombinedValues(value: v);
        }
    }
} // TemplateValuesResult


}

// Microsoft.AspNetCore.Routing.Tree
extension Microsoft.AspNetCore.Routing.Tree {
// type: Microsoft.AspNetCore.Routing.Tree.InboundMatch
    /**
    
            A candidate route to match incoming URLs in a .
            

    */
open class InboundMatch
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_InboundMatch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundMatch.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_InboundMatch_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry get_Entry()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundMatch.get_Entry
    open func get_Entry() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundMatch_InboundRouteEntry__get_Entry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Entry(Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundMatch.set_Entry(Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry)
    open func set_Entry(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundMatch_void__set_Entry_0__1__InboundRouteEntry(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.TemplateMatcher get_TemplateMatcher()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundMatch.get_TemplateMatcher
    open func get_TemplateMatcher() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateMatcher> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundMatch_TemplateMatcher__get_TemplateMatcher_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateMatcher(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TemplateMatcher(Microsoft.AspNetCore.Routing.Template.TemplateMatcher)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundMatch.set_TemplateMatcher(Microsoft.AspNetCore.Routing.Template.TemplateMatcher)
    open func set_TemplateMatcher(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateMatcher>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundMatch_void__set_TemplateMatcher_0__1__TemplateMatcher(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Entry : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry> {
        get {
            return try! get_Entry();
        }
        set(v) {
            return try! set_Entry(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var TemplateMatcher : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateMatcher> {
        get {
            return try! get_TemplateMatcher();
        }
        set(v) {
            return try! set_TemplateMatcher(value: v!);
        }
    }
} // InboundMatch


// type: Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry
    /**
    
            Used to build an . Represents a URL template tha will be used to match incoming
            request URLs.
            

    */
open class InboundRouteEntry
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_Constraints
    open func get_Constraints() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Constraints(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint>)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_Constraints(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Routing.IRouteConstraint})
    open func set_Constraints(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_Constraints_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Defaults()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_Defaults
    open func get_Defaults() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_RouteValueDictionary__get_Defaults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_Defaults(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_Defaults_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_Handler()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_Handler
    open func get_Handler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_IRouter__get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Handler(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_Handler(Microsoft.AspNetCore.Routing.IRouter)
    open func set_Handler(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_Handler_0__1__IRouter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Decimal get_Precedence()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_Precedence
    open func get_Precedence() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_Decimal__get_Precedence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Precedence(System.Decimal)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_Precedence(System.Decimal)
    open func set_Precedence(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_Precedence_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.RouteTemplate get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.get_RouteTemplate
    open func get_RouteTemplate() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_RouteTemplate__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
// docid: M:Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry.set_RouteTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
    open func set_RouteTemplate(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry_void__set_RouteTemplate_0__1__RouteTemplate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the route constraints.
            

    */
    open var Constraints : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        get {
            return try! get_Constraints();
        }
        set(v) {
            return try! set_Constraints(value: v!);
        }
    }
    /**
    
            Gets or sets the route defaults.
            

    */
    open var Defaults : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_Defaults();
        }
        set(v) {
            return try! set_Defaults(value: v!);
        }
    }
    /**
    
            Gets or sets the  to invoke when this entry matches.
            

    */
    open var Handler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        get {
            return try! get_Handler();
        }
        set(v) {
            return try! set_Handler(value: v!);
        }
    }
    /**
    
            Gets or sets the order of the entry.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets the precedence of the entry.
            

    */
    open var Precedence : dotnet.System.Decimal {
        get {
            return try! get_Precedence();
        }
        set(v) {
            return try! set_Precedence(value: v);
        }
    }
    /**
    
            Gets or sets the name of the route.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var RouteTemplate : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate> {
        get {
            return try! get_RouteTemplate();
        }
        set(v) {
            return try! set_RouteTemplate(value: v!);
        }
    }
} // InboundRouteEntry


// type: Microsoft.AspNetCore.Routing.Tree.OutboundMatch
    /**
    
            A candidate match for link generation in a .
            

    */
open class OutboundMatch
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_OutboundMatch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundMatch.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_OutboundMatch_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry get_Entry()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundMatch.get_Entry
    open func get_Entry() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundMatch_OutboundRouteEntry__get_Entry_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Entry(Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundMatch.set_Entry(Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry)
    open func set_Entry(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundMatch_void__set_Entry_0__1__OutboundRouteEntry(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.TemplateBinder get_TemplateBinder()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundMatch.get_TemplateBinder
    open func get_TemplateBinder() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundMatch_TemplateBinder__get_TemplateBinder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TemplateBinder(Microsoft.AspNetCore.Routing.Template.TemplateBinder)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundMatch.set_TemplateBinder(Microsoft.AspNetCore.Routing.Template.TemplateBinder)
    open func set_TemplateBinder(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundMatch_void__set_TemplateBinder_0__1__TemplateBinder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Entry : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry> {
        get {
            return try! get_Entry();
        }
        set(v) {
            return try! set_Entry(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var TemplateBinder : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.TemplateBinder> {
        get {
            return try! get_TemplateBinder();
        }
        set(v) {
            return try! set_TemplateBinder(value: v!);
        }
    }
} // OutboundMatch


// type: Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry
    /**
    
            Used to build a . Represents a URL template that will be used to generate
            outgoing URLs.
            

    */
open class OutboundRouteEntry
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint> get_Constraints()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Constraints
    open func get_Constraints() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint___get_Constraints_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Constraints(System.Collections.Generic.IDictionary<System.String,Microsoft.AspNetCore.Routing.IRouteConstraint>)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Constraints(System.Collections.Generic.IDictionary{System.String,Microsoft.AspNetCore.Routing.IRouteConstraint})
    open func set_Constraints(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Constraints_0__1__System_Collections_Generic_IDictionary_string_Microsoft_AspNetCore_Routing_IRouteConstraint_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_Defaults()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Defaults
    open func get_Defaults() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_RouteValueDictionary__get_Defaults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Defaults(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_Defaults(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Defaults_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.IRouter get_Handler()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Handler
    open func get_Handler() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_IRouter__get_Handler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.IRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Handler(Microsoft.AspNetCore.Routing.IRouter)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Handler(Microsoft.AspNetCore.Routing.IRouter)
    open func set_Handler(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Handler_0__1__IRouter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Decimal get_Precedence()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Precedence
    open func get_Precedence() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_Decimal__get_Precedence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Precedence(System.Decimal)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Precedence(System.Decimal)
    open func set_Precedence(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Precedence_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RouteName()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_RouteName
    open func get_RouteName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_String__get_RouteName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteName(System.String)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_RouteName(System.String)
    open func set_RouteName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_RouteName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteValueDictionary get_RequiredLinkValues()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_RequiredLinkValues
    open func get_RequiredLinkValues() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_RouteValueDictionary__get_RequiredLinkValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RequiredLinkValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_RequiredLinkValues(Microsoft.AspNetCore.Routing.RouteValueDictionary)
    open func set_RequiredLinkValues(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_RequiredLinkValues_0__1__RouteValueDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Template.RouteTemplate get_RouteTemplate()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_RouteTemplate
    open func get_RouteTemplate() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_RouteTemplate__get_RouteTemplate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_RouteTemplate(Microsoft.AspNetCore.Routing.Template.RouteTemplate)
    open func set_RouteTemplate(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_RouteTemplate_0__1__RouteTemplate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Data()
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.get_Data
    open func get_Data() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_Object__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Data(System.Object)
// docid: M:Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry.set_Data(System.Object)
    open func set_Data(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry_void__set_Data_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the route constraints.
            

    */
    open var Constraints : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.IRouteConstraint>> {
        get {
            return try! get_Constraints();
        }
        set(v) {
            return try! set_Constraints(value: v!);
        }
    }
    /**
    
            Gets or sets the data that is associated with this entry.
            

    */
    open var Data : Optional<dotnet.System.Object> {
        get {
            return try! get_Data();
        }
        set(v) {
            return try! set_Data(value: v!);
        }
    }
    /**
    
            Gets or sets the route defaults.
            

    */
    open var Defaults : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_Defaults();
        }
        set(v) {
            return try! set_Defaults(value: v!);
        }
    }
    /**
    
            The  to invoke when this entry matches.
            

    */
    open var Handler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter> {
        get {
            return try! get_Handler();
        }
        set(v) {
            return try! set_Handler(value: v!);
        }
    }
    /**
    
            Gets or sets the order of the entry.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
    /**
    
            Gets or sets the precedence of the template for link generation. A greater value of
             means that an entry is considered first.
            

    */
    open var Precedence : dotnet.System.Decimal {
        get {
            return try! get_Precedence();
        }
        set(v) {
            return try! set_Precedence(value: v);
        }
    }
    /**
    
            Gets or sets the set of values that must be present for link genration.
            

    */
    open var RequiredLinkValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        get {
            return try! get_RequiredLinkValues();
        }
        set(v) {
            return try! set_RequiredLinkValues(value: v!);
        }
    }
    /**
    
            Gets or sets the name of the route.
            

    */
    open var RouteName : Optional<dotnet.System.String> {
        get {
            return try! get_RouteName();
        }
        set(v) {
            return try! set_RouteName(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var RouteTemplate : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate> {
        get {
            return try! get_RouteTemplate();
        }
        set(v) {
            return try! set_RouteTemplate(value: v!);
        }
    }
} // OutboundRouteEntry


// type: Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder
    /**
    
            Builder for  instances.
            

    */
open class TreeRouteBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry MapInbound(Microsoft.AspNetCore.Routing.IRouter, Microsoft.AspNetCore.Routing.Template.RouteTemplate, System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.MapInbound(Microsoft.AspNetCore.Routing.IRouter,Microsoft.AspNetCore.Routing.Template.RouteTemplate,System.String,System.Int32)
    /**
    
            Adds a new inbound route to the .
            

    - Parameter handler: The  for handling the route.
    - Parameter routeTemplate: The  of the route.
    - Parameter routeName: The route name.
    - Parameter order: The route order.
    - Returns: The .

    */
    open func MapInbound(handler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeTemplate : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate>, routeName : Optional<dotnet.System.String>, order : Swift.Int32) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_InboundRouteEntry__MapInbound_0__4__IRouter_RouteTemplate_String_i32(&__thrown, self.get_handle(), handler?.get_handle() ?? nil, routeTemplate?.get_handle() ?? nil, routeName?.get_handle() ?? nil, order);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry MapOutbound(Microsoft.AspNetCore.Routing.IRouter, Microsoft.AspNetCore.Routing.Template.RouteTemplate, Microsoft.AspNetCore.Routing.RouteValueDictionary, System.String, System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.MapOutbound(Microsoft.AspNetCore.Routing.IRouter,Microsoft.AspNetCore.Routing.Template.RouteTemplate,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String,System.Int32)
    /**
    
            Adds a new outbound route to the .
            

    - Parameter handler: The  for handling the link generation.
    - Parameter routeTemplate: The  of the route.
    - Parameter requiredLinkValues: The  containing the route values.
    - Parameter routeName: The route name.
    - Parameter order: The route order.
    - Returns: The .

    */
    open func MapOutbound(handler : Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouter>, routeTemplate : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Template.RouteTemplate>, requiredLinkValues : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary>, routeName : Optional<dotnet.System.String>, order : Swift.Int32) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_OutboundRouteEntry__MapOutbound_0__5__IRouter_RouteTemplate_RouteValueDictionary_String_i32(&__thrown, self.get_handle(), handler?.get_handle() ?? nil, routeTemplate?.get_handle() ?? nil, requiredLinkValues?.get_handle() ?? nil, routeName?.get_handle() ?? nil, order);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Routing.Tree.TreeRouter Build()
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.Build
    /**
    
            Builds a  with the 
            and  defined in this .
            

    - Returns: The .

    */
    open func Build() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.TreeRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_TreeRouter__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.TreeRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Routing.Tree.TreeRouter Build(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.Build(System.Int32)
    /**
    
            Builds a  with the 
            and  defined in this .
            

    - Parameter version: The version of the .
    - Returns: The .

    */
    open func Build(version : Swift.Int32) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.TreeRouter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_TreeRouter__Build_0__1__i32(&__thrown, self.get_handle(), version);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.TreeRouter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.Clear
    /**
    
            Removes all  and  from this
            .
            

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry> get_InboundEntries()
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.get_InboundEntries
    open func get_InboundEntries() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_Tree_InboundRouteEntry___get_InboundEntries_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry> get_OutboundEntries()
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder.get_OutboundEntries
    open func get_OutboundEntries() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouteBuilder_System_Collections_Generic_IList_Microsoft_AspNetCore_Routing_Tree_OutboundRouteEntry___get_OutboundEntries_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the list of .
            

    */
    open var InboundEntries : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry>> {
        get {
            return try! get_InboundEntries();
        }
    }
    /**
    
            Gets the list of .
            

    */
    open var OutboundEntries : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry>> {
        get {
            return try! get_OutboundEntries();
        }
    }
} // TreeRouteBuilder


// type: Microsoft.AspNetCore.Routing.Tree.TreeRouter
    /**
    
            An  implementation for attribute routing.
            

    */
open class TreeRouter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Routing_IRouter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_TreeRouter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String RouteGroupKey
    /**
    
            Key used by routing and action selection to match an attribute
            route entry to a group of action descriptors.
            

    */
    open class var RouteGroupKey : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Routing_Tree_TreeRouter_get_RouteGroupKey();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // Microsoft.AspNetCore.Routing.VirtualPathData GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouter.GetVirtualPath(Microsoft.AspNetCore.Routing.VirtualPathContext)
    /**
    */
    open /* method final */ func GetVirtualPath(context : Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouter_VirtualPathData__GetVirtualPath_0__1__VirtualPathContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.VirtualPathData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouter.RouteAsync(Microsoft.AspNetCore.Routing.RouteContext)
    /**
    */
    open /* method final */ func RouteAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouter_Task__RouteAsync_0__1__RouteContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Version()
// docid: M:Microsoft.AspNetCore.Routing.Tree.TreeRouter.get_Version
    open func get_Version() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_TreeRouter_i32__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets the version of this route.
            

    */
    open var Version : Swift.Int32 {
        get {
            return try! get_Version();
        }
    }
} // TreeRouter


// type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
    /**
    
            A node in a .
            

    */
open class UrlMatchingNode
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.#ctor(System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter length: The length of the path to this node in the .
    */
    public init(length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_ctor_0__1__i32(&__thrown, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Depth()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_Depth
    open func get_Depth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_i32__get_Depth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsCatchAll()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_IsCatchAll
    open func get_IsCatchAll() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_bool__get_IsCatchAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsCatchAll(bool)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.set_IsCatchAll(System.Boolean)
    open func set_IsCatchAll(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_void__set_IsCatchAll_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.List<Microsoft.AspNetCore.Routing.Tree.InboundMatch> get_Matches()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_Matches
    open func get_Matches() throws -> Optional<dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundMatch>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_System_Collections_Generic_List_Microsoft_AspNetCore_Routing_Tree_InboundMatch___get_Matches_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.List_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.Dictionary<System.String,Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> get_Literals()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_Literals
    open func get_Literals() throws -> Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_System_Collections_Generic_Dictionary_string_Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode___get_Literals_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.Dictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode get_ConstrainedParameters()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_ConstrainedParameters
    open func get_ConstrainedParameters() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_UrlMatchingNode__get_ConstrainedParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConstrainedParameters(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.set_ConstrainedParameters(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
    open func set_ConstrainedParameters(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_void__set_ConstrainedParameters_0__1__UrlMatchingNode(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode get_Parameters()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_Parameters
    open func get_Parameters() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_UrlMatchingNode__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Parameters(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.set_Parameters(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
    open func set_Parameters(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_void__set_Parameters_0__1__UrlMatchingNode(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode get_ConstrainedCatchAlls()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_ConstrainedCatchAlls
    open func get_ConstrainedCatchAlls() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_UrlMatchingNode__get_ConstrainedCatchAlls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConstrainedCatchAlls(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.set_ConstrainedCatchAlls(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
    open func set_ConstrainedCatchAlls(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_void__set_ConstrainedCatchAlls_0__1__UrlMatchingNode(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode get_CatchAlls()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.get_CatchAlls
    open func get_CatchAlls() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_UrlMatchingNode__get_CatchAlls_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CatchAlls(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.set_CatchAlls(Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
    open func set_CatchAlls(value : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Routing_Tree_UrlMatchingNode_void__set_CatchAlls_0__1__UrlMatchingNode(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  representing
            catch all parameter segments following this segment in the .
            

    */
    open var CatchAlls : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        get {
            return try! get_CatchAlls();
        }
        set(v) {
            return try! set_CatchAlls(value: v!);
        }
    }
    /**
    
            Gets or sets the  representing
            catch all parameter segments with constraints following this segment in the .
            

    */
    open var ConstrainedCatchAlls : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        get {
            return try! get_ConstrainedCatchAlls();
        }
        set(v) {
            return try! set_ConstrainedCatchAlls(value: v!);
        }
    }
    /**
    
            Gets or sets the  representing
            parameter segments with constraints following this segment in the .
            

    */
    open var ConstrainedParameters : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        get {
            return try! get_ConstrainedParameters();
        }
        set(v) {
            return try! set_ConstrainedParameters(value: v!);
        }
    }
    /**
    
            Gets the length of the path to this node in the .
            

    */
    open var Depth : Swift.Int32 {
        get {
            return try! get_Depth();
        }
    }
    /**
    
            Gets or sets a value indicating whether this node represents a catch all segment.
            

    */
    open var IsCatchAll : Bool {
        get {
            return try! get_IsCatchAll();
        }
        set(v) {
            return try! set_IsCatchAll(value: v);
        }
    }
    /**
    
            Gets the literal segments following this segment.
            

    */
    open var Literals : Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>> {
        get {
            return try! get_Literals();
        }
    }
    /**
    
            Gets the list of matching route entries associated with this node.
            

    */
    open var Matches : Optional<dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Routing.Tree.InboundMatch>> {
        get {
            return try! get_Matches();
        }
    }
    /**
    
            Gets or sets the  representing
            parameter segments following this segment in the .
            

    */
    open var Parameters : Optional<aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v!);
        }
    }
} // UrlMatchingNode


// type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree
    /**
    
            A tree part of a .
            

    */
open class UrlMatchingTree
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Routing_Tree_UrlMatchingTree_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.#ctor(System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter order: The order associated with routes in this .
    */
    public init(order : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Routing_Tree_UrlMatchingTree_ctor_0__1__i32(&__thrown, order);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingTree_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode get_Root()
// docid: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree.get_Root
    open func get_Root() throws -> aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Routing_Tree_UrlMatchingTree_UrlMatchingNode__get_Root_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode(hndl : __return);
        }
    }
    /**
    
            Gets the order of the routes associated with this .
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the root of the .
            

    */
    open var Root : aspnetcore.Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode {
        get {
            return try! get_Root();
        }
    }
} // UrlMatchingTree


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions
public struct RoutingServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services required for routing requests.
            

    - Parameter services: The  to add the services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddRouting(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_RoutingServiceCollectionExtensions_IServiceCollection__AddRouting_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Routing.RouteOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Routing.RouteOptions})
    /**
    
            Adds services required for routing requests.
            

    - Parameter services: The  to add the services to.
    - Parameter configureOptions: The routing options to configure the middleware with.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddRouting(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_RoutingServiceCollectionExtensions_IServiceCollection__AddRouting_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Routing_RouteOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddRouting(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>(configureOptions);
        return try AddRouting(services: services, configureOptions: del_configureOptions);
    }
} // RoutingServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Routing_IDataTokensMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IDynamicEndpointMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IEndpointAddressScheme_1
    :
    SGBridgeGetHandle
{
    associatedtype TAddress_IEndpointAddressScheme_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Routing_IEndpointGroupNameMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IEndpointNameMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IEndpointRouteBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IExcludeFromDescriptionMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IHostMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IHttpMethodMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IInlineConstraintResolver
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_INamedRouter
    :
    Microsoft_AspNetCore_Routing_IRouter
{
}

public protocol Microsoft_AspNetCore_Routing_IRouteBuilder
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_IRouteCollection
    :
    Microsoft_AspNetCore_Routing_IRouter
{
}

public protocol Microsoft_AspNetCore_Routing_IRouteNameMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_ISuppressLinkGenerationMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_ISuppressMatchingMetadata
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_Matching_IEndpointComparerPolicy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_Matching_IEndpointSelectorPolicy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_Matching_INodeBuilderPolicy
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Routing_Matching_IParameterLiteralNodeMatchingPolicy
    :
    Microsoft_AspNetCore_Routing_IParameterPolicy
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapGet(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapGet(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapPost(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapPost(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapPut(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapPut(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapDelete(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapDelete(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Collections.Generic.IEnumerable<System.String>, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapMethods(pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapMethods(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, httpMethods: httpMethods, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func Map(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func Map(pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallback(handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Delegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallback(pattern : dotnet.System.String, handler : dotnet.System.Delegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.DelegateEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, handler: handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapGet(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapGet(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapGet(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapGet(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapPost(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapPost(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapPost(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPost(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapPut(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapPut(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapPut(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapPut(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapDelete(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapDelete(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapDelete(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapDelete(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapMethods(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, System.Collections.Generic.IEnumerable<System.String>, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapMethods(pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, httpMethods: httpMethods, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapMethods(pattern : dotnet.System.String, httpMethods : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.MapMethods(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, httpMethods: httpMethods, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func Map(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func Map(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder Map(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Routing.Patterns.RoutePattern, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func Map(pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func Map(pattern : aspnetcore.Microsoft.AspNetCore.Routing.Patterns.RoutePattern, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.Map(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRouting() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions.UseRouting(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseEndpoints(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseEndpoints(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions.UseEndpoints(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func UseEndpoints(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>(configure);
        return try aspnetcore.Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions.UseEndpoints(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallback(requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapFallback(requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IEndpointConventionBuilder MapFallback(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IEndpointRouteBuilder {
    public func MapFallback(pattern : dotnet.System.String, requestDelegate : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: requestDelegate);
    }
    // delegate closure overload
    public func MapFallback(pattern : dotnet.System.String, requestDelegate : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IEndpointConventionBuilder {
        let del_requestDelegate = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(requestDelegate);
        return try aspnetcore.Microsoft.AspNetCore.Builder.FallbackEndpointRouteBuilderExtensions.MapFallback(endpoints: aspnetcore.Microsoft.AspNetCore.Routing.IEndpointRouteBuilder(hndl: __copy_handle(self.get_handle())), pattern: pattern, requestDelegate: del_requestDelegate);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapRoute(name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, template: template);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapRoute(name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, template: template, defaults: defaults);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapRoute(name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, template: template, defaults: defaults, constraints: constraints);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Object, System.Object, System.Object)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapRoute(name : Optional<dotnet.System.String>, template : Optional<dotnet.System.String>, defaults : Optional<dotnet.System.Object>, constraints : Optional<dotnet.System.Object>, dataTokens : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(routeBuilder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), name: name, template: template, defaults: defaults, constraints: constraints, dataTokens: dataTokens);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Routing.IRouter)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRouter(router : aspnetcore.Microsoft.AspNetCore.Routing.IRouter) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), router: router);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder>)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseRouter(action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), action: action);
    }
    // delegate closure overload
    public func UseRouter(action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(builder: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), action: del_action);
    }
}

// EXTENSION METHOD TBuilder RequireHost<TBuilder>(TBuilder, System.String[])
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder WithDisplayName<TBuilder>(TBuilder, System.String)
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder WithDisplayName<TBuilder>(TBuilder, System.Func<Microsoft.AspNetCore.Builder.EndpointBuilder,System.String>)
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder WithMetadata<TBuilder>(TBuilder, System.Object[])
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder WithName<TBuilder>(TBuilder, System.String)
// TODO COPE extension method on generic param type

// EXTENSION METHOD TBuilder WithGroupName<TBuilder>(TBuilder, System.String)
// TODO COPE extension method on generic param type

// EXTENSION METHOD System.String GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByName(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetPathByName(generator: self, httpContext: httpContext, endpointName: endpointName, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByName(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByName(endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetPathByName(generator: self, endpointName: endpointName, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByName(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetUriByName(generator: self, httpContext: httpContext, endpointName: endpointName, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByName(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByName(endpointName : dotnet.System.String, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorEndpointNameAddressExtensions.GetUriByName(generator: self, endpointName: endpointName, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByRouteValues(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetPathByRouteValues(generator: self, httpContext: httpContext, routeName: routeName, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetPathByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetPathByRouteValues(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetPathByRouteValues(generator: self, routeName: routeName, values: values, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, Microsoft.AspNetCore.Http.HttpContext, System.String, System.Object, System.String, System.Nullable<Microsoft.AspNetCore.Http.HostString>, System.Nullable<Microsoft.AspNetCore.Http.PathString>, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByRouteValues(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : Optional<dotnet.System.String> = nil, host : Optional<aspnetcore.Microsoft.AspNetCore.Http.HostString> = nil, pathBase : Optional<aspnetcore.Microsoft.AspNetCore.Http.PathString> = nil, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetUriByRouteValues(generator: self, httpContext: httpContext, routeName: routeName, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD System.String GetUriByRouteValues(Microsoft.AspNetCore.Routing.LinkGenerator, System.String, System.Object, System.String, Microsoft.AspNetCore.Http.HostString, Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Routing.LinkOptions)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkGenerator {
    public func GetUriByRouteValues(routeName : Optional<dotnet.System.String>, values : Optional<dotnet.System.Object>, scheme : dotnet.System.String, host : aspnetcore.Microsoft.AspNetCore.Http.HostString, pathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString/* TODO default valuetype */, fragment : aspnetcore.Microsoft.AspNetCore.Http.FragmentString/* TODO default valuetype */, options : Optional<aspnetcore.Microsoft.AspNetCore.Routing.LinkOptions> = nil) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkGeneratorRouteValuesAddressExtensions.GetUriByRouteValues(generator: self, routeName: routeName, values: values, scheme: scheme, host: host, pathBase: pathBase, fragment: fragment, options: options);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.RouteValueDictionary ParsePathByEndpointName(Microsoft.AspNetCore.Routing.LinkParser, System.String, Microsoft.AspNetCore.Http.PathString)
extension aspnetcore.Microsoft.AspNetCore.Routing.LinkParser {
    public func ParsePathByEndpointName(endpointName : dotnet.System.String, path : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteValueDictionary> {
        return try aspnetcore.Microsoft.AspNetCore.Routing.LinkParserEndpointNameAddressExtensions.ParsePathByEndpointName(parser: self, endpointName: endpointName, path: path);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapRoute(template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapRoute(template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareRoute(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewareRoute(template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareRoute(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewareRoute(template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareRoute(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapDelete(template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapDelete(template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewareDelete(template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewareDelete(template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapDelete(template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapDelete(template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapGet(template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapGet(template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewareGet(template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewareGet(template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapGet(template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapGet(template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapPost(template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapPost(template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewarePost(template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewarePost(template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapPost(template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapPost(template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapPut(template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapPut(template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewarePut(template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewarePut(template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapPut(template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: handler);
    }
    // delegate closure overload
    public func MapPut(template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Func<Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapVerb(verb : dotnet.System.String, template : dotnet.System.String, handler : dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, handler: handler);
    }
    // delegate closure overload
    public func MapVerb(verb : dotnet.System.String, template : dotnet.System.String, handler : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest>, Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpResponse>, Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteData>) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try dotnet.System.Func_4<aspnetcore.Microsoft.AspNetCore.Http.HttpRequest,aspnetcore.Microsoft.AspNetCore.Http.HttpResponse,aspnetcore.Microsoft.AspNetCore.Routing.RouteData,dotnet.System.Threading.Tasks.Task>(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, Microsoft.AspNetCore.Http.RequestDelegate)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapVerb(verb : dotnet.System.String, template : dotnet.System.String, handler : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, handler: handler);
    }
    // delegate closure overload
    public func MapVerb(verb : dotnet.System.String, template : dotnet.System.String, handler : @escaping (aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_handler = try aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate(handler);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, handler: del_handler);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareVerb(Microsoft.AspNetCore.Routing.IRouteBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Builder.IApplicationBuilder>)
extension Microsoft_AspNetCore_Routing_IRouteBuilder {
    public func MapMiddlewareVerb(verb : dotnet.System.String, template : dotnet.System.String, action : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, action: action);
    }
    // delegate closure overload
    public func MapMiddlewareVerb(verb : dotnet.System.String, template : dotnet.System.String, action : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder {
        let del_action = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder>(action);
        return try aspnetcore.Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareVerb(builder: aspnetcore.Microsoft.AspNetCore.Routing.IRouteBuilder(hndl: __copy_handle(self.get_handle())), verb: verb, template: template, action: del_action);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRouting() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Routing.RouteOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddRouting(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddRouting(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Routing.RouteOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

