// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Http
extension Microsoft.AspNetCore.Http {
// type: Microsoft.AspNetCore.Http.CookieOptions
    /**
    
            Options used to create a new cookie.
            

    */
open class CookieOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_CookieOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.#ctor
    /**
    
            Creates a default cookie with a path of '/'.
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_CookieOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Domain()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_Domain
    open func get_Domain() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_String__get_Domain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Domain(System.String)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_Domain(System.String)
    open func set_Domain(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_Domain_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_Path
    open func get_Path() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_Path(System.String)
    open func set_Path(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_Path_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_Expires()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_Expires
    open func get_Expires() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_System_Nullable_System_DateTimeOffset___get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Expires(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_Expires(System.Nullable{System.DateTimeOffset})
    open func set_Expires(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_Expires_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Secure()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_Secure
    open func get_Secure() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_bool__get_Secure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Secure(bool)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_Secure(System.Boolean)
    open func set_Secure(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_Secure_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.SameSiteMode get_SameSite()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_SameSite
    open func get_SameSite() throws -> aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_SameSiteMode__get_SameSite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: __return);
        }
    }
    // [IsSpecialName] void set_SameSite(Microsoft.AspNetCore.Http.SameSiteMode)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_SameSite(Microsoft.AspNetCore.Http.SameSiteMode)
    open func set_SameSite(value : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_SameSite_0__1__SameSiteMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HttpOnly()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_HttpOnly
    open func get_HttpOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_bool__get_HttpOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HttpOnly(bool)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_HttpOnly(System.Boolean)
    open func set_HttpOnly(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_HttpOnly_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_MaxAge()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_MaxAge
    open func get_MaxAge() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_System_Nullable_System_TimeSpan___get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_MaxAge(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_MaxAge(System.Nullable{System.TimeSpan})
    open func set_MaxAge(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_MaxAge_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEssential()
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.get_IsEssential
    open func get_IsEssential() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_CookieOptions_bool__get_IsEssential_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsEssential(bool)
// docid: M:Microsoft.AspNetCore.Http.CookieOptions.set_IsEssential(System.Boolean)
    open func set_IsEssential(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_CookieOptions_void__set_IsEssential_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the domain to associate the cookie with.
            

    */
    open var Domain : Optional<dotnet.System.String> {
        get {
            return try! get_Domain();
        }
        set(v) {
            return try! set_Domain(value: v!);
        }
    }
    /**
    
            Gets or sets the expiration date and time for the cookie.
            

    */
    open var Expires : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_Expires();
        }
        set(v) {
            return try! set_Expires(value: v!);
        }
    }
    /**
    
            Gets or sets a value that indicates whether a cookie is accessible by client-side script.
            

    */
    open var HttpOnly : Bool {
        get {
            return try! get_HttpOnly();
        }
        set(v) {
            return try! set_HttpOnly(value: v);
        }
    }
    /**
    
            Indicates if this cookie is essential for the application to function correctly. If true then
            consent policy checks may be bypassed. The default value is false.
            

    */
    open var IsEssential : Bool {
        get {
            return try! get_IsEssential();
        }
        set(v) {
            return try! set_IsEssential(value: v);
        }
    }
    /**
    
            Gets or sets the max-age for the cookie.
            

    */
    open var MaxAge : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_MaxAge();
        }
        set(v) {
            return try! set_MaxAge(value: v!);
        }
    }
    /**
    
            Gets or sets the cookie path.
            

    */
    open var Path : Optional<dotnet.System.String> {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v!);
        }
    }
    /**
    
            Gets or sets the value for the SameSite attribute of the cookie. The default value is 
            

    */
    open var SameSite : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
            return try! get_SameSite();
        }
        set(v) {
            return try! set_SameSite(value: v);
        }
    }
    /**
    
            Gets or sets a value that indicates whether to transmit the cookie using Secure Sockets Layer (SSL)--that is, over HTTPS only.
            

    */
    open var Secure : Bool {
        get {
            return try! get_Secure();
        }
        set(v) {
            return try! set_Secure(value: v);
        }
    }
} // CookieOptions


// type: Microsoft.AspNetCore.Http.IFormCollection
    /**
    
            Represents the parsed form values sent with the HttpRequest.
            

    */
open class IFormCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IFormCollection
{
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IFormCollection_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(System.String)
    /**
    
                Determines whether the  contains an element
                with the specified key.
            

    - Parameter key: 
            The key to locate in the .
            
    - Returns: 
                true if the  contains an element with
                the key; otherwise, false.
            

    */
    open func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    
               Gets the value associated with the specified key.
            

    - Parameter key: 
                The key of the value to get.
            
    - Parameter value: 
                The key of the value to get.
                When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.
            
    - Returns: 
               true if the object that implements  contains
                an element with the specified key; otherwise, false.
            

    */
    open func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Http_IFormCollection_bool__TryGetValue_0__2__String_outStringValues(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormFileCollection get_Files()
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.get_Files
    open func get_Files() throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormCollection_IFormFileCollection__get_Files_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IFormFileCollection(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.IFormCollection.get_Item(System.String)
    open func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormCollection_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
} // IFormCollection


// type: Microsoft.AspNetCore.Http.IFormFile
    /**
    
            Represents a file sent with the HttpRequest.
            

    */
open class IFormFile
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IFormFile
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IFormFile_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream OpenReadStream()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.OpenReadStream
    /**
    
            Opens the request stream for reading the uploaded file.
            

    */
    open func OpenReadStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_Stream__OpenReadStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // void CopyTo(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.IFormFile.CopyTo(System.IO.Stream)
    /**
    
            Copies the contents of the uploaded file to the  stream.
            

    - Parameter target: The stream to copy the file contents to.
    */
    open func CopyTo(target : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IFormFile_void__CopyTo_0__1__Stream(&__thrown, self.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.IFormFile.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)
    /**
    
            Asynchronously copies the contents of the uploaded file to the  stream.
            

    - Parameter target: The stream to copy the file contents to.
    - Parameter cancellationToken: 
    */
    open func CopyToAsync(target : dotnet.System.IO.Stream, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_Task__CopyToAsync_0__2__Stream_CancellationToken(&__thrown, self.get_handle(), target.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_ContentType
    open func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_ContentDisposition
    open func get_ContentDisposition() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_String__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_Length
    open func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.Http.IFormFile.get_FileName
    open func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFile_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IFormFile


// type: Microsoft.AspNetCore.Http.IFormFileCollection
    /**
    
            Represents the collection of files sent with the HttpRequest.
            

    */
open class IFormFileCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IFormFileCollection
{
    public typealias T_IReadOnlyList_1 = aspnetcore.Microsoft.AspNetCore.Http.IFormFile;
    public typealias T_IEnumerable_1 = aspnetcore.Microsoft.AspNetCore.Http.IFormFile;
    public typealias T_IReadOnlyCollection_1 = aspnetcore.Microsoft.AspNetCore.Http.IFormFile;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IFormFileCollection_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Http.IFormFile GetFile(System.String)
// docid: M:Microsoft.AspNetCore.Http.IFormFileCollection.GetFile(System.String)
    /**
    
            Gets the first file with the specified name.
            

    - Parameter name: The name of the file to get.
    - Returns: 
            The requested file, or null if it is not present.
            

    */
    open func GetFile(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFileCollection_IFormFile__GetFile_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormFile(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.IFormFile> GetFiles(System.String)
// docid: M:Microsoft.AspNetCore.Http.IFormFileCollection.GetFiles(System.String)
    /**
    
                Gets an  containing the files of the
                 with the specified name.
            

    - Parameter name: The name of the files to get.
    - Returns: 
                An  containing the files of the object
                that implements .
            

    */
    open func GetFiles(name : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFileCollection_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Http_IFormFile___GetFiles_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormFile get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.IFormFileCollection.get_Item(System.String)
    open func get_Item(name : dotnet.System.String) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormFile> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IFormFileCollection_IFormFile__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormFile(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IFormFileCollection


// type: Microsoft.AspNetCore.Http.IHeaderDictionary
    /**
    
            Represents HttpRequest and HttpResponse headers
            

    */
open class IHeaderDictionary
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IHeaderDictionary
{
    public typealias TKey_IDictionary_2 = dotnet.System.String;
    public typealias TValue_IDictionary_2 = aspnetcore.Microsoft.Extensions.Primitives.StringValues;
    public typealias T_ICollection_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>;
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IHeaderDictionary_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Nullable<System.Int64> get_ContentLength()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentLength
    open func get_ContentLength() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_System_Nullable_i64___get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentLength(System.Nullable{System.Int64})
    open func set_ContentLength(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentLength_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Accept()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Accept
    open func get_Accept() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Accept_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Accept(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Accept(Microsoft.Extensions.Primitives.StringValues)
    open func set_Accept(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Accept_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AcceptCharset()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AcceptCharset
    open func get_AcceptCharset() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AcceptCharset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptCharset(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AcceptCharset(Microsoft.Extensions.Primitives.StringValues)
    open func set_AcceptCharset(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AcceptCharset_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AcceptEncoding()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AcceptEncoding
    open func get_AcceptEncoding() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AcceptEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptEncoding(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AcceptEncoding(Microsoft.Extensions.Primitives.StringValues)
    open func set_AcceptEncoding(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AcceptEncoding_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AcceptLanguage()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AcceptLanguage
    open func get_AcceptLanguage() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AcceptLanguage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptLanguage(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AcceptLanguage(Microsoft.Extensions.Primitives.StringValues)
    open func set_AcceptLanguage(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AcceptLanguage_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AcceptRanges()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AcceptRanges
    open func get_AcceptRanges() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AcceptRanges_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AcceptRanges(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AcceptRanges(Microsoft.Extensions.Primitives.StringValues)
    open func set_AcceptRanges(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AcceptRanges_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlAllowCredentials()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlAllowCredentials
    open func get_AccessControlAllowCredentials() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlAllowCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlAllowCredentials(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlAllowCredentials(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlAllowCredentials(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlAllowCredentials_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlAllowHeaders()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlAllowHeaders
    open func get_AccessControlAllowHeaders() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlAllowHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlAllowHeaders(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlAllowHeaders(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlAllowHeaders(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlAllowHeaders_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlAllowMethods()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlAllowMethods
    open func get_AccessControlAllowMethods() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlAllowMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlAllowMethods(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlAllowMethods(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlAllowMethods(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlAllowMethods_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlAllowOrigin()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlAllowOrigin
    open func get_AccessControlAllowOrigin() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlAllowOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlAllowOrigin(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlAllowOrigin(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlAllowOrigin(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlAllowOrigin_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlExposeHeaders()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlExposeHeaders
    open func get_AccessControlExposeHeaders() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlExposeHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlExposeHeaders(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlExposeHeaders(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlExposeHeaders(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlExposeHeaders_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlMaxAge()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlMaxAge
    open func get_AccessControlMaxAge() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlMaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlMaxAge(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlMaxAge(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlMaxAge(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlMaxAge_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlRequestHeaders()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlRequestHeaders
    open func get_AccessControlRequestHeaders() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlRequestHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlRequestHeaders(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlRequestHeaders(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlRequestHeaders(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlRequestHeaders_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AccessControlRequestMethod()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AccessControlRequestMethod
    open func get_AccessControlRequestMethod() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AccessControlRequestMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessControlRequestMethod(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AccessControlRequestMethod(Microsoft.Extensions.Primitives.StringValues)
    open func set_AccessControlRequestMethod(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AccessControlRequestMethod_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Age()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Age
    open func get_Age() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Age_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Age(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Age(Microsoft.Extensions.Primitives.StringValues)
    open func set_Age(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Age_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Allow()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Allow
    open func get_Allow() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Allow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Allow(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Allow(Microsoft.Extensions.Primitives.StringValues)
    open func set_Allow(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Allow_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_AltSvc()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_AltSvc
    open func get_AltSvc() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_AltSvc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AltSvc(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_AltSvc(Microsoft.Extensions.Primitives.StringValues)
    open func set_AltSvc(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_AltSvc_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Authorization()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Authorization
    open func get_Authorization() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Authorization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Authorization(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Authorization(Microsoft.Extensions.Primitives.StringValues)
    open func set_Authorization(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Authorization_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Baggage()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Baggage
    open func get_Baggage() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Baggage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Baggage(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Baggage(Microsoft.Extensions.Primitives.StringValues)
    open func set_Baggage(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Baggage_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_CacheControl()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_CacheControl
    open func get_CacheControl() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_CacheControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CacheControl(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_CacheControl(Microsoft.Extensions.Primitives.StringValues)
    open func set_CacheControl(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_CacheControl_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Connection()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Connection
    open func get_Connection() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Connection(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Connection(Microsoft.Extensions.Primitives.StringValues)
    open func set_Connection(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Connection_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentDisposition
    open func get_ContentDisposition() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentDisposition(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentDisposition(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentDisposition(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentDisposition_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentEncoding()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentEncoding
    open func get_ContentEncoding() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentEncoding(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentEncoding(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentEncoding(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentEncoding_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentLanguage()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentLanguage
    open func get_ContentLanguage() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentLanguage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentLanguage(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentLanguage(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentLanguage(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentLanguage_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentLocation()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentLocation
    open func get_ContentLocation() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentLocation(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentLocation(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentLocation(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentLocation_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentMD5()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentMD5
    open func get_ContentMD5() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentMD5_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentMD5(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentMD5(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentMD5(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentMD5_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentRange()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentRange
    open func get_ContentRange() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentRange(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentRange(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentRange(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentRange_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentSecurityPolicy()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentSecurityPolicy
    open func get_ContentSecurityPolicy() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentSecurityPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentSecurityPolicy(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentSecurityPolicy(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentSecurityPolicy(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentSecurityPolicy_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentSecurityPolicyReportOnly()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentSecurityPolicyReportOnly
    open func get_ContentSecurityPolicyReportOnly() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentSecurityPolicyReportOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentSecurityPolicyReportOnly(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentSecurityPolicyReportOnly(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentSecurityPolicyReportOnly(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentSecurityPolicyReportOnly_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ContentType()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentType
    open func get_ContentType() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(Microsoft.Extensions.Primitives.StringValues)
    open func set_ContentType(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ContentType_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_CorrelationContext()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_CorrelationContext
    open func get_CorrelationContext() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_CorrelationContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CorrelationContext(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_CorrelationContext(Microsoft.Extensions.Primitives.StringValues)
    open func set_CorrelationContext(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_CorrelationContext_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Cookie()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Cookie
    open func get_Cookie() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookie(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Cookie(Microsoft.Extensions.Primitives.StringValues)
    open func set_Cookie(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Cookie_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Date()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Date
    open func get_Date() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Date(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Date(Microsoft.Extensions.Primitives.StringValues)
    open func set_Date(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Date_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ETag()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ETag
    open func get_ETag() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ETag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ETag(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ETag(Microsoft.Extensions.Primitives.StringValues)
    open func set_ETag(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ETag_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Expires()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Expires
    open func get_Expires() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Expires_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Expires(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Expires(Microsoft.Extensions.Primitives.StringValues)
    open func set_Expires(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Expires_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Expect()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Expect
    open func get_Expect() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Expect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Expect(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Expect(Microsoft.Extensions.Primitives.StringValues)
    open func set_Expect(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Expect_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_From()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_From
    open func get_From() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_From(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_From(Microsoft.Extensions.Primitives.StringValues)
    open func set_From(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_From_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_GrpcAcceptEncoding()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_GrpcAcceptEncoding
    open func get_GrpcAcceptEncoding() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_GrpcAcceptEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_GrpcAcceptEncoding(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_GrpcAcceptEncoding(Microsoft.Extensions.Primitives.StringValues)
    open func set_GrpcAcceptEncoding(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_GrpcAcceptEncoding_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_GrpcEncoding()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_GrpcEncoding
    open func get_GrpcEncoding() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_GrpcEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_GrpcEncoding(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_GrpcEncoding(Microsoft.Extensions.Primitives.StringValues)
    open func set_GrpcEncoding(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_GrpcEncoding_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_GrpcMessage()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_GrpcMessage
    open func get_GrpcMessage() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_GrpcMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_GrpcMessage(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_GrpcMessage(Microsoft.Extensions.Primitives.StringValues)
    open func set_GrpcMessage(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_GrpcMessage_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_GrpcStatus()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_GrpcStatus
    open func get_GrpcStatus() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_GrpcStatus_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_GrpcStatus(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_GrpcStatus(Microsoft.Extensions.Primitives.StringValues)
    open func set_GrpcStatus(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_GrpcStatus_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_GrpcTimeout()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_GrpcTimeout
    open func get_GrpcTimeout() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_GrpcTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_GrpcTimeout(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_GrpcTimeout(Microsoft.Extensions.Primitives.StringValues)
    open func set_GrpcTimeout(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_GrpcTimeout_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Host()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Host
    open func get_Host() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Host(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Host(Microsoft.Extensions.Primitives.StringValues)
    open func set_Host(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Host_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_KeepAlive()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_KeepAlive
    open func get_KeepAlive() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_KeepAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_KeepAlive(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_KeepAlive(Microsoft.Extensions.Primitives.StringValues)
    open func set_KeepAlive(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_KeepAlive_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_IfMatch()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_IfMatch
    open func get_IfMatch() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_IfMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfMatch(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_IfMatch(Microsoft.Extensions.Primitives.StringValues)
    open func set_IfMatch(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_IfMatch_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_IfModifiedSince()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_IfModifiedSince
    open func get_IfModifiedSince() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_IfModifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfModifiedSince(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_IfModifiedSince(Microsoft.Extensions.Primitives.StringValues)
    open func set_IfModifiedSince(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_IfModifiedSince_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_IfNoneMatch()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_IfNoneMatch
    open func get_IfNoneMatch() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_IfNoneMatch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfNoneMatch(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_IfNoneMatch(Microsoft.Extensions.Primitives.StringValues)
    open func set_IfNoneMatch(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_IfNoneMatch_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_IfRange()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_IfRange
    open func get_IfRange() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_IfRange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfRange(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_IfRange(Microsoft.Extensions.Primitives.StringValues)
    open func set_IfRange(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_IfRange_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_IfUnmodifiedSince()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_IfUnmodifiedSince
    open func get_IfUnmodifiedSince() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_IfUnmodifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfUnmodifiedSince(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_IfUnmodifiedSince(Microsoft.Extensions.Primitives.StringValues)
    open func set_IfUnmodifiedSince(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_IfUnmodifiedSince_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_LastModified()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_LastModified
    open func get_LastModified() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_LastModified(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_LastModified(Microsoft.Extensions.Primitives.StringValues)
    open func set_LastModified(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_LastModified_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Link()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Link
    open func get_Link() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Link_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Link(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Link(Microsoft.Extensions.Primitives.StringValues)
    open func set_Link(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Link_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Location()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Location
    open func get_Location() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Location(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Location(Microsoft.Extensions.Primitives.StringValues)
    open func set_Location(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Location_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_MaxForwards()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_MaxForwards
    open func get_MaxForwards() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_MaxForwards_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MaxForwards(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_MaxForwards(Microsoft.Extensions.Primitives.StringValues)
    open func set_MaxForwards(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_MaxForwards_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Origin()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Origin
    open func get_Origin() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Origin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Origin(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Origin(Microsoft.Extensions.Primitives.StringValues)
    open func set_Origin(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Origin_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Pragma()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Pragma
    open func get_Pragma() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Pragma_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Pragma(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Pragma(Microsoft.Extensions.Primitives.StringValues)
    open func set_Pragma(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Pragma_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ProxyAuthenticate()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ProxyAuthenticate
    open func get_ProxyAuthenticate() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ProxyAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProxyAuthenticate(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ProxyAuthenticate(Microsoft.Extensions.Primitives.StringValues)
    open func set_ProxyAuthenticate(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ProxyAuthenticate_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ProxyAuthorization()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ProxyAuthorization
    open func get_ProxyAuthorization() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ProxyAuthorization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProxyAuthorization(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ProxyAuthorization(Microsoft.Extensions.Primitives.StringValues)
    open func set_ProxyAuthorization(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ProxyAuthorization_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_ProxyConnection()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_ProxyConnection
    open func get_ProxyConnection() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_ProxyConnection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProxyConnection(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_ProxyConnection(Microsoft.Extensions.Primitives.StringValues)
    open func set_ProxyConnection(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_ProxyConnection_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Range()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Range
    open func get_Range() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Range_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Range(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Range(Microsoft.Extensions.Primitives.StringValues)
    open func set_Range(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Range_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Referer()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Referer
    open func get_Referer() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Referer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Referer(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Referer(Microsoft.Extensions.Primitives.StringValues)
    open func set_Referer(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Referer_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_RetryAfter()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_RetryAfter
    open func get_RetryAfter() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_RetryAfter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RetryAfter(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_RetryAfter(Microsoft.Extensions.Primitives.StringValues)
    open func set_RetryAfter(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_RetryAfter_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_RequestId()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_RequestId
    open func get_RequestId() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_RequestId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestId(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_RequestId(Microsoft.Extensions.Primitives.StringValues)
    open func set_RequestId(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_RequestId_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SecWebSocketAccept()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SecWebSocketAccept
    open func get_SecWebSocketAccept() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SecWebSocketAccept_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecWebSocketAccept(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SecWebSocketAccept(Microsoft.Extensions.Primitives.StringValues)
    open func set_SecWebSocketAccept(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SecWebSocketAccept_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SecWebSocketKey()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SecWebSocketKey
    open func get_SecWebSocketKey() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SecWebSocketKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecWebSocketKey(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SecWebSocketKey(Microsoft.Extensions.Primitives.StringValues)
    open func set_SecWebSocketKey(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SecWebSocketKey_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SecWebSocketProtocol()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SecWebSocketProtocol
    open func get_SecWebSocketProtocol() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SecWebSocketProtocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecWebSocketProtocol(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SecWebSocketProtocol(Microsoft.Extensions.Primitives.StringValues)
    open func set_SecWebSocketProtocol(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SecWebSocketProtocol_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SecWebSocketVersion()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SecWebSocketVersion
    open func get_SecWebSocketVersion() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SecWebSocketVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecWebSocketVersion(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SecWebSocketVersion(Microsoft.Extensions.Primitives.StringValues)
    open func set_SecWebSocketVersion(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SecWebSocketVersion_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SecWebSocketExtensions()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SecWebSocketExtensions
    open func get_SecWebSocketExtensions() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SecWebSocketExtensions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecWebSocketExtensions(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SecWebSocketExtensions(Microsoft.Extensions.Primitives.StringValues)
    open func set_SecWebSocketExtensions(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SecWebSocketExtensions_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Server()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Server
    open func get_Server() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Server_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Server(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Server(Microsoft.Extensions.Primitives.StringValues)
    open func set_Server(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Server_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_SetCookie()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_SetCookie
    open func get_SetCookie() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_SetCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SetCookie(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_SetCookie(Microsoft.Extensions.Primitives.StringValues)
    open func set_SetCookie(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_SetCookie_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_StrictTransportSecurity()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_StrictTransportSecurity
    open func get_StrictTransportSecurity() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_StrictTransportSecurity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StrictTransportSecurity(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_StrictTransportSecurity(Microsoft.Extensions.Primitives.StringValues)
    open func set_StrictTransportSecurity(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_StrictTransportSecurity_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_TE()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_TE
    open func get_TE() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_TE_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TE(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_TE(Microsoft.Extensions.Primitives.StringValues)
    open func set_TE(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_TE_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Trailer()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Trailer
    open func get_Trailer() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Trailer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Trailer(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Trailer(Microsoft.Extensions.Primitives.StringValues)
    open func set_Trailer(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Trailer_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_TransferEncoding()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_TransferEncoding
    open func get_TransferEncoding() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_TransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TransferEncoding(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_TransferEncoding(Microsoft.Extensions.Primitives.StringValues)
    open func set_TransferEncoding(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_TransferEncoding_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Translate()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Translate
    open func get_Translate() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Translate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Translate(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Translate(Microsoft.Extensions.Primitives.StringValues)
    open func set_Translate(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Translate_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_TraceParent()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_TraceParent
    open func get_TraceParent() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_TraceParent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceParent(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_TraceParent(Microsoft.Extensions.Primitives.StringValues)
    open func set_TraceParent(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_TraceParent_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_TraceState()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_TraceState
    open func get_TraceState() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_TraceState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceState(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_TraceState(Microsoft.Extensions.Primitives.StringValues)
    open func set_TraceState(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_TraceState_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Upgrade()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Upgrade
    open func get_Upgrade() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Upgrade_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Upgrade(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Upgrade(Microsoft.Extensions.Primitives.StringValues)
    open func set_Upgrade(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Upgrade_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_UpgradeInsecureRequests()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_UpgradeInsecureRequests
    open func get_UpgradeInsecureRequests() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_UpgradeInsecureRequests_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UpgradeInsecureRequests(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_UpgradeInsecureRequests(Microsoft.Extensions.Primitives.StringValues)
    open func set_UpgradeInsecureRequests(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_UpgradeInsecureRequests_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_UserAgent()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_UserAgent
    open func get_UserAgent() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_UserAgent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UserAgent(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_UserAgent(Microsoft.Extensions.Primitives.StringValues)
    open func set_UserAgent(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_UserAgent_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Vary()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Vary
    open func get_Vary() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Vary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Vary(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Vary(Microsoft.Extensions.Primitives.StringValues)
    open func set_Vary(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Vary_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Via()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Via
    open func get_Via() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Via_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Via(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Via(Microsoft.Extensions.Primitives.StringValues)
    open func set_Via(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Via_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Warning()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Warning
    open func get_Warning() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Warning_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Warning(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Warning(Microsoft.Extensions.Primitives.StringValues)
    open func set_Warning(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Warning_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_WebSocketSubProtocols()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_WebSocketSubProtocols
    open func get_WebSocketSubProtocols() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_WebSocketSubProtocols_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WebSocketSubProtocols(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_WebSocketSubProtocols(Microsoft.Extensions.Primitives.StringValues)
    open func set_WebSocketSubProtocols(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_WebSocketSubProtocols_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_WWWAuthenticate()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_WWWAuthenticate
    open func get_WWWAuthenticate() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_WWWAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WWWAuthenticate(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_WWWAuthenticate(Microsoft.Extensions.Primitives.StringValues)
    open func set_WWWAuthenticate(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_WWWAuthenticate_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XContentTypeOptions()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XContentTypeOptions
    open func get_XContentTypeOptions() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XContentTypeOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XContentTypeOptions(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XContentTypeOptions(Microsoft.Extensions.Primitives.StringValues)
    open func set_XContentTypeOptions(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XContentTypeOptions_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XFrameOptions()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XFrameOptions
    open func get_XFrameOptions() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XFrameOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XFrameOptions(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XFrameOptions(Microsoft.Extensions.Primitives.StringValues)
    open func set_XFrameOptions(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XFrameOptions_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XPoweredBy()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XPoweredBy
    open func get_XPoweredBy() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XPoweredBy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XPoweredBy(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XPoweredBy(Microsoft.Extensions.Primitives.StringValues)
    open func set_XPoweredBy(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XPoweredBy_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XRequestedWith()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XRequestedWith
    open func get_XRequestedWith() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XRequestedWith_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XRequestedWith(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XRequestedWith(Microsoft.Extensions.Primitives.StringValues)
    open func set_XRequestedWith(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XRequestedWith_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XUACompatible()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XUACompatible
    open func get_XUACompatible() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XUACompatible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XUACompatible(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XUACompatible(Microsoft.Extensions.Primitives.StringValues)
    open func set_XUACompatible(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XUACompatible_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_XXSSProtection()
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_XXSSProtection
    open func get_XXSSProtection() throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_XXSSProtection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_XXSSProtection(Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_XXSSProtection(Microsoft.Extensions.Primitives.StringValues)
    open func set_XXSSProtection(value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_XXSSProtection_0__1__StringValues(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.get_Item(System.String)
    open func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IHeaderDictionary_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.String, Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IHeaderDictionary.set_Item(System.String,Microsoft.Extensions.Primitives.StringValues)
    open func set_Item(key : dotnet.System.String, value : aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IHeaderDictionary_void__set_Item_0__2__String_StringValues(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHeaderDictionary


// type: Microsoft.AspNetCore.Http.IQueryCollection
    /**
    
                Represents the HttpRequest query string collection
            

    */
open class IQueryCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IQueryCollection
{
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IQueryCollection_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.IQueryCollection.ContainsKey(System.String)
    /**
    
                Determines whether the  contains an element
                with the specified key.
            

    - Parameter key: 
            The key to locate in the .
            
    - Returns: 
                true if the  contains an element with
                the key; otherwise, false.
            

    */
    open func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IQueryCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref Microsoft.Extensions.Primitives.StringValues)
// docid: M:Microsoft.AspNetCore.Http.IQueryCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)
    /**
    
               Gets the value associated with the specified key.
            

    - Parameter key: 
                The key of the value to get.
            
    - Parameter value: 
                The key of the value to get.
                When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.
            
    - Returns: 
               true if the object that implements  contains
                an element with the specified key; otherwise, false.
            

    */
    open func TryGetValue(key : dotnet.System.String, value : inout aspnetcore.Microsoft.Extensions.Primitives.StringValues) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Http_IQueryCollection_bool__TryGetValue_0__2__String_outStringValues(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.IQueryCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IQueryCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.IQueryCollection.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IQueryCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Primitives.StringValues get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.IQueryCollection.get_Item(System.String)
    open func get_Item(key : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Primitives.StringValues {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IQueryCollection_StringValues__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Primitives.StringValues(hndl : __return);
        }
    }
} // IQueryCollection


// type: Microsoft.AspNetCore.Http.IRequestCookieCollection
    /**
    
            Represents the HttpRequest cookie collection
            

    */
open class IRequestCookieCollection
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IRequestCookieCollection
{
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IRequestCookieCollection_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Http.IRequestCookieCollection.ContainsKey(System.String)
    /**
    
                Determines whether the  contains an element
                with the specified key.
            

    - Parameter key: 
            The key to locate in the .
            
    - Returns: 
                true if the  contains an element with
                the key; otherwise, false.
            

    */
    open func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IRequestCookieCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.String)
// docid: M:Microsoft.AspNetCore.Http.IRequestCookieCollection.TryGetValue(System.String,System.String@)
    /**
    
               Gets the value associated with the specified key.
            

    - Parameter key: 
                The key of the value to get.
            
    - Parameter value: 
                The key of the value to get.
                When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.
            
    - Returns: 
               true if the object that implements  contains
                an element with the specified key; otherwise, false.
            

    */
    open func TryGetValue(key : dotnet.System.String, value : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Http_IRequestCookieCollection_bool__TryGetValue_0__2__String_outString(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.String(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Http.IRequestCookieCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IRequestCookieCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.IRequestCookieCollection.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IRequestCookieCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.IRequestCookieCollection.get_Item(System.String)
    open func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_IRequestCookieCollection_String__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRequestCookieCollection


// type: Microsoft.AspNetCore.Http.IResponseCookies
    /**
    
            A wrapper for the response Set-Cookie header.
            

    */
open class IResponseCookies
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_IResponseCookies
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_IResponseCookies_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Append(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.IResponseCookies.Append(System.String,System.String)
    /**
    
            Add a new cookie and value.
            

    - Parameter key: Name of the new cookie.
    - Parameter value: Value of the new cookie.
    */
    open func Append(key : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IResponseCookies_void__Append_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Append(System.String, System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Http.IResponseCookies.Append(System.String,System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Add a new cookie.
            

    - Parameter key: Name of the new cookie.
    - Parameter value: Value of the new cookie.
    - Parameter options:  included in the new cookie setting.
    */
    open func Append(key : dotnet.System.String, value : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IResponseCookies_void__Append_0__3__String_String_CookieOptions(&__thrown, self.get_handle(), key.get_handle(), value.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (parm span other): void Append(System.ReadOnlySpan<System.Collections.Generic.KeyValuePair<System.String,System.String>>, Microsoft.AspNetCore.Http.CookieOptions)
    // void Delete(System.String)
// docid: M:Microsoft.AspNetCore.Http.IResponseCookies.Delete(System.String)
    /**
    
            Sets an expired cookie.
            

    - Parameter key: Name of the cookie to expire.
    */
    open func Delete(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IResponseCookies_void__Delete_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Delete(System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Http.IResponseCookies.Delete(System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Sets an expired cookie.
            

    - Parameter key: Name of the cookie to expire.
    - Parameter options: 
             used to discriminate the particular cookie to expire. The
             and  values are especially important.
            
    */
    open func Delete(key : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_IResponseCookies_void__Delete_0__2__String_CookieOptions(&__thrown, self.get_handle(), key.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IResponseCookies


// type: Microsoft.AspNetCore.Http.ISession
    /**
    
            Stores user data while the user browses a web application. Session state uses a store maintained by the application
            to persist data across requests from a client. The session data is backed by a cache and considered ephemeral data.
            

    */
open class ISession
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_ISession
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_ISession_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task LoadAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.ISession.LoadAsync(System.Threading.CancellationToken)
    /**
    
            Load the session from the data store. This may throw if the data store is unavailable.
            

    - Returns: 

    */
    open func LoadAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ISession_Task__LoadAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task CommitAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.ISession.CommitAsync(System.Threading.CancellationToken)
    /**
    
            Store the session in the data store. This may throw if the data store is unavailable.
            

    - Returns: 

    */
    open func CommitAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ISession_Task__CommitAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // bool TryGetValue(System.String, ref System.Byte[])
// docid: M:Microsoft.AspNetCore.Http.ISession.TryGetValue(System.String,System.Byte[]@)
    /**
    
            Retrieve the value of the given key, if present.
            

    - Parameter key: 
    - Parameter value: 
    - Returns: The retrieved value.

    */
    open func TryGetValue(key : dotnet.System.String, value : inout Optional<dotnet.System_Arr<Swift.UInt8>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Http_ISession_bool__TryGetValue_0__2__String_outu8Array(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System_Arr<Swift.UInt8>(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Set(System.String, System.Byte[])
// docid: M:Microsoft.AspNetCore.Http.ISession.Set(System.String,System.Byte[])
    /**
    
            Set the given key and value in the current session. This will throw if the session
            was not established prior to sending the response.
            

    - Parameter key: 
    - Parameter value: 
    */
    open func Set(key : dotnet.System.String, value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ISession_void__Set_0__2__String_u8Array(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:Microsoft.AspNetCore.Http.ISession.Remove(System.String)
    /**
    
            Remove the given key from the session if present.
            

    - Parameter key: 
    */
    open func Remove(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ISession_void__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Http.ISession.Clear
    /**
    
            Remove all entries from the current session, if any.
            The session cookie is not removed.
            

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_ISession_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsAvailable()
// docid: M:Microsoft.AspNetCore.Http.ISession.get_IsAvailable
    open func get_IsAvailable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ISession_bool__get_IsAvailable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Http.ISession.get_Id
    open func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ISession_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Http.ISession.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_ISession_System_Collections_Generic_IEnumerable_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ISession


// type: Microsoft.AspNetCore.Http.SameSiteMode
    /**
    
            Used to set the SameSite field on response cookies to indicate if those cookies should be included by the client on future "same-site" or "cross-site" requests.
            RFC Draft: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.1
            

    */
public struct SameSiteMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_SameSiteMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Http.SameSiteMode Unspecified
    /**
    No SameSite field will be set, the client should follow its default cookie policy.

    */
    public static var Unspecified : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: Microsoft_AspNetCore_Http_SameSiteMode_get_Unspecified());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.SameSiteMode None
    /**
    Indicates the client should disable same-site restrictions.

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: Microsoft_AspNetCore_Http_SameSiteMode_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.SameSiteMode Lax
    /**
    Indicates the client should send the cookie with "same-site" requests, and with "cross-site" top-level navigations.

    */
    public static var Lax : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: Microsoft_AspNetCore_Http_SameSiteMode_get_Lax());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.SameSiteMode Strict
    /**
    Indicates the client should only send the cookie with "same-site" requests.

    */
    public static var Strict : aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.SameSiteMode(val: Microsoft_AspNetCore_Http_SameSiteMode_get_Strict());
            return __return;
        }
    }
} // SameSiteMode


// type: Microsoft.AspNetCore.Http.WebSocketAcceptContext
    /**
    
            A context for negotiating a websocket upgrade.
            

    */
open class WebSocketAcceptContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_WebSocketAcceptContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Http_WebSocketAcceptContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_SubProtocol()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.get_SubProtocol
    open func get_SubProtocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketAcceptContext_String__get_SubProtocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SubProtocol(System.String)
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.set_SubProtocol(System.String)
    open func set_SubProtocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_WebSocketAcceptContext_void__set_SubProtocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_KeepAliveInterval()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.get_KeepAliveInterval
    open func get_KeepAliveInterval() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketAcceptContext_System_Nullable_System_TimeSpan___get_KeepAliveInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_KeepAliveInterval(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.set_KeepAliveInterval(System.Nullable{System.TimeSpan})
    open func set_KeepAliveInterval(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_WebSocketAcceptContext_void__set_KeepAliveInterval_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_DangerousEnableCompression()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.get_DangerousEnableCompression
    open func get_DangerousEnableCompression() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketAcceptContext_bool__get_DangerousEnableCompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DangerousEnableCompression(bool)
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.set_DangerousEnableCompression(System.Boolean)
    open func set_DangerousEnableCompression(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_WebSocketAcceptContext_void__set_DangerousEnableCompression_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_DisableServerContextTakeover()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.get_DisableServerContextTakeover
    open func get_DisableServerContextTakeover() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketAcceptContext_bool__get_DisableServerContextTakeover_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DisableServerContextTakeover(bool)
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.set_DisableServerContextTakeover(System.Boolean)
    open func set_DisableServerContextTakeover(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_WebSocketAcceptContext_void__set_DisableServerContextTakeover_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ServerMaxWindowBits()
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.get_ServerMaxWindowBits
    open func get_ServerMaxWindowBits() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_WebSocketAcceptContext_i32__get_ServerMaxWindowBits_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ServerMaxWindowBits(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.WebSocketAcceptContext.set_ServerMaxWindowBits(System.Int32)
    open func set_ServerMaxWindowBits(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_WebSocketAcceptContext_void__set_ServerMaxWindowBits_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Enables support for the 'permessage-deflate' WebSocket extension.
            Be aware that enabling compression over encrypted connections makes the application subject to CRIME/BREACH type attacks.
            It is strongly advised to turn off compression when sending data containing secrets by
            specifying  when sending such messages.
            

    */
    open var DangerousEnableCompression : Bool {
        get {
            return try! get_DangerousEnableCompression();
        }
        set(v) {
            return try! set_DangerousEnableCompression(value: v);
        }
    }
    /**
    
            Disables server context takeover when using compression.
            This setting reduces the memory overhead of compression at the cost of a potentially worse compression ratio.
            

    */
    open var DisableServerContextTakeover : Bool {
        get {
            return try! get_DisableServerContextTakeover();
        }
        set(v) {
            return try! set_DisableServerContextTakeover(value: v);
        }
    }
    /**
    
            The interval to send pong frames. This is a heart-beat that keeps the connection alive.
            

    */
    open var KeepAliveInterval : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_KeepAliveInterval();
        }
        set(v) {
            return try! set_KeepAliveInterval(value: v!);
        }
    }
    /**
    
            Sets the maximum base-2 logarithm of the LZ77 sliding window size that can be used for compression.
            This setting reduces the memory overhead of compression at the cost of a potentially worse compression ratio.
            

    */
    open var ServerMaxWindowBits : Swift.Int32 {
        get {
            return try! get_ServerMaxWindowBits();
        }
        set(v) {
            return try! set_ServerMaxWindowBits(value: v);
        }
    }
    /**
    
            Gets or sets the subprotocol being negotiated.
            

    */
    open var SubProtocol : Optional<dotnet.System.String> {
        get {
            return try! get_SubProtocol();
        }
        set(v) {
            return try! set_SubProtocol(value: v!);
        }
    }
} // WebSocketAcceptContext


}
// Microsoft.AspNetCore.Http.Features
extension Microsoft.AspNetCore.Http.Features {
// type: Microsoft.AspNetCore.Http.Features.HttpsCompressionMode
    /**
    
            Use to dynamically control response compression for HTTPS requests.
            

    */
public struct HttpsCompressionMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_HttpsCompressionMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Http.Features.HttpsCompressionMode Default
    /**
    
            No value has been specified, use the configured defaults.
            

    */
    public static var Default : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode(val: Microsoft_AspNetCore_Http_Features_HttpsCompressionMode_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.Features.HttpsCompressionMode DoNotCompress
    /**
    
            Opts out of compression over HTTPS. Enabling compression on HTTPS requests for remotely manipulable content
            may expose security problems.
            

    */
    public static var DoNotCompress : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode(val: Microsoft_AspNetCore_Http_Features_HttpsCompressionMode_get_DoNotCompress());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.Features.HttpsCompressionMode Compress
    /**
    
            Opts into compression over HTTPS. Enabling compression on HTTPS requests for remotely manipulable content
            may expose security problems.
            

    */
    public static var Compress : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode(val: Microsoft_AspNetCore_Http_Features_HttpsCompressionMode_get_Compress());
            return __return;
        }
    }
} // HttpsCompressionMode


// type: Microsoft.AspNetCore.Http.Features.IBadRequestExceptionFeature
    /**
    
            Provides information about rejected HTTP requests.
            

    */
open class IBadRequestExceptionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IBadRequestExceptionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IBadRequestExceptionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Exception get_Error()
// docid: M:Microsoft.AspNetCore.Http.Features.IBadRequestExceptionFeature.get_Error
    open func get_Error() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IBadRequestExceptionFeature_Exception__get_Error_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IBadRequestExceptionFeature


// type: Microsoft.AspNetCore.Http.Features.IFormFeature
    /**
    
            Allows reading the request body as a HTTP form.
            

    */
open class IFormFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IFormFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IFormFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Http.IFormCollection ReadForm()
// docid: M:Microsoft.AspNetCore.Http.Features.IFormFeature.ReadForm
    /**
    
            Parses the request body as a form.
            
            If the request body has not been previously read, this API performs a synchronous (blocking) read
            on the HTTP input stream which may be unsupported or can adversely affect application performance.
            Consider using  instead.
            
            

    - Returns: The .

    */
    open func ReadForm() throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFormFeature_IFormCollection__ReadForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IFormCollection(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.IFormCollection> ReadFormAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.IFormFeature.ReadFormAsync(System.Threading.CancellationToken)
    /**
    
            Parses the request body as a form.
            

    - Parameter cancellationToken: 
    - Returns: 

    */
    open func ReadFormAsync(cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> aspnetcore.Microsoft.AspNetCore.Http.IFormCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFormFeature_System_Threading_Tasks_Task_Microsoft_AspNetCore_Http_IFormCollection___ReadFormAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] bool get_HasFormContentType()
// docid: M:Microsoft.AspNetCore.Http.Features.IFormFeature.get_HasFormContentType
    open func get_HasFormContentType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFormFeature_bool__get_HasFormContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IFormCollection get_Form()
// docid: M:Microsoft.AspNetCore.Http.Features.IFormFeature.get_Form
    open func get_Form() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IFormFeature_IFormCollection__get_Form_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.IFormCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Form(Microsoft.AspNetCore.Http.IFormCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.IFormFeature.set_Form(Microsoft.AspNetCore.Http.IFormCollection)
    open func set_Form(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.IFormCollection>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IFormFeature_void__set_Form_0__1__IFormCollection(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IFormFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature
    /**
    
            Controls the IO behavior for the  and 
            

    */
open class IHttpBodyControlFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpBodyControlFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpBodyControlFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_AllowSynchronousIO()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.get_AllowSynchronousIO
    open func get_AllowSynchronousIO() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpBodyControlFeature_bool__get_AllowSynchronousIO_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowSynchronousIO(bool)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.set_AllowSynchronousIO(System.Boolean)
    open func set_AllowSynchronousIO(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpBodyControlFeature_void__set_AllowSynchronousIO_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpBodyControlFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature
    /**
    
            Information regarding the TCP/IP connection carrying the request.
            

    */
open class IHttpConnectionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_ConnectionId()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_ConnectionId
    open func get_ConnectionId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_String__get_ConnectionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ConnectionId(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_ConnectionId(System.String)
    open func set_ConnectionId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_void__set_ConnectionId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_RemoteIpAddress()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemoteIpAddress
    open func get_RemoteIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_IPAddress__get_RemoteIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RemoteIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemoteIpAddress(System.Net.IPAddress)
    open func set_RemoteIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_void__set_RemoteIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_LocalIpAddress()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalIpAddress
    open func get_LocalIpAddress() throws -> Optional<dotnet.System.Net.IPAddress> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_IPAddress__get_LocalIpAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IPAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LocalIpAddress(System.Net.IPAddress)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalIpAddress(System.Net.IPAddress)
    open func set_LocalIpAddress(value : Optional<dotnet.System.Net.IPAddress>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_void__set_LocalIpAddress_0__1__IPAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_RemotePort()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemotePort
    open func get_RemotePort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_i32__get_RemotePort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_RemotePort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemotePort(System.Int32)
    open func set_RemotePort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_void__set_RemotePort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LocalPort()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalPort
    open func get_LocalPort() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_i32__get_LocalPort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_LocalPort(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalPort(System.Int32)
    open func set_LocalPort(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature_void__set_LocalPort_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpConnectionFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature
    /**
    
            Feature to inspect and modify the maximum request body size for a single request.
            

    */
open class IHttpMaxRequestBodySizeFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_MaxRequestBodySize()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_MaxRequestBodySize
    open func get_MaxRequestBodySize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature_System_Nullable_i64___get_MaxRequestBodySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxRequestBodySize(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.set_MaxRequestBodySize(System.Nullable{System.Int64})
    open func set_MaxRequestBodySize(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature_void__set_MaxRequestBodySize_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpMaxRequestBodySizeFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature
    /**
    
            Used to indicate if the request can have a body.
            

    */
open class IHttpRequestBodyDetectionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpRequestBodyDetectionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpRequestBodyDetectionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_CanHaveBody()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestBodyDetectionFeature.get_CanHaveBody
    open func get_CanHaveBody() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestBodyDetectionFeature_bool__get_CanHaveBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IHttpRequestBodyDetectionFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpRequestFeature
    /**
    
            Contains the details of a given request. These properties should all be mutable.
            None of these properties should ever be set to null.
            

    */
open class IHttpRequestFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpRequestFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Protocol
    open func get_Protocol() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Protocol(System.String)
    open func set_Protocol(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Scheme()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Scheme
    open func get_Scheme() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_Scheme_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Scheme(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Scheme(System.String)
    open func set_Scheme(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Scheme_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Method
    open func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Method(System.String)
    open func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PathBase()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_PathBase
    open func get_PathBase() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_PathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_PathBase(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_PathBase(System.String)
    open func set_PathBase(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_PathBase_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Path
    open func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Path(System.String)
    open func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_QueryString()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_QueryString
    open func get_QueryString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_QueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QueryString(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_QueryString(System.String)
    open func set_QueryString(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_QueryString_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RawTarget()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_RawTarget
    open func get_RawTarget() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_String__get_RawTarget_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RawTarget(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_RawTarget(System.String)
    open func set_RawTarget(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_RawTarget_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open func set_Headers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Headers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Body
    open func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Body(System.IO.Stream)
    open func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestFeature_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpRequestFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature
    /**
    
            Feature to uniquely identify a request.
            

    */
open class IHttpRequestIdentifierFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_TraceIdentifier()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.get_TraceIdentifier
    open func get_TraceIdentifier() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature_String__get_TraceIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TraceIdentifier(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.set_TraceIdentifier(System.String)
    open func set_TraceIdentifier(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature_void__set_TraceIdentifier_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpRequestIdentifierFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature
    /**
    
            Provides access to the HTTP request lifetime operations.
            

    */
open class IHttpRequestLifetimeFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Abort()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.Abort
    /**
    
            Forcefully aborts the request if it has not already completed. This will result in
            RequestAborted being triggered.
            

    */
    open func Abort() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_RequestAborted()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.get_RequestAborted
    open func get_RequestAborted() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature_CancellationToken__get_RequestAborted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestAborted(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.set_RequestAborted(System.Threading.CancellationToken)
    open func set_RequestAborted(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature_void__set_RequestAborted_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpRequestLifetimeFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature
    /**
    
            This feature exposes HTTP request trailer headers, either for HTTP/1.1 chunked bodies or HTTP/2 trailing headers.
            

    */
open class IHttpRequestTrailersFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpRequestTrailersFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpRequestTrailersFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_Available()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature.get_Available
    open func get_Available() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestTrailersFeature_bool__get_Available_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Trailers()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpRequestTrailersFeature.get_Trailers
    open func get_Trailers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpRequestTrailersFeature_IHeaderDictionary__get_Trailers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
} // IHttpRequestTrailersFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpResetFeature
    /**
    
            Used to send reset messages for protocols that support them such as HTTP/2 or HTTP/3.
            

    */
open class IHttpResetFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpResetFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpResetFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Reset(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(System.Int32)
    /**
    
            Send a reset message with the given error code. The request will be considered aborted.
            

    - Parameter errorCode: The error code to send in the reset message.
    */
    open func Reset(errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResetFeature_void__Reset_0__1__i32(&__thrown, self.get_handle(), errorCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpResetFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature
    /**
    
            An aggregate of the different ways to interact with the response body.
            

    */
open class IHttpResponseBodyFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void DisableBuffering()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.DisableBuffering
    /**
    
            Opts out of write buffering for the response.
            

    */
    open func DisableBuffering() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_void__DisableBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.StartAsync(System.Threading.CancellationToken)
    /**
    
            Starts the response by calling OnStarting() and making headers unmodifiable.
            

    */
    open func StartAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_Task__StartAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task SendFileAsync(System.String, System.Int64, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.SendFileAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Sends the requested file in the response body. A response may include multiple writes.
            

    - Parameter path: The full disk path to the file.
    - Parameter offset: The offset in the file to start at.
    - Parameter count: The number of bytes to send, or null to send the remainder of the file.
    - Parameter cancellationToken: A  used to abort the transmission.
    - Returns: 

    */
    open func SendFileAsync(path : dotnet.System.String, offset : Swift.Int64, count : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_Task__SendFileAsync_0__4__String_i64_System_Nullable_i64__CancellationToken(&__thrown, self.get_handle(), path.get_handle(), offset, (count != nil) ? System_Int64_box(count!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task CompleteAsync()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.CompleteAsync
    /**
    
            Flush any remaining response headers, data, or trailers.
            This may throw if the response is in an invalid state such as a Content-Length mismatch.
            

    - Returns: 

    */
    open func CompleteAsync() async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_Task__CompleteAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // [IsSpecialName] System.IO.Stream get_Stream()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Stream
    open func get_Stream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_Stream__get_Stream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.Pipelines.PipeWriter get_Writer()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseBodyFeature.get_Writer
    open func get_Writer() throws -> aspnetcore.System.IO.Pipelines.PipeWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature_PipeWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeWriter(hndl : __return);
        }
    }
} // IHttpResponseBodyFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpResponseFeature
    /**
    
            Represents the fields and state of an HTTP response.
            

    */
open class IHttpResponseFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpResponseFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnStarting(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnStarting(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    
            Registers a callback to be invoked just before the response starts.
            
            This is the last chance to modify the , , or
            .
            
            

    - Parameter callback: The callback to invoke when starting the response.
    - Parameter state: The state to pass into the callback.
    */
    open func OnStarting(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__OnStarting_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnStarting(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnStarting(callback: del_callback, state: state);
    }
    // void OnCompleted(System.Func<System.Object,System.Threading.Tasks.Task>, System.Object)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnCompleted(System.Func{System.Object,System.Threading.Tasks.Task},System.Object)
    /**
    
            Registers a callback to be invoked after a response has fully completed. This is
            intended for resource cleanup.
            

    - Parameter callback: The callback to invoke after the response has completed.
    - Parameter state: The state to pass into the callback.
    */
    open func OnCompleted(callback : dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>, state : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__OnCompleted_0__2__System_Func_object_Task__Object(&__thrown, self.get_handle(), callback.get_handle(), state.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func OnCompleted(callback : @escaping (dotnet.System.Object) throws -> dotnet.System.Threading.Tasks.Task, state : dotnet.System.Object) throws {
        let del_callback = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Threading.Tasks.Task>(callback);
        return try OnCompleted(callback: del_callback, state: state);
    }
    // [IsSpecialName] System.Int32 get_StatusCode()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_StatusCode
    open func get_StatusCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_i32__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Int32)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_StatusCode(System.Int32)
    open func set_StatusCode(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__set_StatusCode_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReasonPhrase()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_ReasonPhrase
    open func get_ReasonPhrase() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_String__get_ReasonPhrase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReasonPhrase(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_ReasonPhrase(System.String)
    open func set_ReasonPhrase(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__set_ReasonPhrase_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Headers()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Headers
    open func get_Headers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_IHeaderDictionary__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Headers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open func set_Headers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__set_Headers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Body
    open func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Body(System.IO.Stream)
    open func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasStarted()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_HasStarted
    open func get_HasStarted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseFeature_bool__get_HasStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IHttpResponseFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature
    /**
    
            Provides access to response trailers.
            
            Response trailers allow for additional headers to be sent at the end of an HTTP/1.1 (chunked) or HTTP/2 response.
            For more details, see RFC7230.
            
            

    */
open class IHttpResponseTrailersFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpResponseTrailersFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpResponseTrailersFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.IHeaderDictionary get_Trailers()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.get_Trailers
    open func get_Trailers() throws -> aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpResponseTrailersFeature_IHeaderDictionary__get_Trailers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Trailers(Microsoft.AspNetCore.Http.IHeaderDictionary)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature.set_Trailers(Microsoft.AspNetCore.Http.IHeaderDictionary)
    open func set_Trailers(value : aspnetcore.Microsoft.AspNetCore.Http.IHeaderDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpResponseTrailersFeature_void__set_Trailers_0__1__IHeaderDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpResponseTrailersFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature
    /**
    
            Provides access to server upgrade features.
            

    */
open class IHttpUpgradeFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpUpgradeFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpUpgradeFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.IO.Stream> UpgradeAsync()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.UpgradeAsync
    /**
    
            Attempt to upgrade the request to an opaque, bidirectional stream. The response status code
            and headers need to be set before this is invoked. Check 
            before invoking.
            

    - Returns: 

    */
    open func UpgradeAsync() async throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpUpgradeFeature_System_Threading_Tasks_Task_System_IO_Stream___UpgradeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] bool get_IsUpgradableRequest()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.get_IsUpgradableRequest
    open func get_IsUpgradableRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpUpgradeFeature_bool__get_IsUpgradableRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IHttpUpgradeFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature
    /**
    
            Provides access to server websocket features.
            

    */
open class IHttpWebSocketFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpWebSocketFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpWebSocketFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket> AcceptAsync(Microsoft.AspNetCore.Http.WebSocketAcceptContext)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature.AcceptAsync(Microsoft.AspNetCore.Http.WebSocketAcceptContext)
    /**
    
            Attempts to upgrade the request to a . Check 
            before invoking this.
            

    - Parameter context: The .
    - Returns: A .

    */
    open func AcceptAsync(context : aspnetcore.Microsoft.AspNetCore.Http.WebSocketAcceptContext) async throws -> dotnet.System.Net.WebSockets.WebSocket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpWebSocketFeature_System_Threading_Tasks_Task_System_Net_WebSockets_WebSocket___AcceptAsync_0__1__WebSocketAcceptContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] bool get_IsWebSocketRequest()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature.get_IsWebSocketRequest
    open func get_IsWebSocketRequest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpWebSocketFeature_bool__get_IsWebSocketRequest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IHttpWebSocketFeature


// type: Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature
    /**
    
            Configures response compression behavior for HTTPS on a per-request basis.
            

    */
open class IHttpsCompressionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IHttpsCompressionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IHttpsCompressionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.Features.HttpsCompressionMode get_Mode()
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.get_Mode
    open func get_Mode() throws -> aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IHttpsCompressionFeature_HttpsCompressionMode__get_Mode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Mode(Microsoft.AspNetCore.Http.Features.HttpsCompressionMode)
// docid: M:Microsoft.AspNetCore.Http.Features.IHttpsCompressionFeature.set_Mode(Microsoft.AspNetCore.Http.Features.HttpsCompressionMode)
    open func set_Mode(value : aspnetcore.Microsoft.AspNetCore.Http.Features.HttpsCompressionMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IHttpsCompressionFeature_void__set_Mode_0__1__HttpsCompressionMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpsCompressionFeature


// type: Microsoft.AspNetCore.Http.Features.IItemsFeature
    /**
    
            Provides a key/value collection that can be used to share data within the scope of this request.
            

    */
open class IItemsFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IItemsFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IItemsFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Http.Features.IItemsFeature.get_Items
    open func get_Items() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IItemsFeature_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.IDictionary<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Http.Features.IItemsFeature.set_Items(System.Collections.Generic.IDictionary{System.Object,System.Object})
    open func set_Items(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IItemsFeature_void__set_Items_0__1__System_Collections_Generic_IDictionary_object_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IItemsFeature


// type: Microsoft.AspNetCore.Http.Features.IQueryFeature
    /**
    
            Provides access to the  associated with the HTTP request.
            

    */
open class IQueryFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IQueryFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IQueryFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.IQueryCollection get_Query()
// docid: M:Microsoft.AspNetCore.Http.Features.IQueryFeature.get_Query
    open func get_Query() throws -> aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IQueryFeature_IQueryCollection__get_Query_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.IQueryFeature.set_Query(Microsoft.AspNetCore.Http.IQueryCollection)
    open func set_Query(value : aspnetcore.Microsoft.AspNetCore.Http.IQueryCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IQueryFeature_void__set_Query_0__1__IQueryCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IQueryFeature


// type: Microsoft.AspNetCore.Http.Features.IRequestBodyPipeFeature
    /**
    
            Represents the HTTP request body as a .
            

    */
open class IRequestBodyPipeFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IRequestBodyPipeFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IRequestBodyPipeFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.IO.Pipelines.PipeReader get_Reader()
// docid: M:Microsoft.AspNetCore.Http.Features.IRequestBodyPipeFeature.get_Reader
    open func get_Reader() throws -> aspnetcore.System.IO.Pipelines.PipeReader {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IRequestBodyPipeFeature_PipeReader__get_Reader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.System.IO.Pipelines.PipeReader(hndl : __return);
        }
    }
} // IRequestBodyPipeFeature


// type: Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature
    /**
    
            Provides access to request cookie collection.
            

    */
open class IRequestCookiesFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.IRequestCookieCollection get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature.get_Cookies
    open func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature_IRequestCookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
// docid: M:Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature.set_Cookies(Microsoft.AspNetCore.Http.IRequestCookieCollection)
    open func set_Cookies(value : aspnetcore.Microsoft.AspNetCore.Http.IRequestCookieCollection) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature_void__set_Cookies_0__1__IRequestCookieCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRequestCookiesFeature


// type: Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature
    /**
    
            A helper for creating the response Set-Cookie header.
            

    */
open class IResponseCookiesFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IResponseCookiesFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IResponseCookiesFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.IResponseCookies get_Cookies()
// docid: M:Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature.get_Cookies
    open func get_Cookies() throws -> aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IResponseCookiesFeature_IResponseCookies__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.IResponseCookies(hndl : __return);
        }
    }
} // IResponseCookiesFeature


// type: Microsoft.AspNetCore.Http.Features.IServerVariablesFeature
    /**
    
            This feature provides access to request server variables set.
            

    */
open class IServerVariablesFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IServerVariablesFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IServerVariablesFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.get_Item(System.String)
    open func get_Item(variableName : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IServerVariablesFeature_String__get_Item_0__1__String(&__thrown, self.get_handle(), variableName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Http.Features.IServerVariablesFeature.set_Item(System.String,System.String)
    open func set_Item(variableName : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IServerVariablesFeature_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), variableName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IServerVariablesFeature


// type: Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature
    /**
    
            Provides acccess to the request-scoped .
            

    */
open class IServiceProvidersFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.IServiceProvider get_RequestServices()
// docid: M:Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.get_RequestServices
    open func get_RequestServices() throws -> dotnet.System.IServiceProvider {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature_IServiceProvider__get_RequestServices_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IServiceProvider(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RequestServices(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature.set_RequestServices(System.IServiceProvider)
    open func set_RequestServices(value : dotnet.System.IServiceProvider) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature_void__set_RequestServices_0__1__IServiceProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IServiceProvidersFeature


// type: Microsoft.AspNetCore.Http.Features.ISessionFeature
    /**
    
            Provides access to the  for the current request.
            

    */
open class ISessionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_ISessionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ISessionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Http.ISession get_Session()
// docid: M:Microsoft.AspNetCore.Http.Features.ISessionFeature.get_Session
    open func get_Session() throws -> aspnetcore.Microsoft.AspNetCore.Http.ISession {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ISessionFeature_ISession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Session(Microsoft.AspNetCore.Http.ISession)
// docid: M:Microsoft.AspNetCore.Http.Features.ISessionFeature.set_Session(Microsoft.AspNetCore.Http.ISession)
    open func set_Session(value : aspnetcore.Microsoft.AspNetCore.Http.ISession) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ISessionFeature_void__set_Session_0__1__ISession(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ISessionFeature


// type: Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature
    /**
    
            Provides access to TLS features associated with the current HTTP connection.
            

    */
open class ITlsConnectionFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.GetClientCertificateAsync(System.Threading.CancellationToken)
    /**
    
            Asynchronously retrieves the client certificate, if any.
            

    */
    open func GetClientCertificateAsync(cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature_System_Threading_Tasks_Task_System_Security_Cryptography_X509Certificates_X509Certificate2___GetClientCertificateAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509Certificate2 get_ClientCertificate()
// docid: M:Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.get_ClientCertificate
    open func get_ClientCertificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature_X509Certificate2__get_ClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
// docid: M:Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature.set_ClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)
    open func set_ClientCertificate(value : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature_void__set_ClientCertificate_0__1__X509Certificate2(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITlsConnectionFeature


// type: Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature
    /**
    
            Provides information regarding TLS token binding parameters.
            

    */
open class ITlsTokenBindingFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_ITlsTokenBindingFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ITlsTokenBindingFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Byte[] GetProvidedTokenBindingId()
// docid: M:Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature.GetProvidedTokenBindingId
    /**
    
            Gets the 'provided' token binding identifier associated with the request.
            

    - Returns: The token binding identifier, or null if the client did not
            supply a 'provided' token binding or valid proof of possession of the
            associated private key. The caller should treat this identifier as an
            opaque blob and should not try to parse it.

    */
    open func GetProvidedTokenBindingId() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITlsTokenBindingFeature_u8Array__GetProvidedTokenBindingId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] GetReferredTokenBindingId()
// docid: M:Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature.GetReferredTokenBindingId
    /**
    
            Gets the 'referred' token binding identifier associated with the request.
            

    - Returns: The token binding identifier, or null if the client did not
            supply a 'referred' token binding or valid proof of possession of the
            associated private key. The caller should treat this identifier as an
            opaque blob and should not try to parse it.

    */
    open func GetReferredTokenBindingId() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITlsTokenBindingFeature_u8Array__GetReferredTokenBindingId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
} // ITlsTokenBindingFeature


// type: Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature
    /**
    
            Used to query, grant, and withdraw user consent regarding the storage of user
            information related to site activity and functionality.
            

    */
open class ITrackingConsentFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void GrantConsent()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.GrantConsent
    /**
    
            Grants consent for this request. If the response has not yet started then
            this will also grant consent for future requests.
            

    */
    open func GrantConsent() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_void__GrantConsent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WithdrawConsent()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.WithdrawConsent
    /**
    
            Withdraws consent for this request. If the response has not yet started then
            this will also withdraw consent for future requests.
            

    */
    open func WithdrawConsent() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_void__WithdrawConsent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String CreateConsentCookie()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.CreateConsentCookie
    /**
    
            Creates a consent cookie for use when granting consent from a javascript client.
            

    */
    open func CreateConsentCookie() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_String__CreateConsentCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsConsentNeeded()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.get_IsConsentNeeded
    open func get_IsConsentNeeded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_bool__get_IsConsentNeeded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasConsent()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.get_HasConsent
    open func get_HasConsent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_bool__get_HasConsent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanTrack()
// docid: M:Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature.get_CanTrack
    open func get_CanTrack() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature_bool__get_CanTrack_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ITrackingConsentFeature


}
// Microsoft.AspNetCore.Http.Features.Authentication
extension Microsoft.AspNetCore.Http.Features.Authentication {
// type: Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature
    /**
    
            The HTTP authentication feature.
            

    */
open class IHttpAuthenticationFeature
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.get_User
    open func get_User() throws -> Optional<dotnet.System.Security.Claims.ClaimsPrincipal> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_User(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature.set_User(System.Security.Claims.ClaimsPrincipal)
    open func set_User(value : Optional<dotnet.System.Security.Claims.ClaimsPrincipal>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature_void__set_User_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHttpAuthenticationFeature


}





public protocol Microsoft_AspNetCore_Http_Features_Authentication_IHttpAuthenticationFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IBadRequestExceptionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IFormFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpBodyControlFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpConnectionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpMaxRequestBodySizeFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpRequestBodyDetectionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpRequestFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpRequestIdentifierFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpRequestLifetimeFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpRequestTrailersFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpResetFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpResponseBodyFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpResponseFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpResponseTrailersFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpUpgradeFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpWebSocketFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IHttpsCompressionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IItemsFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IQueryFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IRequestBodyPipeFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IRequestCookiesFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IResponseCookiesFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IServerVariablesFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_IServiceProvidersFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_ISessionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_ITlsConnectionFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_ITlsTokenBindingFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_Features_ITrackingConsentFeature
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IFormCollection
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>
{
}

public protocol Microsoft_AspNetCore_Http_IFormFile
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_IFormFileCollection
    :
    System_Collections_Generic_IReadOnlyList_1
    where
        T_IReadOnlyList_1 == aspnetcore.Microsoft.AspNetCore.Http.IFormFile
{
}

public protocol Microsoft_AspNetCore_Http_IHeaderDictionary
    :
    System_Collections_Generic_IDictionary_2
    where
        TKey_IDictionary_2 == dotnet.System.String,
        TValue_IDictionary_2 == aspnetcore.Microsoft.Extensions.Primitives.StringValues
{
}

public protocol Microsoft_AspNetCore_Http_IQueryCollection
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>
{
}

public protocol Microsoft_AspNetCore_Http_IRequestCookieCollection
    :
    System_Collections_Generic_IEnumerable_1
    where
        T_IEnumerable_1 == dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>
{
}

public protocol Microsoft_AspNetCore_Http_IResponseCookies
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Http_ISession
    :
    SGBridgeGetHandle
{
}

