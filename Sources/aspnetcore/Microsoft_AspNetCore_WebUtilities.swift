// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.WebUtilities
extension Microsoft.AspNetCore.WebUtilities {
// type: Microsoft.AspNetCore.WebUtilities.Base64UrlTextEncoder
public struct Base64UrlTextEncoder {
    // System.String Encode(System.Byte[])
// docid: M:Microsoft.AspNetCore.WebUtilities.Base64UrlTextEncoder.Encode(System.Byte[])
    /**
    
            Encodes supplied data into Base64 and replaces any URL encodable characters into non-URL encodable
            characters.
            

    - Parameter data: Data to be encoded.
    - Returns: Base64 encoded string modified with non-URL encodable characters

    */
    public static func Encode(data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_Base64UrlTextEncoder_String__Encode_0__1__u8Array(&__thrown, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Byte[] Decode(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.Base64UrlTextEncoder.Decode(System.String)
    /**
    
            Decodes supplied string by replacing the non-URL encodable characters with URL encodable characters and
            then decodes the Base64 string.
            

    - Parameter text: The string to be decoded.
    - Returns: The decoded data.

    */
    public static func Decode(text : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_Base64UrlTextEncoder_u8Array__Decode_0__1__String(&__thrown, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
} // Base64UrlTextEncoder


// type: Microsoft.AspNetCore.WebUtilities.BufferedReadStream
    /**
    
            A Stream that wraps another stream and allows reading lines.
            The data is buffered in memory.
            

    */
open class BufferedReadStream
    :
    dotnet.System.IO.Stream
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_BufferedReadStream_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.#ctor(System.IO.Stream,System.Int32)
    /**
    
            Creates a new stream.
            

    - Parameter inner: The stream to wrap.
    - Parameter bufferSize: Size of buffer in bytes.
    */
    public init(inner : dotnet.System.IO.Stream, bufferSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_ctor_0__2__Stream_i32(&__thrown, inner.get_handle(), bufferSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32, System.Buffers.ArrayPool<System.Byte>)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.#ctor(System.IO.Stream,System.Int32,System.Buffers.ArrayPool{System.Byte})
    /**
    
            Creates a new stream.
            

    - Parameter inner: The stream to wrap.
    - Parameter bufferSize: Size of buffer in bytes.
    - Parameter bytePool: ArrayPool for the buffer.
    */
    public init(inner : dotnet.System.IO.Stream, bufferSize : Swift.Int32, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_ctor_0__3__Stream_i32_System_Buffers_ArrayPool_u8_(&__thrown, inner.get_handle(), bufferSize, bytePool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int64 Seek(System.Int64, System.IO.SeekOrigin)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.Seek(System.Int64,System.IO.SeekOrigin)
    /**
    */
    open override func Seek(offset : Swift.Int64, origin : dotnet.System.IO.SeekOrigin) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_i64__Seek_0__2__i64_SeekOrigin(&__thrown, self.get_handle(), offset, origin.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void SetLength(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.SetLength(System.Int64)
    /**
    */
    open override func SetLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_BufferedReadStream_void__SetLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.Flush
    /**
    */
    open override func Flush() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_BufferedReadStream_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.FlushAsync(System.Threading.CancellationToken)
    /**
    */
    open override func FlushAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_Task__FlushAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Write(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.Write(System.Byte[],System.Int32,System.Int32)
    /**
    */
    open override func Write(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_BufferedReadStream_void__Write_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    open override func WriteAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_Task__WriteAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Int32 Read(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.Read(System.Byte[],System.Int32,System.Int32)
    /**
    */
    open override func Read(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_i32__Read_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_Threading_Tasks_Task_i32___ReadAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Int32> ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System.Memory_1<Swift.UInt8>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.ValueTask_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_Threading_Tasks_ValueTask_i32___ReadAsync_0__2__System_Memory_u8__CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // bool EnsureBuffered()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.EnsureBuffered
    /**
    
            Ensures that the buffer is not empty.
            

    - Returns: Returns true if the buffer is not empty; false otherwise.

    */
    open func EnsureBuffered() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__EnsureBuffered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> EnsureBufferedAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.EnsureBufferedAsync(System.Threading.CancellationToken)
    /**
    
            Ensures that the buffer is not empty.
            

    - Parameter cancellationToken: Cancellation token.
    - Returns: Returns true if the buffer is not empty; false otherwise.

    */
    open func EnsureBufferedAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_Threading_Tasks_Task_bool___EnsureBufferedAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool EnsureBuffered(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.EnsureBuffered(System.Int32)
    /**
    
            Ensures that a minimum amount of buffered data is available.
            

    - Parameter minCount: Minimum amount of buffered data.
    - Returns: Returns true if the minimum amount of buffered data is available; false otherwise.

    */
    open func EnsureBuffered(minCount : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__EnsureBuffered_0__1__i32(&__thrown, self.get_handle(), minCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<bool> EnsureBufferedAsync(System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.EnsureBufferedAsync(System.Int32,System.Threading.CancellationToken)
    /**
    
            Ensures that a minimum amount of buffered data is available.
            

    - Parameter minCount: Minimum amount of buffered data.
    - Parameter cancellationToken: Cancellation token.
    - Returns: Returns true if the minimum amount of buffered data is available; false otherwise.

    */
    open func EnsureBufferedAsync(minCount : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_Threading_Tasks_Task_bool___EnsureBufferedAsync_0__2__i32_CancellationToken(&__thrown, self.get_handle(), minCount, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadLine(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.ReadLine(System.Int32)
    /**
    
            Reads a line. A line is defined as a sequence of characters followed by
            a carriage return immediately followed by a line feed. The resulting string does not
            contain the terminating carriage return and line feed.
            

    - Parameter lengthLimit: Maximum allowed line length.
    - Returns: A line.

    */
    open func ReadLine(lengthLimit : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_String__ReadLine_0__1__i32(&__thrown, self.get_handle(), lengthLimit);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadLineAsync(System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.ReadLineAsync(System.Int32,System.Threading.CancellationToken)
    /**
    
            Reads a line. A line is defined as a sequence of characters followed by
            a carriage return immediately followed by a line feed. The resulting string does not
            contain the terminating carriage return and line feed.
            

    - Parameter lengthLimit: Maximum allowed line length.
    - Parameter cancellationToken: Cancellation token.
    - Returns: A line.

    */
    open func ReadLineAsync(lengthLimit : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_Threading_Tasks_Task_string___ReadLineAsync_0__2__i32_CancellationToken(&__thrown, self.get_handle(), lengthLimit, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.ArraySegment<System.Byte> get_BufferedData()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_BufferedData
    open func get_BufferedData() throws -> dotnet.System.ArraySegment_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_System_ArraySegment_u8___get_BufferedData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ArraySegment_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanRead()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_CanRead
    open override func get_CanRead() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__get_CanRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanSeek()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_CanSeek
    open override func get_CanSeek() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__get_CanSeek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanTimeout()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_CanTimeout
    open override func get_CanTimeout() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__get_CanTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanWrite()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_CanWrite
    open override func get_CanWrite() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_bool__get_CanWrite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_Length
    open override func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_Position()
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.get_Position
    open override func get_Position() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_BufferedReadStream_i64__get_Position_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Position(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.BufferedReadStream.set_Position(System.Int64)
    open override func set_Position(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_BufferedReadStream_void__set_Position_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The currently buffered data.
            

    */
    open var BufferedData : dotnet.System.ArraySegment_1<Swift.UInt8> {
        get {
            return try! get_BufferedData();
        }
    }
    /**
    */
    open override var CanRead : Bool {
        get {
            return try! get_CanRead();
        }
    }
    /**
    */
    open override var CanSeek : Bool {
        get {
            return try! get_CanSeek();
        }
    }
    /**
    */
    open override var CanTimeout : Bool {
        get {
            return try! get_CanTimeout();
        }
    }
    /**
    */
    open override var CanWrite : Bool {
        get {
            return try! get_CanWrite();
        }
    }
    /**
    */
    open override var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    */
    open override var Position : Swift.Int64 {
        get {
            return try! get_Position();
        }
        set(v) {
            return try! set_Position(value: v);
        }
    }
} // BufferedReadStream


// type: Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream
    /**
    
            A Stream that wraps another stream and enables rewinding by buffering the content as it is read.
            The content is buffered in memory up to a certain size and then spooled to a temp file on disk.
            The temp file will be deleted on Dispose.
            

    */
open class FileBufferingReadStream
    :
    dotnet.System.IO.Stream
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.#ctor(System.IO.Stream,System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The wrapping .
    - Parameter memoryThreshold: The maximum size to buffer in memory.
    */
    public init(inner : dotnet.System.IO.Stream, memoryThreshold : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ctor_0__2__Stream_i32(&__thrown, inner.get_handle(), memoryThreshold);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32, System.Nullable<System.Int64>, System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.#ctor(System.IO.Stream,System.Int32,System.Nullable{System.Int64},System.Func{System.String})
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The wrapping .
    - Parameter memoryThreshold: The maximum size to buffer in memory.
    - Parameter bufferLimit: The maximum size that will be buffered before this  throws.
    - Parameter tempFileDirectoryAccessor: Provides the temporary directory to which files are buffered to.
    */
    public init(inner : dotnet.System.IO.Stream, memoryThreshold : Swift.Int32, bufferLimit : Optional<Swift.Int64>, tempFileDirectoryAccessor : dotnet.System.Func_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ctor_0__4__Stream_i32_System_Nullable_i64__System_Func_string_(&__thrown, inner.get_handle(), memoryThreshold, (bufferLimit != nil) ? System_Int64_box(bufferLimit!) : nil, tempFileDirectoryAccessor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32, System.Nullable<System.Int64>, System.Func<System.String>, System.Buffers.ArrayPool<System.Byte>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.#ctor(System.IO.Stream,System.Int32,System.Nullable{System.Int64},System.Func{System.String},System.Buffers.ArrayPool{System.Byte})
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The wrapping .
    - Parameter memoryThreshold: The maximum size to buffer in memory.
    - Parameter bufferLimit: The maximum size that will be buffered before this  throws.
    - Parameter tempFileDirectoryAccessor: Provides the temporary directory to which files are buffered to.
    - Parameter bytePool: The  to use.
    */
    public init(inner : dotnet.System.IO.Stream, memoryThreshold : Swift.Int32, bufferLimit : Optional<Swift.Int64>, tempFileDirectoryAccessor : dotnet.System.Func_1<dotnet.System.String>, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ctor_0__5__Stream_i32_System_Nullable_i64__System_Func_string__System_Buffers_ArrayPool_u8_(&__thrown, inner.get_handle(), memoryThreshold, (bufferLimit != nil) ? System_Int64_box(bufferLimit!) : nil, tempFileDirectoryAccessor.get_handle(), bytePool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32, System.Nullable<System.Int64>, System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.#ctor(System.IO.Stream,System.Int32,System.Nullable{System.Int64},System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The wrapping .
    - Parameter memoryThreshold: The maximum size to buffer in memory.
    - Parameter bufferLimit: The maximum size that will be buffered before this  throws.
    - Parameter tempFileDirectory: The temporary directory to which files are buffered to.
    */
    public init(inner : dotnet.System.IO.Stream, memoryThreshold : Swift.Int32, bufferLimit : Optional<Swift.Int64>, tempFileDirectory : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ctor_0__4__Stream_i32_System_Nullable_i64__String(&__thrown, inner.get_handle(), memoryThreshold, (bufferLimit != nil) ? System_Int64_box(bufferLimit!) : nil, tempFileDirectory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Int32, System.Nullable<System.Int64>, System.String, System.Buffers.ArrayPool<System.Byte>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.#ctor(System.IO.Stream,System.Int32,System.Nullable{System.Int64},System.String,System.Buffers.ArrayPool{System.Byte})
    /**
    
            Initializes a new instance of .
            

    - Parameter inner: The wrapping .
    - Parameter memoryThreshold: The maximum size to buffer in memory.
    - Parameter bufferLimit: The maximum size that will be buffered before this  throws.
    - Parameter tempFileDirectory: The temporary directory to which files are buffered to.
    - Parameter bytePool: The  to use.
    */
    public init(inner : dotnet.System.IO.Stream, memoryThreshold : Swift.Int32, bufferLimit : Optional<Swift.Int64>, tempFileDirectory : dotnet.System.String, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ctor_0__5__Stream_i32_System_Nullable_i64__String_System_Buffers_ArrayPool_u8_(&__thrown, inner.get_handle(), memoryThreshold, (bufferLimit != nil) ? System_Int64_box(bufferLimit!) : nil, tempFileDirectory.get_handle(), bytePool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int64 Seek(System.Int64, System.IO.SeekOrigin)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.Seek(System.Int64,System.IO.SeekOrigin)
    /**
    */
    open override func Seek(offset : Swift.Int64, origin : dotnet.System.IO.SeekOrigin) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_i64__Seek_0__2__i64_SeekOrigin(&__thrown, self.get_handle(), offset, origin.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 Read(System.Span<System.Byte>)
    // System.Int32 Read(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.Read(System.Byte[],System.Int32,System.Int32)
    /**
    */
    open override func Read(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_i32__Read_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_System_Threading_Tasks_Task_i32___ReadAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Int32> ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System.Memory_1<Swift.UInt8>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_System_Threading_Tasks_ValueTask_i32___ReadAsync_0__2__System_Memory_u8__CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // void Write(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.Write(System.Byte[],System.Int32,System.Int32)
    /**
    */
    open override func Write(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_void__Write_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    open override func WriteAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_Task__WriteAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void SetLength(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.SetLength(System.Int64)
    /**
    */
    open override func SetLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_void__SetLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.Flush
    /**
    */
    open override func Flush() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    /**
    */
    open override func CopyToAsync(destination : dotnet.System.IO.Stream, bufferSize : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_Task__CopyToAsync_0__3__Stream_i32_CancellationToken(&__thrown, self.get_handle(), destination.get_handle(), bufferSize, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.DisposeAsync
    /**
    */
    open override func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MemoryThreshold()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_MemoryThreshold
    open func get_MemoryThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_i32__get_MemoryThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_InMemory()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_InMemory
    open func get_InMemory() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_bool__get_InMemory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_TempFileName()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_TempFileName
    open func get_TempFileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_String__get_TempFileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_CanRead()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_CanRead
    open override func get_CanRead() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_bool__get_CanRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanSeek()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_CanSeek
    open override func get_CanSeek() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_bool__get_CanSeek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanWrite()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_CanWrite
    open override func get_CanWrite() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_bool__get_CanWrite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_Length
    open override func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_Position()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.get_Position
    open override func get_Position() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_i64__get_Position_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Position(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.set_Position(System.Int64)
    open override func set_Position(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingReadStream_void__set_Position_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var CanRead : Bool {
        get {
            return try! get_CanRead();
        }
    }
    /**
    */
    open override var CanSeek : Bool {
        get {
            return try! get_CanSeek();
        }
    }
    /**
    */
    open override var CanWrite : Bool {
        get {
            return try! get_CanWrite();
        }
    }
    /**
    
            Gets a value that determines if the contents are buffered entirely in memory.
            

    */
    open var InMemory : Bool {
        get {
            return try! get_InMemory();
        }
    }
    /**
    
            The total bytes read from and buffered by the stream so far, it will not represent the full
            data length until the stream is fully buffered. e.g. using stream.DrainAsync().
            

    */
    open override var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    
            The maximum amount of memory in bytes to allocate before switching to a file on disk.
            

    */
    open var MemoryThreshold : Swift.Int32 {
        get {
            return try! get_MemoryThreshold();
        }
    }
    /**
    */
    open override var Position : Swift.Int64 {
        get {
            return try! get_Position();
        }
        set(v) {
            return try! set_Position(value: v);
        }
    }
    /**
    
            Gets a value that determines where the contents are buffered on disk.
            

    */
    open var TempFileName : Optional<dotnet.System.String> {
        get {
            return try! get_TempFileName();
        }
    }
} // FileBufferingReadStream


// type: Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream
    /**
    
            A  that buffers content to be written to disk. Use 
            to write buffered content to a target .
            

    */
public final class FileBufferingWriteStream
    :
    dotnet.System.IO.Stream
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Nullable<System.Int64>, System.Func<System.String>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.#ctor(System.Int32,System.Nullable{System.Int64},System.Func{System.String})
    /**
    
            Initializes a new instance of .
            

    - Parameter memoryThreshold: 
            The maximum amount of memory in bytes to allocate before switching to a file on disk.
            Defaults to 32kb.
            
    - Parameter bufferLimit: 
            The maximum amount of bytes that the  is allowed to buffer.
            
    - Parameter tempFileDirectoryAccessor: Provides the location of the directory to write buffered contents to.
            When unspecified, uses the value specified by the environment variable ASPNETCORE_TEMP if available, otherwise
            uses the value returned by .
            
    */
    public init(memoryThreshold : Swift.Int32, bufferLimit : Optional<Swift.Int64>, tempFileDirectoryAccessor : Optional<dotnet.System.Func_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_ctor_0__3__i32_System_Nullable_i64__System_Func_string_(&__thrown, memoryThreshold, (bufferLimit != nil) ? System_Int64_box(bufferLimit!) : nil, (tempFileDirectoryAccessor?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int64 Seek(System.Int64, System.IO.SeekOrigin)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.Seek(System.Int64,System.IO.SeekOrigin)
    /**
    */
    public override func Seek(offset : Swift.Int64, origin : dotnet.System.IO.SeekOrigin) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_i64__Seek_0__2__i64_SeekOrigin(&__thrown, self.get_handle(), offset, origin.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Read(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.Read(System.Byte[],System.Int32,System.Int32)
    /**
    */
    public override func Read(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_i32__Read_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Threading.Tasks.Task<System.Int32> ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    public override func ReadAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_System_Threading_Tasks_Task_i32___ReadAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Write(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.Write(System.Byte[],System.Int32,System.Int32)
    /**
    */
    public override func Write(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_void__Write_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    /**
    */
    public override func WriteAsync(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_Task__WriteAsync_0__4__u8Array_i32_i32_CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
    /**
    */
    public override func WriteAsync(buffer : dotnet.System.ReadOnlyMemory_1<Swift.UInt8>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_ValueTask__WriteAsync_0__2__System_ReadOnlyMemory_u8__CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void Flush()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.Flush
    /**
    */
    public override func Flush() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.FlushAsync(System.Threading.CancellationToken)
    /**
    */
    public override func FlushAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_Task__FlushAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void SetLength(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.SetLength(System.Int64)
    /**
    */
    public override func SetLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_void__SetLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task DrainBufferAsync(System.IO.Stream, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.DrainBufferAsync(System.IO.Stream,System.Threading.CancellationToken)
    /**
    
            Drains buffered content to .
            

    - Parameter destination: The  to drain buffered contents to.
    - Parameter cancellationToken: The .
    - Returns: A  that represents the asynchronous drain operation.

    */
    public func DrainBufferAsync(destination : dotnet.System.IO.Stream, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_Task__DrainBufferAsync_0__2__Stream_CancellationToken(&__thrown, self.get_handle(), destination.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task DrainBufferAsync(System.IO.Pipelines.PipeWriter, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.DrainBufferAsync(System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)
    /**
    
            Drains buffered content to .
            

    - Parameter destination: The  to drain buffered contents to.
    - Parameter cancellationToken: The .
    - Returns: A  that represents the asynchronous drain operation.

    */
    public func DrainBufferAsync(destination : aspnetcore.System.IO.Pipelines.PipeWriter, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_Task__DrainBufferAsync_0__2__PipeWriter_CancellationToken(&__thrown, self.get_handle(), destination.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.DisposeAsync
    /**
    */
    public override func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MemoryThreshold()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_MemoryThreshold
    public func get_MemoryThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_i32__get_MemoryThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_CanRead()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_CanRead
    public override func get_CanRead() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_bool__get_CanRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanSeek()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_CanSeek
    public override func get_CanSeek() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_bool__get_CanSeek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanWrite()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_CanWrite
    public override func get_CanWrite() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_bool__get_CanWrite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_Length
    public override func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_Position()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.get_Position
    public override func get_Position() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_i64__get_Position_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Position(System.Int64)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileBufferingWriteStream.set_Position(System.Int64)
    public override func set_Position(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FileBufferingWriteStream_void__set_Position_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public override var CanRead : Bool {
        get {
            return try! get_CanRead();
        }
    }
    /**
    */
    public override var CanSeek : Bool {
        get {
            return try! get_CanSeek();
        }
    }
    /**
    */
    public override var CanWrite : Bool {
        get {
            return try! get_CanWrite();
        }
    }
    /**
    */
    public override var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
    /**
    
            The maximum amount of memory in bytes to allocate before switching to a file on disk.
            

    */
    public var MemoryThreshold : Swift.Int32 {
        get {
            return try! get_MemoryThreshold();
        }
    }
    /**
    */
    public override var Position : Swift.Int64 {
        get {
            return try! get_Position();
        }
        set(v) {
            return try! set_Position(value: v);
        }
    }
} // FileBufferingWriteStream


// type: Microsoft.AspNetCore.WebUtilities.FileMultipartSection
    /**
    
            Represents a file multipart section
            

    */
open class FileMultipartSection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FileMultipartSection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.#ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Creates a new instance of the  class
            

    - Parameter section: The section from which to create the 
    */
    public init(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_ctor_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection, Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.#ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection,Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    /**
    
            Creates a new instance of the  class
            

    - Parameter section: The section from which to create the 
    - Parameter header: An already parsed content disposition header
    */
    public init(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection, header : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_ctor_0__2__MultipartSection_ContentDispositionHeaderValue(&__thrown, section.get_handle(), header?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.WebUtilities.MultipartSection get_Section()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.get_Section
    open func get_Section() throws -> aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_MultipartSection__get_Section_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.Stream get_FileStream()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.get_FileStream
    open func get_FileStream() throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_Stream__get_FileStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.WebUtilities.FileMultipartSection.get_FileName
    open func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FileMultipartSection_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the name of the file from the section
            

    */
    open var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
    }
    /**
    
            Gets the file stream from the section body
            

    */
    open var FileStream : Optional<dotnet.System.IO.Stream> {
        get {
            return try! get_FileStream();
        }
    }
    /**
    
            Gets the name of the section
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the original section from which this object was created
            

    */
    open var Section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
        get {
            return try! get_Section();
        }
    }
} // FileMultipartSection


// type: Microsoft.AspNetCore.WebUtilities.FormMultipartSection
    /**
    
            Represents a form multipart section
            

    */
open class FormMultipartSection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FormMultipartSection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormMultipartSection.#ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Creates a new instance of the  class
            

    - Parameter section: The section from which to create the 
    */
    public init(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormMultipartSection_ctor_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection, Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormMultipartSection.#ctor(Microsoft.AspNetCore.WebUtilities.MultipartSection,Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)
    /**
    
            Creates a new instance of the  class
            

    - Parameter section: The section from which to create the 
    - Parameter header: An already parsed content disposition header
    */
    public init(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection, header : Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormMultipartSection_ctor_0__2__MultipartSection_ContentDispositionHeaderValue(&__thrown, section.get_handle(), header?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.String> GetValueAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormMultipartSection.GetValueAsync
    /**
    
            Gets the form value
            

    - Returns: The form value

    */
    open func GetValueAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormMultipartSection_System_Threading_Tasks_Task_string___GetValueAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.WebUtilities.MultipartSection get_Section()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormMultipartSection.get_Section
    open func get_Section() throws -> aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormMultipartSection_MultipartSection__get_Section_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormMultipartSection.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormMultipartSection_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The form name
            

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the original section from which this object was created
            

    */
    open var Section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
        get {
            return try! get_Section();
        }
    }
} // FormMultipartSection


// type: Microsoft.AspNetCore.WebUtilities.FormPipeReader
    /**
    
            Used to read an 'application/x-www-form-urlencoded' form.
            Internally reads from a PipeReader.
            

    */
open class FormPipeReader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FormPipeReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Pipelines.PipeReader)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.#ctor(System.IO.Pipelines.PipeReader)
    /**
    
            Initializes a new instance of .
            

    - Parameter pipeReader: The  to read from.
    */
    public init(pipeReader : aspnetcore.System.IO.Pipelines.PipeReader) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormPipeReader_ctor_0__1__PipeReader(&__thrown, pipeReader.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Pipelines.PipeReader, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.#ctor(System.IO.Pipelines.PipeReader,System.Text.Encoding)
    /**
    
            Initializes a new instance of .
            

    - Parameter pipeReader: The  to read from.
    - Parameter encoding: The .
    */
    public init(pipeReader : aspnetcore.System.IO.Pipelines.PipeReader, encoding : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormPipeReader_ctor_0__2__PipeReader_Encoding(&__thrown, pipeReader.get_handle(), encoding.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>> ReadFormAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.ReadFormAsync(System.Threading.CancellationToken)
    /**
    
            Parses an HTTP form body.
            

    - Parameter cancellationToken: The .
    - Returns: The collection containing the parsed HTTP form body.

    */
    open func ReadFormAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormPipeReader_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues____ReadFormAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCountLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.get_ValueCountLimit
    open func get_ValueCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormPipeReader_i32__get_ValueCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.set_ValueCountLimit(System.Int32)
    open func set_ValueCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormPipeReader_void__set_ValueCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_KeyLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.get_KeyLengthLimit
    open func get_KeyLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormPipeReader_i32__get_KeyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_KeyLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.set_KeyLengthLimit(System.Int32)
    open func set_KeyLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormPipeReader_void__set_KeyLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.get_ValueLengthLimit
    open func get_ValueLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormPipeReader_i32__get_ValueLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormPipeReader.set_ValueLengthLimit(System.Int32)
    open func set_ValueLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormPipeReader_void__set_ValueLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The limit on the length of form keys.
            

    */
    open var KeyLengthLimit : Swift.Int32 {
        get {
            return try! get_KeyLengthLimit();
        }
        set(v) {
            return try! set_KeyLengthLimit(value: v);
        }
    }
    /**
    
            The limit on the number of form values to allow in ReadForm or ReadFormAsync.
            

    */
    open var ValueCountLimit : Swift.Int32 {
        get {
            return try! get_ValueCountLimit();
        }
        set(v) {
            return try! set_ValueCountLimit(value: v);
        }
    }
    /**
    
            The limit on the length of form values.
            

    */
    open var ValueLengthLimit : Swift.Int32 {
        get {
            return try! get_ValueLengthLimit();
        }
        set(v) {
            return try! set_ValueLengthLimit(value: v);
        }
    }
} // FormPipeReader


// type: Microsoft.AspNetCore.WebUtilities.FormReader
    /**
    
            Used to read an 'application/x-www-form-urlencoded' form.
            

    */
open class FormReader
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_FormReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultValueCountLimit
    /**
    
            Gets the default value for .
            Defaults to 1024.
            

    */
    open class var DefaultValueCountLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_get_DefaultValueCountLimit();
            return __return;
        }
    }
    // static field: System.Int32 DefaultKeyLengthLimit
    /**
    
            Gets the default value for .
            Defaults to 2,048 bytes‬, which is approximately 2KB.
            

    */
    open class var DefaultKeyLengthLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_get_DefaultKeyLengthLimit();
            return __return;
        }
    }
    // static field: System.Int32 DefaultValueLengthLimit
    /**
    
            Gets the default value for .
            Defaults to 4,194,304 bytes‬, which is approximately 4MB.
            

    */
    open class var DefaultValueLengthLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_get_DefaultValueLengthLimit();
            return __return;
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.#ctor(System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter data: The data to read.
    */
    public init(data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormReader_ctor_0__1__String(&__thrown, data.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Buffers.ArrayPool<System.Char>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.#ctor(System.String,System.Buffers.ArrayPool{System.Char})
    /**
    
            Initializes a new instance of .
            

    - Parameter data: The data to read.
    - Parameter charPool: The  to use.
    */
    public init(data : dotnet.System.String, charPool : dotnet.System.Buffers.ArrayPool_1<dotnet.System.Char>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormReader_ctor_0__2__String_System_Buffers_ArrayPool_System_Char_(&__thrown, data.get_handle(), charPool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.#ctor(System.IO.Stream)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The  to read. Assumes a utf-8 encoded stream.
    */
    public init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormReader_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.#ctor(System.IO.Stream,System.Text.Encoding)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The  to read.
    - Parameter encoding: The character encoding to use.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormReader_ctor_0__2__Stream_Encoding(&__thrown, stream.get_handle(), encoding.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding, System.Buffers.ArrayPool<System.Char>)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Buffers.ArrayPool{System.Char})
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The  to read.
    - Parameter encoding: The character encoding to use.
    - Parameter charPool: The  to use.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, charPool : dotnet.System.Buffers.ArrayPool_1<dotnet.System.Char>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_FormReader_ctor_0__3__Stream_Encoding_System_Buffers_ArrayPool_System_Char_(&__thrown, stream.get_handle(), encoding.get_handle(), charPool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Nullable<System.Collections.Generic.KeyValuePair<System.String,System.String>> ReadNextPair()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.ReadNextPair
    /**
    
            Reads the next key value pair from the form.
            For unbuffered data use the async overload instead.
            

    - Returns: The next key value pair, or null when the end of the form is reached.

    */
    open func ReadNextPair() throws -> Optional<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_System_Nullable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____ReadNextPair_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Collections.Generic.KeyValuePair_2(hndl: __return!)) : nil;
        }
    }
    // System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues> ReadForm()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.ReadForm
    /**
    
            Parses text from an HTTP form body.
            

    - Returns: The collection containing the parsed HTTP form body.

    */
    open func ReadForm() throws -> dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues___ReadForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>> ReadFormAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.ReadFormAsync(System.Threading.CancellationToken)
    /**
    
            Parses an HTTP form body.
            

    - Parameter cancellationToken: The .
    - Returns: The collection containing the parsed HTTP form body.

    */
    open func ReadFormAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues____ReadFormAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormReader_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCountLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.get_ValueCountLimit
    open func get_ValueCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_i32__get_ValueCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.set_ValueCountLimit(System.Int32)
    open func set_ValueCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormReader_void__set_ValueCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_KeyLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.get_KeyLengthLimit
    open func get_KeyLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_i32__get_KeyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_KeyLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.set_KeyLengthLimit(System.Int32)
    open func set_KeyLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormReader_void__set_KeyLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.get_ValueLengthLimit
    open func get_ValueLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_FormReader_i32__get_ValueLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ValueLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.FormReader.set_ValueLengthLimit(System.Int32)
    open func set_ValueLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_FormReader_void__set_ValueLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The limit on the length of form keys.
            

    */
    open var KeyLengthLimit : Swift.Int32 {
        get {
            return try! get_KeyLengthLimit();
        }
        set(v) {
            return try! set_KeyLengthLimit(value: v);
        }
    }
    /**
    
            The limit on the number of form values to allow in ReadForm or ReadFormAsync.
            

    */
    open var ValueCountLimit : Swift.Int32 {
        get {
            return try! get_ValueCountLimit();
        }
        set(v) {
            return try! set_ValueCountLimit(value: v);
        }
    }
    /**
    
            The limit on the length of form values.
            

    */
    open var ValueLengthLimit : Swift.Int32 {
        get {
            return try! get_ValueLengthLimit();
        }
        set(v) {
            return try! set_ValueLengthLimit(value: v);
        }
    }
} // FormReader


// type: Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader
    /**
    
            A  to read the HTTP request stream.
            

    */
open class HttpRequestStreamReader
    :
    dotnet.System.IO.TextReader
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP request .
    - Parameter encoding: The character encoding to use.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_ctor_0__2__Stream_Encoding(&__thrown, stream.get_handle(), encoding.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP request .
    - Parameter encoding: The character encoding to use.
    - Parameter bufferSize: The minimum buffer size.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, bufferSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_ctor_0__3__Stream_Encoding_i32(&__thrown, stream.get_handle(), encoding.get_handle(), bufferSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding, System.Int32, System.Buffers.ArrayPool<System.Byte>, System.Buffers.ArrayPool<System.Char>)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Buffers.ArrayPool{System.Byte},System.Buffers.ArrayPool{System.Char})
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP request .
    - Parameter encoding: The character encoding to use.
    - Parameter bufferSize: The minimum buffer size.
    - Parameter bytePool: The byte array pool to use.
    - Parameter charPool: The char array pool to use.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, bufferSize : Swift.Int32, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>, charPool : dotnet.System.Buffers.ArrayPool_1<dotnet.System.Char>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_ctor_0__5__Stream_Encoding_i32_System_Buffers_ArrayPool_u8__System_Buffers_ArrayPool_System_Char_(&__thrown, stream.get_handle(), encoding.get_handle(), bufferSize, bytePool.get_handle(), charPool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Peek()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.Peek
    /**
    */
    open override func Peek() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_i32__Peek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Read()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.Read
    /**
    */
    open override func Read() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_i32__Read_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Read(System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.Read(System.Char[],System.Int32,System.Int32)
    /**
    */
    open override func Read(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_i32__Read_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 Read(System.Span<System.Char>)
    // System.Threading.Tasks.Task<System.Int32> ReadAsync(System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_System_Threading_Tasks_Task_i32___ReadAsync_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Int32> ReadAsync(System.Memory<System.Char>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)
    /**
    */
    open override func ReadAsync(buffer : dotnet.System.Memory_1<dotnet.System.Char>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_System_Threading_Tasks_ValueTask_i32___ReadAsync_0__2__System_Memory_System_Char__CancellationToken(&__thrown, self.get_handle(), buffer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadLineAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.ReadLineAsync
    /**
    */
    open override func ReadLineAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_System_Threading_Tasks_Task_string___ReadLineAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String ReadLine()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.ReadLine
    /**
    */
    open override func ReadLine() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_String__ReadLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<System.String> ReadToEndAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader.ReadToEndAsync
    /**
    */
    open override func ReadToEndAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpRequestStreamReader_System_Threading_Tasks_Task_string___ReadToEndAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // HttpRequestStreamReader


// type: Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter
    /**
    
            Writes to the HTTP response  using the supplied .
            It does not write the BOM and also does not close the stream.
            

    */
open class HttpResponseStreamWriter
    :
    dotnet.System.IO.TextWriter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP response .
    - Parameter encoding: The character encoding to use.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_ctor_0__2__Stream_Encoding(&__thrown, stream.get_handle(), encoding.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP response .
    - Parameter encoding: The character encoding to use.
    - Parameter bufferSize: The minimum buffer size.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, bufferSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_ctor_0__3__Stream_Encoding_i32(&__thrown, stream.get_handle(), encoding.get_handle(), bufferSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Encoding, System.Int32, System.Buffers.ArrayPool<System.Byte>, System.Buffers.ArrayPool<System.Char>)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Buffers.ArrayPool{System.Byte},System.Buffers.ArrayPool{System.Char})
    /**
    
            Initializes a new instance of .
            

    - Parameter stream: The HTTP response .
    - Parameter encoding: The character encoding to use.
    - Parameter bufferSize: The minimum buffer size.
    - Parameter bytePool: The byte array pool.
    - Parameter charPool: The char array pool.
    */
    public init(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, bufferSize : Swift.Int32, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>, charPool : dotnet.System.Buffers.ArrayPool_1<dotnet.System.Char>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_ctor_0__5__Stream_Encoding_i32_System_Buffers_ArrayPool_u8__System_Buffers_ArrayPool_System_Char_(&__thrown, stream.get_handle(), encoding.get_handle(), bufferSize, bytePool.get_handle(), charPool.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Write(System.Char)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.Write(System.Char)
    /**
    */
    open override func Write(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_void__Write_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.Write(System.Char[],System.Int32,System.Int32)
    /**
    */
    open func Write(values : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_void__Write_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), values.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void Write(System.ReadOnlySpan<System.Char>)
    // void Write(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.Write(System.String)
    /**
    */
    open override func Write(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_void__Write_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteLine(System.ReadOnlySpan<System.Char>)
    // System.Threading.Tasks.Task WriteAsync(System.Char)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.WriteAsync(System.Char)
    /**
    */
    open override func WriteAsync(value : dotnet.System.Char) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__WriteAsync_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    /**
    */
    open func WriteAsync(values : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__WriteAsync_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), values.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.WriteAsync(System.String)
    /**
    */
    open override func WriteAsync(value : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__WriteAsync_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteAsync(System.ReadOnlyMemory<System.Char>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)
    /**
    */
    open func WriteAsync(value : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__WriteAsync_0__2__System_ReadOnlyMemory_System_Char__CancellationToken(&__thrown, self.get_handle(), value.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task WriteLineAsync(System.ReadOnlyMemory<System.Char>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)
    /**
    */
    open func WriteLineAsync(value : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__WriteLineAsync_0__2__System_ReadOnlyMemory_System_Char__CancellationToken(&__thrown, self.get_handle(), value.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Flush()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.Flush
    /**
    */
    open override func Flush() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task FlushAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.FlushAsync
    /**
    */
    open override func FlushAsync() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Task__FlushAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.DisposeAsync
    /**
    */
    open override func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter.get_Encoding
    open override func get_Encoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_HttpResponseStreamWriter_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    /**
    */
    open override var Encoding : dotnet.System.Text.Encoding {
        get {
            return try! get_Encoding();
        }
    }
} // HttpResponseStreamWriter


// type: Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator
// boxed value type
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
public final class KeyValueAccumulator
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
    public var HasValues : Bool {
        get {
            return try! get_HasValues();
        }
    }
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
    public var KeyCount : Swift.Int32 {
        get {
            return try! get_KeyCount();
        }
    }
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
    public var ValueCount : Swift.Int32 {
        get {
            return try! get_ValueCount();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Append(System.String, System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator.Append(System.String,System.String)
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
    public func Append(key : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_void__Append_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues> GetResults()
// docid: M:Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator.GetResults
    /**
    
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            

    */
    public func GetResults() throws -> dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues___GetResults_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasValues()
// docid: M:Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator.get_HasValues
    public func get_HasValues() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_bool__get_HasValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_KeyCount()
// docid: M:Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator.get_KeyCount
    public func get_KeyCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_i32__get_KeyCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCount()
// docid: M:Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator.get_ValueCount
    public func get_ValueCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_KeyValueAccumulator_i32__get_ValueCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // KeyValueAccumulator


// type: Microsoft.AspNetCore.WebUtilities.MultipartReader
    /**
    
            Reads multipart form content from the specified .
            

    */
open class MultipartReader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_MultipartReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultHeadersCountLimit
    /**
    
            Gets the default value for .
            Defaults to 16‬.
            

    */
    open class var DefaultHeadersCountLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_get_DefaultHeadersCountLimit();
            return __return;
        }
    }
    // static field: System.Int32 DefaultHeadersLengthLimit
    /**
    
            Gets the default value for .
            Defaults to 16,384‬ bytes‬, which is approximately 16KB.
            

    */
    open class var DefaultHeadersLengthLimit : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_get_DefaultHeadersLengthLimit();
            return __return;
        }
    }
    // .ctor(System.String, System.IO.Stream)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.#ctor(System.String,System.IO.Stream)
    /**
    
            Initializes a new instance of .
            

    - Parameter boundary: The multipart boundary.
    - Parameter stream: The  containing multipart data.
    */
    public init(boundary : dotnet.System.String, stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_MultipartReader_ctor_0__2__String_Stream(&__thrown, boundary.get_handle(), stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.Stream, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.#ctor(System.String,System.IO.Stream,System.Int32)
    /**
    
            Initializes a new instance of .
            

    - Parameter boundary: The multipart boundary.
    - Parameter stream: The  containing multipart data.
    - Parameter bufferSize: The minimum buffer size to use.
    */
    public init(boundary : dotnet.System.String, stream : dotnet.System.IO.Stream, bufferSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_MultipartReader_ctor_0__3__String_Stream_i32(&__thrown, boundary.get_handle(), stream.get_handle(), bufferSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.WebUtilities.MultipartSection> ReadNextSectionAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.ReadNextSectionAsync(System.Threading.CancellationToken)
    /**
    
            Reads the next .
            

    - Parameter cancellationToken: The token to monitor for cancellation requests.
            The default value is .
    - Returns: 

    */
    open func ReadNextSectionAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_System_Threading_Tasks_Task_Microsoft_AspNetCore_WebUtilities_MultipartSection___ReadNextSectionAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_HeadersCountLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.get_HeadersCountLimit
    open func get_HeadersCountLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_i32__get_HeadersCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_HeadersCountLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.set_HeadersCountLimit(System.Int32)
    open func set_HeadersCountLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartReader_void__set_HeadersCountLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_HeadersLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.get_HeadersLengthLimit
    open func get_HeadersLengthLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_i32__get_HeadersLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_HeadersLengthLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.set_HeadersLengthLimit(System.Int32)
    open func set_HeadersLengthLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartReader_void__set_HeadersLengthLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_BodyLengthLimit()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.get_BodyLengthLimit
    open func get_BodyLengthLimit() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartReader_System_Nullable_i64___get_BodyLengthLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_BodyLengthLimit(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartReader.set_BodyLengthLimit(System.Nullable{System.Int64})
    open func set_BodyLengthLimit(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartReader_void__set_BodyLengthLimit_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The optional limit for the total response body length.
            

    */
    open var BodyLengthLimit : Optional<Swift.Int64> {
        get {
            return try! get_BodyLengthLimit();
        }
        set(v) {
            return try! set_BodyLengthLimit(value: v!);
        }
    }
    /**
    
            The limit for the number of headers to read.
            

    */
    open var HeadersCountLimit : Swift.Int32 {
        get {
            return try! get_HeadersCountLimit();
        }
        set(v) {
            return try! set_HeadersCountLimit(value: v);
        }
    }
    /**
    
            The combined size limit for headers per multipart section.
            

    */
    open var HeadersLengthLimit : Swift.Int32 {
        get {
            return try! get_HeadersLengthLimit();
        }
        set(v) {
            return try! set_HeadersLengthLimit(value: v);
        }
    }
} // MultipartReader


// type: Microsoft.AspNetCore.WebUtilities.MultipartSection
    /**
    
            A multipart section read by .
            

    */
open class MultipartSection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_MultipartSection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_MultipartSection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSection_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ContentDisposition()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.get_ContentDisposition
    open func get_ContentDisposition() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSection_String__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues> get_Headers()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.get_Headers
    open func get_Headers() throws -> Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSection_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues___get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.Dictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Headers(System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues>)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.set_Headers(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues})
    open func set_Headers(value : Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartSection_void__set_Headers_0__1__System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Body()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.get_Body
    open func get_Body() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSection_Stream__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.IO.Stream)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.set_Body(System.IO.Stream)
    open func set_Body(value : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartSection_void__set_Body_0__1__Stream(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_BaseStreamOffset()
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.get_BaseStreamOffset
    open func get_BaseStreamOffset() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSection_System_Nullable_i64___get_BaseStreamOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_BaseStreamOffset(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSection.set_BaseStreamOffset(System.Nullable{System.Int64})
    open func set_BaseStreamOffset(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_WebUtilities_MultipartSection_void__set_BaseStreamOffset_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The position where the body starts in the total multipart body.
            This may not be available if the total multipart body is not seekable.
            

    */
    open var BaseStreamOffset : Optional<Swift.Int64> {
        get {
            return try! get_BaseStreamOffset();
        }
        set(v) {
            return try! set_BaseStreamOffset(value: v!);
        }
    }
    /**
    
            Gets or sets the body.
            

    */
    open var Body : dotnet.System.IO.Stream {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    
            Gets the value of the Content-Disposition header.
            

    */
    open var ContentDisposition : Optional<dotnet.System.String> {
        get {
            return try! get_ContentDisposition();
        }
    }
    /**
    
            Gets the value of the Content-Type header.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
    }
    /**
    
            Gets or sets the multipart header collection.
            

    */
    open var Headers : Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>> {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v!);
        }
    }
} // MultipartSection


// type: Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions
public struct MultipartSectionConverterExtensions {
    // Microsoft.AspNetCore.WebUtilities.FileMultipartSection AsFileSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFileSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Converts the section to a file section
            

    - Parameter section: The section to convert
    - Returns: A file section

    */
    public static func AsFileSection(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws -> Optional<aspnetcore.Microsoft.AspNetCore.WebUtilities.FileMultipartSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSectionConverterExtensions_FileMultipartSection__AsFileSection_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.WebUtilities.FileMultipartSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.WebUtilities.FormMultipartSection AsFormDataSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFormDataSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Converts the section to a form section
            

    - Parameter section: The section to convert
    - Returns: A form section

    */
    public static func AsFormDataSection(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws -> Optional<aspnetcore.Microsoft.AspNetCore.WebUtilities.FormMultipartSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSectionConverterExtensions_FormMultipartSection__AsFormDataSection_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.WebUtilities.FormMultipartSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Net.Http.Headers.ContentDispositionHeaderValue GetContentDispositionHeader(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.GetContentDispositionHeader(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Retrieves and parses the content disposition header from a section
            

    - Parameter section: The section from which to retrieve
    - Returns: A  if the header was found, null otherwise

    */
    public static func GetContentDispositionHeader(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSectionConverterExtensions_ContentDispositionHeaderValue__GetContentDispositionHeader_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // MultipartSectionConverterExtensions


// type: Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions
public struct MultipartSectionStreamExtensions {
    // System.Threading.Tasks.Task<System.String> ReadAsStringAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection)
// docid: M:Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions.ReadAsStringAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection)
    /**
    
            Reads the body of the section as a string
            

    - Parameter section: The section to read from
    - Returns: The body steam as string

    */
    public static func ReadAsStringAsync(section : aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_MultipartSectionStreamExtensions_System_Threading_Tasks_Task_string___ReadAsStringAsync_0__1__MultipartSection(&__thrown, section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // MultipartSectionStreamExtensions


// type: Microsoft.AspNetCore.WebUtilities.QueryHelpers
public struct QueryHelpers {
    // System.String AddQueryString(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.String,System.String)
    /**
    
            Append the given query key and value to the URI.
            

    - Parameter uri: The base URI.
    - Parameter name: The name of the query key.
    - Parameter value: The query value.
    - Returns: The combined result.

    */
    public static func AddQueryString(uri : dotnet.System.String, name : dotnet.System.String, value : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_String__AddQueryString_0__3__String_String_String(&__thrown, uri.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String AddQueryString(System.String, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Append the given query keys and values to the URI.
            

    - Parameter uri: The base URI.
    - Parameter queryString: A dictionary of query keys and values to append.
    - Returns: The combined result.

    */
    public static func AddQueryString(uri : dotnet.System.String, queryString : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_String__AddQueryString_0__2__String_System_Collections_Generic_IDictionary_string_string_(&__thrown, uri.get_handle(), queryString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String AddQueryString(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
    /**
    
            Append the given query keys and values to the URI.
            

    - Parameter uri: The base URI.
    - Parameter queryString: A collection of query names and values to append.
    - Returns: The combined result.

    */
    public static func AddQueryString(uri : dotnet.System.String, queryString : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_String__AddQueryString_0__2__String_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_Microsoft_Extensions_Primitives_StringValues__(&__thrown, uri.get_handle(), queryString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String AddQueryString(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    /**
    
            Append the given query keys and values to the URI.
            

    - Parameter uri: The base URI.
    - Parameter queryString: A collection of name value query pairs to append.
    - Returns: The combined result.

    */
    public static func AddQueryString(uri : dotnet.System.String, queryString : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_String__AddQueryString_0__2__String_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, uri.get_handle(), queryString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues> ParseQuery(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(System.String)
    /**
    
            Parse a query string into its component key and value parts.
            

    - Parameter queryString: The raw query string value, with or without the leading '?'.
    - Returns: A collection of parsed keys and values.

    */
    public static func ParseQuery(queryString : Optional<dotnet.System.String>) throws -> dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues___ParseQuery_0__1__String(&__thrown, queryString?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.Dictionary_2(hndl : __return);
        }
    }
    // System.Collections.Generic.Dictionary<System.String,Microsoft.Extensions.Primitives.StringValues> ParseNullableQuery(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseNullableQuery(System.String)
    /**
    
            Parse a query string into its component key and value parts.
            

    - Parameter queryString: The raw query string value, with or without the leading '?'.
    - Returns: A collection of parsed keys and values, null if there are no entries.

    */
    public static func ParseNullableQuery(queryString : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.Dictionary_2<dotnet.System.String,aspnetcore.Microsoft.Extensions.Primitives.StringValues>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryHelpers_System_Collections_Generic_Dictionary_string_Microsoft_Extensions_Primitives_StringValues___ParseNullableQuery_0__1__String(&__thrown, queryString?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.Dictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // QueryHelpers


// type: Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable
// boxed value type
    /**
    
            An enumerable that can supply the name/value pairs from a URI query string.
            

    */
public final class QueryStringEnumerable
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter queryString: The query string.
    */
    public init(queryString : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_ctor_0__1__String(&__thrown, queryString?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ReadOnlyMemory<System.Char>)
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.#ctor(System.ReadOnlyMemory{System.Char})
    /**
    
            Constructs an instance of .
            

    - Parameter queryString: The query string.
    */
    public init(queryString : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_ctor_0__1__System_ReadOnlyMemory_System_Char_(&__thrown, queryString.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.GetEnumerator
    /**
    
            Retrieves an object that can iterate through the name/value pairs in the query string.
            

    - Returns: An object that can iterate through the name/value pairs in the query string.

    */
    public func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_QueryStringEnumerable_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable_Enumerator(hndl : __return);
        }
    }
} // QueryStringEnumerable


// type: Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable+EncodedNameValuePair
// boxed value type
    /**
    
            Represents a single name/value pair extracted from a query string during enumeration.
            

    */
public final class QueryStringEnumerable_EncodedNameValuePair
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the name from this name/value pair in its original encoded form.
            To get the decoded string, call .
            

    */
    public var EncodedName : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        get {
            return try! get_EncodedName();
        }
    }
    /**
    
            Gets the value from this name/value pair in its original encoded form.
            To get the decoded string, call .
            

    */
    public var EncodedValue : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        get {
            return try! get_EncodedValue();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_implicit_ctor();
            super.init(hndl: h);
    }
    // System.ReadOnlyMemory<System.Char> DecodeName()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.EncodedNameValuePair.DecodeName
    /**
    
            Decodes the name from this name/value pair.
            

    - Returns: Characters representing the decoded name.

    */
    public func DecodeName() throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_System_ReadOnlyMemory_System_Char___DecodeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<System.Char> DecodeValue()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.EncodedNameValuePair.DecodeValue
    /**
    
            Decodes the value from this name/value pair.
            

    - Returns: Characters representing the decoded value.

    */
    public func DecodeValue() throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_System_ReadOnlyMemory_System_Char___DecodeValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.ReadOnlyMemory<System.Char> get_EncodedName()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.EncodedNameValuePair.get_EncodedName
    public func get_EncodedName() throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_System_ReadOnlyMemory_System_Char___get_EncodedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.ReadOnlyMemory<System.Char> get_EncodedValue()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.EncodedNameValuePair.get_EncodedValue
    public func get_EncodedValue() throws -> dotnet.System.ReadOnlyMemory_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_EncodedNameValuePair_System_ReadOnlyMemory_System_Char___get_EncodedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
} // QueryStringEnumerable_EncodedNameValuePair


// type: Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable+Enumerator
// boxed value type
    /**
    
            An enumerator that supplies the name/value pairs from a URI query string.
            

    */
public final class QueryStringEnumerable_Enumerator
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the currently referenced key/value pair in the query string being enumerated.
            

    */
    public var Current : aspnetcore.Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable_EncodedNameValuePair {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.Enumerator.MoveNext
    /**
    
            Moves to the next key/value pair in the query string being enumerated.
            

    - Returns: True if there is another key/value pair, otherwise false.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.EncodedNameValuePair get_Current()
// docid: M:Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable.Enumerator.get_Current
    public func get_Current() throws -> aspnetcore.Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable_EncodedNameValuePair {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_QueryStringEnumerable_Enumerator_QueryStringEnumerable_EncodedNameValuePair__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.WebUtilities.QueryStringEnumerable_EncodedNameValuePair(hndl : __return);
        }
    }
} // QueryStringEnumerable_Enumerator


// type: Microsoft.AspNetCore.WebUtilities.ReasonPhrases
public struct ReasonPhrases {
    // System.String GetReasonPhrase(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.ReasonPhrases.GetReasonPhrase(System.Int32)
    /**
    
            Gets the reason phrase for the specified status code.
            

    - Parameter statusCode: The status code.
    - Returns: The reason phrase, or  if the status code is unknown.

    */
    public static func GetReasonPhrase(statusCode : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_ReasonPhrases_String__GetReasonPhrase_0__1__i32(&__thrown, statusCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ReasonPhrases


// type: Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions
public struct StreamHelperExtensions {
    // System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Threading.CancellationToken)
    /**
    
            Reads the specified  to the end.
            
            This API is effective when used in conjunction with buffering. It allows
            a buffered request stream to be synchronously read after it has been completely drained.
            
            

    - Parameter stream: The  to completely read.
    - Parameter cancellationToken: The token to monitor for cancellation requests.
    */
    public static func DrainAsync(stream : dotnet.System.IO.Stream, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_StreamHelperExtensions_Task__DrainAsync_0__2__Stream_CancellationToken(&__thrown, stream.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Reads the specified  to the end.
            
            This API is effective when used in conjunction with buffering. It allows
            a buffered request stream to be synchronously read after it has been completely drained.
            
            

    - Parameter stream: The  to completely read.
    - Parameter limit: The maximum number of bytes to read. Throws if the  is larger than this limit.
    - Parameter cancellationToken: The token to monitor for cancellation requests.
    */
    public static func DrainAsync(stream : dotnet.System.IO.Stream, limit : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_StreamHelperExtensions_Task__DrainAsync_0__3__Stream_System_Nullable_i64__CancellationToken(&__thrown, stream.get_handle(), (limit != nil) ? System_Int64_box(limit!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Buffers.ArrayPool<System.Byte>, System.Nullable<System.Int64>, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Buffers.ArrayPool{System.Byte},System.Nullable{System.Int64},System.Threading.CancellationToken)
    /**
    
            Reads the specified  to the end.
            
            This API is effective when used in conjunction with buffering. It allows
            a buffered request stream to be synchronously read after it has been completely drained.
            
            

    - Parameter stream: The  to completely read.
    - Parameter bytePool: The byte array pool to use.
    - Parameter limit: The maximum number of bytes to read. Throws if the  is larger than this limit.
    - Parameter cancellationToken: The token to monitor for cancellation requests.
    */
    public static func DrainAsync(stream : dotnet.System.IO.Stream, bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>, limit : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_StreamHelperExtensions_Task__DrainAsync_0__4__Stream_System_Buffers_ArrayPool_u8__System_Nullable_i64__CancellationToken(&__thrown, stream.get_handle(), bytePool.get_handle(), (limit != nil) ? System_Int64_box(limit!) : nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // StreamHelperExtensions


// type: Microsoft.AspNetCore.WebUtilities.WebEncoders
public struct WebEncoders {
    // System.Byte[] Base64UrlDecode(System.String)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlDecode(System.String)
    /**
    
            Decodes a base64url-encoded string.
            

    - Parameter input: The base64url-encoded input to decode.
    - Returns: The base64url-decoded form of the input.

    */
    public static func Base64UrlDecode(input : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_u8Array__Base64UrlDecode_0__1__String(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] Base64UrlDecode(System.String, System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlDecode(System.String,System.Int32,System.Int32)
    /**
    
            Decodes a base64url-encoded substring of a given string.
            

    - Parameter input: A string containing the base64url-encoded input to decode.
    - Parameter offset: The position in  at which decoding should begin.
    - Parameter count: The number of characters in  to decode.
    - Returns: The base64url-decoded form of the input.

    */
    public static func Base64UrlDecode(input : dotnet.System.String, offset : Swift.Int32, count : Swift.Int32) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_u8Array__Base64UrlDecode_0__3__String_i32_i32(&__thrown, input.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] Base64UrlDecode(System.String, System.Int32, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlDecode(System.String,System.Int32,System.Char[],System.Int32,System.Int32)
    /**
    
            Decodes a base64url-encoded  into a byte[].
            

    - Parameter input: A string containing the base64url-encoded input to decode.
    - Parameter offset: The position in  at which decoding should begin.
    - Parameter buffer: 
            Scratch buffer to hold the s to decode. Array must be large enough to hold
             and  characters as well as Base64 padding
            characters. Content is not preserved.
            
    - Parameter bufferOffset: 
            The offset into  at which to begin writing the s to decode.
            
    - Parameter count: The number of characters in  to decode.
    - Returns: The base64url-decoded form of the .

    */
    public static func Base64UrlDecode(input : dotnet.System.String, offset : Swift.Int32, buffer : dotnet.System_Arr<dotnet.System.Char>, bufferOffset : Swift.Int32, count : Swift.Int32) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_u8Array__Base64UrlDecode_0__5__String_i32_CharArray_i32_i32(&__thrown, input.get_handle(), offset, buffer.get_handle(), bufferOffset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Int32 GetArraySizeRequiredToDecode(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.GetArraySizeRequiredToDecode(System.Int32)
    /**
    
            Gets the minimum char[] size required for decoding of  characters
            with the  method.
            

    - Parameter count: The number of characters to decode.
    - Returns: 
            The minimum char[] size required for decoding  of  characters.
            

    */
    public static func GetArraySizeRequiredToDecode(count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_i32__GetArraySizeRequiredToDecode_0__1__i32(&__thrown, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String Base64UrlEncode(System.Byte[])
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlEncode(System.Byte[])
    /**
    
            Encodes  using base64url encoding.
            

    - Parameter input: The binary input to encode.
    - Returns: The base64url-encoded form of .

    */
    public static func Base64UrlEncode(input : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_String__Base64UrlEncode_0__1__u8Array(&__thrown, input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Base64UrlEncode(System.Byte[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlEncode(System.Byte[],System.Int32,System.Int32)
    /**
    
            Encodes  using base64url encoding.
            

    - Parameter input: The binary input to encode.
    - Parameter offset: The offset into  at which to begin encoding.
    - Parameter count: The number of bytes from  to encode.
    - Returns: The base64url-encoded form of .

    */
    public static func Base64UrlEncode(input : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_String__Base64UrlEncode_0__3__u8Array_i32_i32(&__thrown, input.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 Base64UrlEncode(System.Byte[], System.Int32, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.Base64UrlEncode(System.Byte[],System.Int32,System.Char[],System.Int32,System.Int32)
    /**
    
            Encodes  using base64url encoding.
            

    - Parameter input: The binary input to encode.
    - Parameter offset: The offset into  at which to begin encoding.
    - Parameter output: 
            Buffer to receive the base64url-encoded form of . Array must be large enough to
            hold  characters and the full base64-encoded form of
            , including padding characters.
            
    - Parameter outputOffset: 
            The offset into  at which to begin writing the base64url-encoded form of
            .
            
    - Parameter count: The number of bytes from  to encode.
    - Returns: 
            The number of characters written to , less any padding characters.
            

    */
    public static func Base64UrlEncode(input : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, output : dotnet.System_Arr<dotnet.System.Char>, outputOffset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_i32__Base64UrlEncode_0__5__u8Array_i32_CharArray_i32_i32(&__thrown, input.get_handle(), offset, output.get_handle(), outputOffset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetArraySizeRequiredToEncode(System.Int32)
// docid: M:Microsoft.AspNetCore.WebUtilities.WebEncoders.GetArraySizeRequiredToEncode(System.Int32)
    /**
    
            Get the minimum output char[] size required for encoding 
            s with the  method.
            

    - Parameter count: The number of characters to encode.
    - Returns: 
            The minimum output char[] size required for encoding  s.
            

    */
    public static func GetArraySizeRequiredToEncode(count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_WebUtilities_WebEncoders_i32__GetArraySizeRequiredToEncode_0__1__i32(&__thrown, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.String Base64UrlEncode(System.ReadOnlySpan<System.Byte>)
} // WebEncoders


}



// EXTENSION METHOD Microsoft.AspNetCore.WebUtilities.FileMultipartSection AsFileSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
extension aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
    public func AsFileSection() throws -> Optional<aspnetcore.Microsoft.AspNetCore.WebUtilities.FileMultipartSection> {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFileSection(section: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.WebUtilities.FormMultipartSection AsFormDataSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)
extension aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
    public func AsFormDataSection() throws -> Optional<aspnetcore.Microsoft.AspNetCore.WebUtilities.FormMultipartSection> {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFormDataSection(section: self);
    }
}

// EXTENSION METHOD Microsoft.Net.Http.Headers.ContentDispositionHeaderValue GetContentDispositionHeader(Microsoft.AspNetCore.WebUtilities.MultipartSection)
extension aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
    public func GetContentDispositionHeader() throws -> Optional<aspnetcore.Microsoft.Net.Http.Headers.ContentDispositionHeaderValue> {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.GetContentDispositionHeader(section: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.String> ReadAsStringAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection)
extension aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSection {
    public func ReadAsStringAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions.ReadAsStringAsync(section: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Threading.CancellationToken)
extension dotnet.System.IO.Stream {
    public func DrainAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(stream: self, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Nullable<System.Int64>, System.Threading.CancellationToken)
extension dotnet.System.IO.Stream {
    public func DrainAsync(limit : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(stream: self, limit: limit, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task DrainAsync(System.IO.Stream, System.Buffers.ArrayPool<System.Byte>, System.Nullable<System.Int64>, System.Threading.CancellationToken)
extension dotnet.System.IO.Stream {
    public func DrainAsync(bytePool : dotnet.System.Buffers.ArrayPool_1<Swift.UInt8>, limit : Optional<Swift.Int64>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        return try aspnetcore.Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(stream: self, bytePool: bytePool, limit: limit, cancellationToken: cancellationToken);
    }
}

