// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Localization
// Microsoft.AspNetCore.Localization.Routing
extension Microsoft.AspNetCore.Localization.Routing {
// type: Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider
    /**
    
            Determines the culture information for a request via values in the route data.
            

    */
open class RouteDataRequestCultureProvider
    :
    aspnetcore.Microsoft.AspNetCore.Localization.RequestCultureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult> DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.DetermineProviderCultureResult(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open override func DetermineProviderCultureResult(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Localization.ProviderCultureResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Localization_ProviderCultureResult___DetermineProviderCultureResult_0__1__HttpContext(&__thrown, self.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RouteDataStringKey()
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.get_RouteDataStringKey
    open func get_RouteDataStringKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_String__get_RouteDataStringKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RouteDataStringKey(System.String)
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.set_RouteDataStringKey(System.String)
    open func set_RouteDataStringKey(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_void__set_RouteDataStringKey_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UIRouteDataStringKey()
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.get_UIRouteDataStringKey
    open func get_UIRouteDataStringKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_String__get_UIRouteDataStringKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UIRouteDataStringKey(System.String)
// docid: M:Microsoft.AspNetCore.Localization.Routing.RouteDataRequestCultureProvider.set_UIRouteDataStringKey(System.String)
    open func set_UIRouteDataStringKey(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Localization_Routing_RouteDataRequestCultureProvider_void__set_UIRouteDataStringKey_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The key that contains the culture name.
            Defaults to "culture".
            

    */
    open var RouteDataStringKey : dotnet.System.String {
        get {
            return try! get_RouteDataStringKey();
        }
        set(v) {
            return try! set_RouteDataStringKey(value: v);
        }
    }
    /**
    
            The key that contains the UI culture name. If not specified or no value is found,
             will be used.
            Defaults to "ui-culture".
            

    */
    open var UIRouteDataStringKey : dotnet.System.String {
        get {
            return try! get_UIRouteDataStringKey();
        }
        set(v) {
            return try! set_UIRouteDataStringKey(value: v);
        }
    }
} // RouteDataRequestCultureProvider


}




