// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions
public struct EnvironmentVariablesExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Adds an  that reads configuration values from environment variables.
            

    - Parameter configurationBuilder: The  to add to.
    - Returns: The .

    */
    public static func AddEnvironmentVariables(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariablesExtensions_IConfigurationBuilder__AddEnvironmentVariables_0__1__IConfigurationBuilder(&__thrown, configurationBuilder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})
    /**
    
            Adds an  that reads configuration values from environment variables.
            

    - Parameter builder: The  to add to.
    - Parameter configureSource: Configures the source.
    - Returns: The .

    */
    public static func AddEnvironmentVariables(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariablesExtensions_IConfigurationBuilder__AddEnvironmentVariables_0__2__IConfigurationBuilder_System_Action_Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_(&__thrown, builder?.get_handle() ?? nil, (configureSource?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddEnvironmentVariables(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>(configureSource);
        return try AddEnvironmentVariables(builder: builder, configureSource: del_configureSource);
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)
    /**
    
            Adds an  that reads configuration values from environment variables
            with a specified prefix.
            

    - Parameter configurationBuilder: The  to add to.
    - Parameter prefix: The prefix that environment variable names must start with. The prefix will be removed from the environment variable names.
    - Returns: The .

    */
    public static func AddEnvironmentVariables(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, prefix : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariablesExtensions_IConfigurationBuilder__AddEnvironmentVariables_0__2__IConfigurationBuilder_String(&__thrown, configurationBuilder?.get_handle() ?? nil, prefix?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EnvironmentVariablesExtensions


}
// Microsoft.Extensions.Configuration.EnvironmentVariables
extension Microsoft.Extensions.Configuration.EnvironmentVariables {
// type: Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider
    /**
    
            An environment variable based .
            

    */
open class EnvironmentVariablesConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.ConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor
    /**
    
            Initializes a new instance.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor(System.String)
    /**
    
            Initializes a new instance with the specified prefix.
            

    - Parameter prefix: A prefix used to filter the environment variables.
    */
    public init(prefix : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationProvider_ctor_0__1__String(&__thrown, prefix?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load
    /**
    
            Loads the environment variables.
            

    */
    open override func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.ToString
    /**
    
            Generates a string representing this provider name and relevant details.
            

    - Returns:  The configuration name. 

    */
    open override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationProvider_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EnvironmentVariablesConfigurationProvider


// type: Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource
    /**
    
            Represents environment variables as an .
            

    */
open class EnvironmentVariablesConfigurationSource
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: A 

    */
    open /* method final */ func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Prefix()
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.get_Prefix
    open func get_Prefix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_String__get_Prefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Prefix(System.String)
// docid: M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.set_Prefix(System.String)
    open func set_Prefix(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_EnvironmentVariables_EnvironmentVariablesConfigurationSource_void__set_Prefix_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            A prefix used to filter environment variables.
            

    */
    open var Prefix : Optional<dotnet.System.String> {
        get {
            return try! get_Prefix();
        }
        set(v) {
            return try! set_Prefix(value: v!);
        }
    }
} // EnvironmentVariablesConfigurationSource


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddEnvironmentVariables() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action<Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddEnvironmentVariables(configureSource : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: configureSource);
    }
    // delegate closure overload
    public func AddEnvironmentVariables(configureSource : @escaping (Optional<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        let del_configureSource = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource>(configureSource);
        return try aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(builder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), configureSource: del_configureSource);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddEnvironmentVariables(prefix : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), prefix: prefix);
    }
}

