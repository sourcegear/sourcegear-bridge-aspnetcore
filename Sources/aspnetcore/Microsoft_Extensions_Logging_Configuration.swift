// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Logging
// Microsoft.Extensions.Logging.Configuration
extension Microsoft.Extensions.Logging.Configuration {
// type: Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory
    /**
    
            Allows access to configuration section associated with logger provider
            

    */
open class ILoggerProviderConfigurationFactory
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.Extensions.Configuration.IConfiguration GetConfiguration(System.Type)
// docid: M:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory.GetConfiguration(System.Type)
    /**
    
            Return configuration section associated with logger provider
            

    - Parameter providerType: The logger provider type
    - Returns: The  for the given .

    */
    open func GetConfiguration(providerType : Optional<dotnet.System.Type_>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory_IConfiguration__GetConfiguration_0__1__Type(&__thrown, self.get_handle(), providerType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ILoggerProviderConfigurationFactory


// type: Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1
    /**
    
            Allows access to configuration section associated with logger provider
            

    */
open class ILoggerProviderConfiguration_1<T : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1
{
    public typealias T_ILoggerProviderConfiguration_1 = T;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_get_type_handle(T.get_type_handle());
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.Extensions.Configuration.IConfiguration get_Configuration()
// docid: M:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1.get_Configuration
    open func get_Configuration() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1_IConfiguration__get_Configuration_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ILoggerProviderConfiguration_1


// type: Microsoft.Extensions.Logging.Configuration.LoggerProviderOptions
public struct LoggerProviderOptions {
// TODO COPE (write_all_methods) (unused generic param) void RegisterProviderOptions<TOptions, TProvider>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
} // LoggerProviderOptions


// type: Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2
    /**
    */
open class LoggerProviderOptionsChangeTokenSource_2<TOptions : SGBridgeGenericValue,TProvider : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.Extensions.Options.ConfigurationChangeTokenSource_1<TOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Logging_Configuration_LoggerProviderOptionsChangeTokenSource_2_get_type_handle(TOptions.get_type_handle(),TProvider.get_type_handle());
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration<TProvider>)
// docid: M:Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2.#ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration{`1})
    public init(providerConfiguration : Optional<aspnetcore.Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration_1<TProvider>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Logging_Configuration_LoggerProviderOptionsChangeTokenSource_2_ctor_0__1__Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_TProvider_(TOptions.get_type_handle(), TProvider.get_type_handle(), &__thrown, (providerConfiguration?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // LoggerProviderOptionsChangeTokenSource_2


// type: Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions
public struct LoggingBuilderConfigurationExtensions {
    // void AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder)
// docid: M:Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions.AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder)
    /**
    
            Adds services required to consume  or 
            

    - Parameter builder: The  to register services on.
    */
    public static func AddConfiguration(builder : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Logging_Configuration_LoggingBuilderConfigurationExtensions_void__AddConfiguration_0__1__ILoggingBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // LoggingBuilderConfigurationExtensions


}




public protocol Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfigurationFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_Extensions_Logging_Configuration_ILoggerProviderConfiguration_1
    :
    SGBridgeGetHandle
{
    associatedtype T_ILoggerProviderConfiguration_1 : SGBridgeGenericValue;
}

// EXTENSION METHOD void AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder)
extension Microsoft_Extensions_Logging_ILoggingBuilder {
    public func AddConfiguration() throws {
        try aspnetcore.Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions.AddConfiguration(builder: aspnetcore.Microsoft.Extensions.Logging.ILoggingBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

