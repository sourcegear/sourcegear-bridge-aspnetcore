// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
// Microsoft.AspNetCore.Mvc.Rendering
extension Microsoft.AspNetCore.Mvc.Rendering {
// type: Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary
    /**
    
            Acceptable validation summary rendering modes.
            

    */
public struct ValidationSummary : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_ValidationSummary_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary None
    /**
    
            No validation summary.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary(val: Microsoft_AspNetCore_Mvc_Rendering_ValidationSummary_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary ModelOnly
    /**
    
            Validation summary with model-level errors only (excludes all property errors).
            

    */
    public static var ModelOnly : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary(val: Microsoft_AspNetCore_Mvc_Rendering_ValidationSummary_get_ModelOnly());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary All
    /**
    
            Validation summary with all errors.
            

    */
    public static var All : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary(val: Microsoft_AspNetCore_Mvc_Rendering_ValidationSummary_get_All());
            return __return;
        }
    }
} // ValidationSummary


}

// Microsoft.AspNetCore.Mvc.TagHelpers
extension Microsoft.AspNetCore.Mvc.TagHelpers {
// type: Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper
    /**
    
             implementation targeting <a> elements.
            

    */
open class AnchorTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Action
    open func get_Action() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Action(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Action(System.String)
    open func set_Action(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Action_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Controller
    open func get_Controller() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Controller(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Controller(System.String)
    open func set_Controller(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Controller_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Area()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Area
    open func get_Area() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Area_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Area(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Area(System.String)
    open func set_Area(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Area_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Page
    open func get_Page() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Page(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Page(System.String)
    open func set_Page(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Page_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageHandler()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_PageHandler
    open func get_PageHandler() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_PageHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageHandler(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_PageHandler(System.String)
    open func set_PageHandler(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_PageHandler_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Protocol()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Protocol
    open func get_Protocol() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Protocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Protocol(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Protocol(System.String)
    open func set_Protocol(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Protocol_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Host
    open func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Host(System.String)
    open func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Route()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_Route
    open func get_Route() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_String__get_Route_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Route(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_Route(System.String)
    open func set_Route(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_Route_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_RouteValues
    open func get_RouteValues() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_RouteValues(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_RouteValues(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_RouteValues_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the action method.
            

    */
    open var Action : Optional<dotnet.System.String> {
        get {
            return try! get_Action();
        }
        set(v) {
            return try! set_Action(value: v!);
        }
    }
    /**
    
            The name of the area.
            

    */
    open var Area : Optional<dotnet.System.String> {
        get {
            return try! get_Area();
        }
        set(v) {
            return try! set_Area(value: v!);
        }
    }
    /**
    
            The name of the controller.
            

    */
    open var Controller : Optional<dotnet.System.String> {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v!);
        }
    }
    /**
    
            The URL fragment name.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            The host name.
            

    */
    open var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The name of the page.
            

    */
    open var Page : Optional<dotnet.System.String> {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v!);
        }
    }
    /**
    
            The name of the page handler.
            

    */
    open var PageHandler : Optional<dotnet.System.String> {
        get {
            return try! get_PageHandler();
        }
        set(v) {
            return try! set_PageHandler(value: v!);
        }
    }
    /**
    
            The protocol for the URL, such as "http" or "https".
            

    */
    open var Protocol_ : Optional<dotnet.System.String> {
        get {
            return try! get_Protocol();
        }
        set(v) {
            return try! set_Protocol(value: v!);
        }
    }
    /**
    
            Name of the route.
            

    */
    open var Route : Optional<dotnet.System.String> {
        get {
            return try! get_Route();
        }
        set(v) {
            return try! set_Route(value: v!);
        }
    }
    /**
    
            Additional parameters for the route.
            

    */
    open var RouteValues : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // AnchorTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper
    /**
    
             implementation targeting <cache> elements.
            

    */
open class CacheTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.String CacheKeyPrefix
    /**
    
            Prefix used by  instances when creating entries in .
            

    */
    open class var CacheKeyPrefix : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_get_CacheKeyPrefix();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.#ctor(Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Creates a new .
            

    - Parameter factory: The factory containing the private  instance
            used by the .
    - Parameter htmlEncoder: The  to use.
    */
    public init(factory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_ctor_0__2__CacheTagHelperMemoryCacheFactory_HtmlEncoder(&__thrown, factory?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.Extensions.Caching.Memory.CacheItemPriority> get_Priority()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.get_Priority
    open func get_Priority() throws -> Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.CacheItemPriority> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_System_Nullable_Microsoft_Extensions_Caching_Memory_CacheItemPriority___get_Priority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? aspnetcore.Microsoft.Extensions.Caching.Memory.CacheItemPriority(val: System_Int32_unbox(__return!)) : nil;
        }
    }
    // [IsSpecialName] void set_Priority(System.Nullable<Microsoft.Extensions.Caching.Memory.CacheItemPriority>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.set_Priority(System.Nullable{Microsoft.Extensions.Caching.Memory.CacheItemPriority})
    open func set_Priority(value : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.CacheItemPriority>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelper_void__set_Priority_0__1__System_Nullable_Microsoft_Extensions_Caching_Memory_CacheItemPriority_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  policy for the cache entry.
            

    */
    open var Priority : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.CacheItemPriority> {
        get {
            return try! get_Priority();
        }
        set(v) {
            return try! set_Priority(value: v!);
        }
    }
} // CacheTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase
    /**
    
             base implementation for caching elements.
            

    */
open class CacheTagHelperBase
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.TimeSpan DefaultExpiration
    /**
    
            The default duration, from the time the cache entry was added, when it should be evicted.
            This default duration will only be used if no other expiration criteria is specified.
            The default expiration time is a sliding expiration of 30 seconds.
            

    */
    open class var DefaultExpiration : dotnet.System.TimeSpan {
        get {
        let __return = dotnet.System.TimeSpan(hndl: Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_get_DefaultExpiration());
            return __return;
        }
    }
    // .ctor(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.#ctor(System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Creates a new .
            

    - Parameter htmlEncoder: The  to use.
    */
    public init(htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_ctor_0__1__HtmlEncoder(&__thrown, htmlEncoder?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryBy()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryBy
    open func get_VaryBy() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_String__get_VaryBy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryBy(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryBy(System.String)
    open func set_VaryBy(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryBy_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByHeader()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByHeader
    open func get_VaryByHeader() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_String__get_VaryByHeader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByHeader(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByHeader(System.String)
    open func set_VaryByHeader(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByHeader_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByQuery()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByQuery
    open func get_VaryByQuery() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_String__get_VaryByQuery_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByQuery(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByQuery(System.String)
    open func set_VaryByQuery(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByQuery_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByRoute()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByRoute
    open func get_VaryByRoute() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_String__get_VaryByRoute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByRoute(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByRoute(System.String)
    open func set_VaryByRoute(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByRoute_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_VaryByCookie()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByCookie
    open func get_VaryByCookie() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_String__get_VaryByCookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_VaryByCookie(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByCookie(System.String)
    open func set_VaryByCookie(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByCookie_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_VaryByUser()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByUser
    open func get_VaryByUser() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_bool__get_VaryByUser_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_VaryByUser(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByUser(System.Boolean)
    open func set_VaryByUser(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByUser_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_VaryByCulture()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_VaryByCulture
    open func get_VaryByCulture() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_bool__get_VaryByCulture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_VaryByCulture(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_VaryByCulture(System.Boolean)
    open func set_VaryByCulture(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_VaryByCulture_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> get_ExpiresOn()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_ExpiresOn
    open func get_ExpiresOn() throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_System_Nullable_System_DateTimeOffset___get_ExpiresOn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ExpiresOn(System.Nullable<System.DateTimeOffset>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_ExpiresOn(System.Nullable{System.DateTimeOffset})
    open func set_ExpiresOn(value : Optional<dotnet.System.DateTimeOffset>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_ExpiresOn_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_ExpiresAfter()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_ExpiresAfter
    open func get_ExpiresAfter() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_System_Nullable_System_TimeSpan___get_ExpiresAfter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ExpiresAfter(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_ExpiresAfter(System.Nullable{System.TimeSpan})
    open func set_ExpiresAfter(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_ExpiresAfter_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> get_ExpiresSliding()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_ExpiresSliding
    open func get_ExpiresSliding() throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_System_Nullable_System_TimeSpan___get_ExpiresSliding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] void set_ExpiresSliding(System.Nullable<System.TimeSpan>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_ExpiresSliding(System.Nullable{System.TimeSpan})
    open func set_ExpiresSliding(value : Optional<dotnet.System.TimeSpan>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_ExpiresSliding_0__1__System_Nullable_System_TimeSpan_(&__thrown, self.get_handle(), (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.set_Enabled(System.Boolean)
    open func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperBase_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the value which determines if the tag helper is enabled or not.
            

    */
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
    /**
    
            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.
            

    */
    open var ExpiresAfter : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_ExpiresAfter();
        }
        set(v) {
            return try! set_ExpiresAfter(value: v!);
        }
    }
    /**
    
            Gets or sets the exact  the cache entry should be evicted.
            

    */
    open var ExpiresOn : Optional<dotnet.System.DateTimeOffset> {
        get {
            return try! get_ExpiresOn();
        }
        set(v) {
            return try! set_ExpiresOn(value: v!);
        }
    }
    /**
    
            Gets or sets the duration from last access that the cache entry should be evicted.
            

    */
    open var ExpiresSliding : Optional<dotnet.System.TimeSpan> {
        get {
            return try! get_ExpiresSliding();
        }
        set(v) {
            return try! set_ExpiresSliding(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets or sets a  to vary the cached result by.
            

    */
    open var VaryBy : Optional<dotnet.System.String> {
        get {
            return try! get_VaryBy();
        }
        set(v) {
            return try! set_VaryBy(value: v!);
        }
    }
    /**
    
            Gets or sets a comma-delimited set of cookie names to vary the cached result by.
            

    */
    open var VaryByCookie : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByCookie();
        }
        set(v) {
            return try! set_VaryByCookie(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the cached result is to be varied by request culture.
            
            Setting this to true would result in the result to be varied by 
            and .
            
            

    */
    open var VaryByCulture : Bool {
        get {
            return try! get_VaryByCulture();
        }
        set(v) {
            return try! set_VaryByCulture(value: v);
        }
    }
    /**
    
            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.
            

    */
    open var VaryByHeader : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByHeader();
        }
        set(v) {
            return try! set_VaryByHeader(value: v!);
        }
    }
    /**
    
            Gets or sets a comma-delimited set of query parameters to vary the cached result by.
            

    */
    open var VaryByQuery : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByQuery();
        }
        set(v) {
            return try! set_VaryByQuery(value: v!);
        }
    }
    /**
    
            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.
            

    */
    open var VaryByRoute : Optional<dotnet.System.String> {
        get {
            return try! get_VaryByRoute();
        }
        set(v) {
            return try! set_VaryByRoute(value: v!);
        }
    }
    /**
    
            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in
            .
            

    */
    open var VaryByUser : Bool {
        get {
            return try! get_VaryByUser();
        }
        set(v) {
            return try! set_VaryByUser(value: v);
        }
    }
    /**
    
            Gets or sets the  for the current executing View.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // CacheTagHelperBase


// type: Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory
    /**
    
            A factory for s configured using .
             uses this factory to set its .
            

    */
open class CacheTagHelperMemoryCacheFactory
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperMemoryCacheFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperMemoryCacheFactory_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})
    /**
    
            Creates a new .
            

    - Parameter options: The  to apply to the .
    */
    public init(options : Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperMemoryCacheFactory_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_(&__thrown, (options?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Caching.Memory.IMemoryCache get_Cache()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperMemoryCacheFactory.get_Cache
    open func get_Cache() throws -> Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperMemoryCacheFactory_IMemoryCache__get_Cache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the .
            

    */
    open var Cache : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache> {
        get {
            return try! get_Cache();
        }
    }
} // CacheTagHelperMemoryCacheFactory


// type: Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions
    /**
    
            Provides programmatic configuration for the cache tag helper in the MVC framework.
            

    */
open class CacheTagHelperOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int64 get_SizeLimit()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions.get_SizeLimit
    open func get_SizeLimit() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_i64__get_SizeLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_SizeLimit(System.Int64)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions.set_SizeLimit(System.Int64)
    open func set_SizeLimit(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_void__set_SizeLimit_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The maximum total size in bytes that will be cached by the 
            at any given time.
            

    */
    open var SizeLimit : Swift.Int64 {
        get {
            return try! get_SizeLimit();
        }
        set(v) {
            return try! set_SizeLimit(value: v);
        }
    }
} // CacheTagHelperOptions


// type: Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper
    /**
    
            A  that renders a Razor component.
            

    */
public final class ComponentTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    public override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.get_ViewContext
    public func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    public func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.get_Parameters
    public func get_Parameters() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_System_Collections_Generic_IDictionary_string_object___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Parameters(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.set_Parameters(System.Collections.Generic.IDictionary{System.String,System.Object})
    public func set_Parameters(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_void__set_Parameters_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ComponentType()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.get_ComponentType
    public func get_ComponentType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_Type__get_ComponentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ComponentType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.set_ComponentType(System.Type)
    public func set_ComponentType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_void__set_ComponentType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.RenderMode get_RenderMode()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.get_RenderMode
    public func get_RenderMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_RenderMode__get_RenderMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: __return);
        }
    }
    // [IsSpecialName] void set_RenderMode(Microsoft.AspNetCore.Mvc.Rendering.RenderMode)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.set_RenderMode(Microsoft.AspNetCore.Mvc.Rendering.RenderMode)
    public func set_RenderMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ComponentTagHelper_void__set_RenderMode_0__1__RenderMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the component type. This value is required.
            

    */
    public var ComponentType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ComponentType();
        }
        set(v) {
            return try! set_ComponentType(value: v!);
        }
    }
    /**
    
            Gets or sets values for component parameters.
            

    */
    public var Parameters : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v!);
        }
    }
    /**
    
            Gets or sets the 
            

    */
    public var RenderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
            return try! get_RenderMode();
        }
        set(v) {
            return try! set_RenderMode(value: v);
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    public var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // ComponentTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper
    /**
    
             implementation targeting <distributed-cache> elements.
            

    */
open class DistributedCacheTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.String CacheKeyPrefix
    /**
    
            Prefix used by  instances when creating entries in .
            

    */
    open class var CacheKeyPrefix : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_get_CacheKeyPrefix();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperService, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.#ctor(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperService,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Creates a new .
            

    - Parameter distributedCacheService: The .
    - Parameter htmlEncoder: The .
    */
    public init(distributedCacheService : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperService>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_ctor_0__2__IDistributedCacheTagHelperService_HtmlEncoder(&__thrown, distributedCacheService?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_DistributedCacheTagHelper_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a unique name to discriminate cached entries.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // DistributedCacheTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper
    /**
    
             implementation targeting <environment> elements that conditionally renders
            content based on the current value of .
            If the environment is not listed in the specified  or ,
            or if it is in , the content will not be rendered.
            

    */
open class EnvironmentTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
    /**
    
            Creates a new .
            

    - Parameter hostingEnvironment: The .
    */
    public init(hostingEnvironment : Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_ctor_0__1__IWebHostEnvironment(&__thrown, hostingEnvironment?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Names()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.get_Names
    open func get_Names() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_String__get_Names_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Names(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.set_Names(System.String)
    open func set_Names(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_void__set_Names_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Include()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.get_Include
    open func get_Include() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_String__get_Include_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Include(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.set_Include(System.String)
    open func set_Include(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_void__set_Include_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Exclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.get_Exclude
    open func get_Exclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_String__get_Exclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Exclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.set_Exclude(System.String)
    open func set_Exclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper_void__set_Exclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            A comma separated list of environment names in which the content will not be rendered.
            

    */
    open var Exclude : Optional<dotnet.System.String> {
        get {
            return try! get_Exclude();
        }
        set(v) {
            return try! set_Exclude(value: v!);
        }
    }
    /**
    
            A comma separated list of environment names in which the content should be rendered.
            If the current environment is also in the  list, the content will not be rendered.
            

    */
    open var Include : Optional<dotnet.System.String> {
        get {
            return try! get_Include();
        }
        set(v) {
            return try! set_Include(value: v!);
        }
    }
    /**
    
            A comma separated list of environment names in which the content should be rendered.
            If the current environment is also in the  list, the content will not be rendered.
            

    */
    open var Names : Optional<dotnet.System.String> {
        get {
            return try! get_Names();
        }
        set(v) {
            return try! set_Names(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // EnvironmentTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper
    /**
    
             implementation targeting <button> elements and <input> elements with
            their type attribute set to image or submit.
            

    */
open class FormActionTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.#ctor(Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Creates a new .
            

    - Parameter urlHelperFactory: The .
    */
    public init(urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_ctor_0__1__IUrlHelperFactory(&__thrown, urlHelperFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Action
    open func get_Action() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Action(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Action(System.String)
    open func set_Action(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Action_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Controller
    open func get_Controller() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Controller(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Controller(System.String)
    open func set_Controller(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Controller_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Area()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Area
    open func get_Area() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Area_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Area(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Area(System.String)
    open func set_Area(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Area_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Page
    open func get_Page() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Page(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Page(System.String)
    open func set_Page(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Page_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageHandler()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_PageHandler
    open func get_PageHandler() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_PageHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageHandler(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_PageHandler(System.String)
    open func set_PageHandler(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_PageHandler_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Route()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_Route
    open func get_Route() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_String__get_Route_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Route(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_Route(System.String)
    open func set_Route(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_Route_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.get_RouteValues
    open func get_RouteValues() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.set_RouteValues(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_RouteValues(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormActionTagHelper_void__set_RouteValues_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the action method.
            

    */
    open var Action : Optional<dotnet.System.String> {
        get {
            return try! get_Action();
        }
        set(v) {
            return try! set_Action(value: v!);
        }
    }
    /**
    
            The name of the area.
            

    */
    open var Area : Optional<dotnet.System.String> {
        get {
            return try! get_Area();
        }
        set(v) {
            return try! set_Area(value: v!);
        }
    }
    /**
    
            The name of the controller.
            

    */
    open var Controller : Optional<dotnet.System.String> {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v!);
        }
    }
    /**
    
            Gets or sets the URL fragment.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The name of the page.
            

    */
    open var Page : Optional<dotnet.System.String> {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v!);
        }
    }
    /**
    
            The name of the page handler.
            

    */
    open var PageHandler : Optional<dotnet.System.String> {
        get {
            return try! get_PageHandler();
        }
        set(v) {
            return try! set_PageHandler(value: v!);
        }
    }
    /**
    
            Name of the route.
            

    */
    open var Route : Optional<dotnet.System.String> {
        get {
            return try! get_Route();
        }
        set(v) {
            return try! set_Route(value: v!);
        }
    }
    /**
    
            Additional parameters for the route.
            

    */
    open var RouteValues : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // FormActionTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper
    /**
    
             implementation targeting <form> elements.
            

    */
open class FormTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Action()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Action
    open func get_Action() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Action(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Action(System.String)
    open func set_Action(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Action_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Controller()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Controller
    open func get_Controller() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Controller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Controller(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Controller(System.String)
    open func set_Controller(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Controller_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Area()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Area
    open func get_Area() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Area_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Area(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Area(System.String)
    open func set_Area(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Area_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Page()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Page
    open func get_Page() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Page_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Page(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Page(System.String)
    open func set_Page(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Page_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageHandler()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_PageHandler
    open func get_PageHandler() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_PageHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageHandler(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_PageHandler(System.String)
    open func set_PageHandler(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_PageHandler_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_Antiforgery()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Antiforgery
    open func get_Antiforgery() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_System_Nullable_bool___get_Antiforgery_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_Antiforgery(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Antiforgery(System.Nullable{System.Boolean})
    open func set_Antiforgery(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Antiforgery_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Fragment()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Fragment
    open func get_Fragment() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Fragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Fragment(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Fragment(System.String)
    open func set_Fragment(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Fragment_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Route()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Route
    open func get_Route() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Route_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Route(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Route(System.String)
    open func set_Route(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Route_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_Method
    open func get_Method() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_Method(System.String)
    open func set_Method(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_Method_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_RouteValues()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.get_RouteValues
    open func get_RouteValues() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_System_Collections_Generic_IDictionary_string_string___get_RouteValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RouteValues(System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.set_RouteValues(System.Collections.Generic.IDictionary{System.String,System.String})
    open func set_RouteValues(value : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper_void__set_RouteValues_0__1__System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The name of the action method.
            

    */
    open var Action : Optional<dotnet.System.String> {
        get {
            return try! get_Action();
        }
        set(v) {
            return try! set_Action(value: v!);
        }
    }
    /**
    
            Whether the antiforgery token should be generated.
            

    */
    open var Antiforgery : Optional<Bool> {
        get {
            return try! get_Antiforgery();
        }
        set(v) {
            return try! set_Antiforgery(value: v!);
        }
    }
    /**
    
            The name of the area.
            

    */
    open var Area : Optional<dotnet.System.String> {
        get {
            return try! get_Area();
        }
        set(v) {
            return try! set_Area(value: v!);
        }
    }
    /**
    
            The name of the controller.
            

    */
    open var Controller : Optional<dotnet.System.String> {
        get {
            return try! get_Controller();
        }
        set(v) {
            return try! set_Controller(value: v!);
        }
    }
    /**
    
            Gets or sets the URL fragment.
            

    */
    open var Fragment : Optional<dotnet.System.String> {
        get {
            return try! get_Fragment();
        }
        set(v) {
            return try! set_Fragment(value: v!);
        }
    }
    /**
    
            The HTTP method to use.
            

    */
    open var Method : Optional<dotnet.System.String> {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The name of the page.
            

    */
    open var Page : Optional<dotnet.System.String> {
        get {
            return try! get_Page();
        }
        set(v) {
            return try! set_Page(value: v!);
        }
    }
    /**
    
            The name of the page handler.
            

    */
    open var PageHandler : Optional<dotnet.System.String> {
        get {
            return try! get_PageHandler();
        }
        set(v) {
            return try! set_PageHandler(value: v!);
        }
    }
    /**
    
            Name of the route.
            

    */
    open var Route : Optional<dotnet.System.String> {
        get {
            return try! get_Route();
        }
        set(v) {
            return try! set_Route(value: v!);
        }
    }
    /**
    
            Additional parameters for the route.
            

    */
    open var RouteValues : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_RouteValues();
        }
        set(v) {
            return try! set_RouteValues(value: v!);
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // FormTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder
    /**
    
            Utility methods for 's that support
            attributes containing file globbing patterns.
            

    */
open class GlobbingUrlBuilder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.FileProviders.IFileProvider, Microsoft.Extensions.Caching.Memory.IMemoryCache, Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder.#ctor(Microsoft.Extensions.FileProviders.IFileProvider,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.AspNetCore.Http.PathString)
    /**
    
            Creates a new .
            

    - Parameter fileProvider: The file provider.
    - Parameter cache: The cache.
    - Parameter requestPathBase: The request path base.
    */
    public init(fileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider>, cache : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache>, requestPathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_ctor_0__3__IFileProvider_IMemoryCache_PathString(&__thrown, fileProvider?.get_handle() ?? nil, cache?.get_handle() ?? nil, requestPathBase.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IReadOnlyList<System.String> BuildUrlList(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder.BuildUrlList(System.String,System.String,System.String)
    /**
    
            Builds a list of URLs.
            

    - Parameter staticUrl: The statically declared URL. This will always be added to the result.
    - Parameter includePattern: The file globbing include pattern.
    - Parameter excludePattern: The file globbing exclude pattern.
    - Returns: The list of URLs

    */
    open func BuildUrlList(staticUrl : Optional<dotnet.System.String>, includePattern : Optional<dotnet.System.String>, excludePattern : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_System_Collections_Generic_IReadOnlyList_string___BuildUrlList_0__3__String_String_String(&__thrown, self.get_handle(), staticUrl?.get_handle() ?? nil, includePattern?.get_handle() ?? nil, excludePattern?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Caching.Memory.IMemoryCache get_Cache()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder.get_Cache
    open func get_Cache() throws -> Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_IMemoryCache__get_Cache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.FileProviders.IFileProvider get_FileProvider()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder.get_FileProvider
    open func get_FileProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_IFileProvider__get_FileProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_RequestPathBase()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.GlobbingUrlBuilder.get_RequestPathBase
    open func get_RequestPathBase() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_GlobbingUrlBuilder_PathString__get_RequestPathBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    /**
    
            The  to cache globbing results in.
            

    */
    open var Cache : Optional<aspnetcore.Microsoft.Extensions.Caching.Memory.IMemoryCache> {
        get {
            return try! get_Cache();
        }
    }
    /**
    
            The  used to watch for changes to file globbing results.
            

    */
    open var FileProvider : Optional<aspnetcore.Microsoft.Extensions.FileProviders.IFileProvider> {
        get {
            return try! get_FileProvider();
        }
    }
    /**
    
            The base path of the current request (i.e. ).
            

    */
    open var RequestPathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_RequestPathBase();
        }
    }
} // GlobbingUrlBuilder


// type: Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper
    /**
    
             implementation targeting <img> elements that supports file versioning.
            

    */
open class ImageTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Creates a new .
            

    - Parameter fileVersionProvider: The .
    - Parameter htmlEncoder: The  to use.
    - Parameter urlHelperFactory: The .
    */
    public init(fileVersionProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_ctor_0__3__IFileVersionProvider_HtmlEncoder_IUrlHelperFactory(&__thrown, fileVersionProvider?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, urlHelperFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Creates a new .
            This constructor is obsolete and will be removed in a future version.
            

    - Parameter hostingEnvironment: The .
    - Parameter cacheProvider: The .
    - Parameter fileVersionProvider: The .
    - Parameter htmlEncoder: The  to use.
    - Parameter urlHelperFactory: The .
    */
    public init(hostingEnvironment : Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment>, cacheProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider>, fileVersionProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_ctor_0__5__IWebHostEnvironment_TagHelperMemoryCacheProvider_IFileVersionProvider_HtmlEncoder_IUrlHelperFactory(&__thrown, hostingEnvironment?.get_handle() ?? nil, cacheProvider?.get_handle() ?? nil, fileVersionProvider?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, urlHelperFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Src()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.get_Src
    open func get_Src() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_String__get_Src_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Src(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.set_Src(System.String)
    open func set_Src(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_void__set_Src_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AppendVersion()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.get_AppendVersion
    open func get_AppendVersion() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_bool__get_AppendVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AppendVersion(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.set_AppendVersion(System.Boolean)
    open func set_AppendVersion(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ImageTagHelper_void__set_AppendVersion_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Value indicating if file version should be appended to the src urls.
            

    */
    open var AppendVersion : Bool {
        get {
            return try! get_AppendVersion();
        }
        set(v) {
            return try! set_AppendVersion(value: v);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Source of the image.
            

    */
    open var Src : Optional<dotnet.System.String> {
        get {
            return try! get_Src();
        }
        set(v) {
            return try! set_Src(value: v!);
        }
    }
} // ImageTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper
    /**
    
             implementation targeting <input> elements with an asp-for attribute.
            

    */
open class InputTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Format()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_Format
    open func get_Format() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_String__get_Format_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Format(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_Format(System.String)
    open func set_Format(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_Format_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InputTypeName()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_InputTypeName
    open func get_InputTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_String__get_InputTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InputTypeName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_InputTypeName(System.String)
    open func set_InputTypeName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_InputTypeName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            An expression to be evaluated against the current model.
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the
             result. Sets the generated "value" attribute to that formatted string.
            

    */
    open var Format : Optional<dotnet.System.String> {
        get {
            return try! get_Format();
        }
        set(v) {
            return try! set_Format(value: v!);
        }
    }
    /**
    
            The type of the <input> element.
            

    */
    open var InputTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_InputTypeName();
        }
        set(v) {
            return try! set_InputTypeName(value: v!);
        }
    }
    /**
    
            The name of the <input> element.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            The value of the <input> element.
            

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // InputTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper
    /**
    
             implementation targeting <label> elements with an asp-for attribute.
            

    */
open class LabelTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            An expression to be evaluated against the current model.
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // LabelTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper
    /**
    
             implementation targeting <link> elements that supports fallback href paths.
            

    */
open class LinkTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider, System.Text.Encodings.Web.HtmlEncoder, System.Text.Encodings.Web.JavaScriptEncoder, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider,System.Text.Encodings.Web.HtmlEncoder,System.Text.Encodings.Web.JavaScriptEncoder,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Creates a new .
            

    - Parameter hostingEnvironment: The .
    - Parameter cacheProvider: 
    - Parameter fileVersionProvider: The .
    - Parameter htmlEncoder: The .
    - Parameter javaScriptEncoder: The .
    - Parameter urlHelperFactory: The .
    */
    public init(hostingEnvironment : Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment>, cacheProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider>, fileVersionProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, javaScriptEncoder : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder>, urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_ctor_0__6__IWebHostEnvironment_TagHelperMemoryCacheProvider_IFileVersionProvider_HtmlEncoder_JavaScriptEncoder_IUrlHelperFactory(&__thrown, hostingEnvironment?.get_handle() ?? nil, cacheProvider?.get_handle() ?? nil, fileVersionProvider?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, javaScriptEncoder?.get_handle() ?? nil, urlHelperFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Href()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_Href
    open func get_Href() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_Href_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Href(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_Href(System.String)
    open func set_Href(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_Href_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HrefInclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_HrefInclude
    open func get_HrefInclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_HrefInclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HrefInclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_HrefInclude(System.String)
    open func set_HrefInclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_HrefInclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HrefExclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_HrefExclude
    open func get_HrefExclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_HrefExclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HrefExclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_HrefExclude(System.String)
    open func set_HrefExclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_HrefExclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackHref()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackHref
    open func get_FallbackHref() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackHref_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackHref(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackHref(System.String)
    open func set_FallbackHref(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackHref_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressFallbackIntegrity()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_SuppressFallbackIntegrity
    open func get_SuppressFallbackIntegrity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_bool__get_SuppressFallbackIntegrity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressFallbackIntegrity(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_SuppressFallbackIntegrity(System.Boolean)
    open func set_SuppressFallbackIntegrity(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_SuppressFallbackIntegrity_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_AppendVersion()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_AppendVersion
    open func get_AppendVersion() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_System_Nullable_bool___get_AppendVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_AppendVersion(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_AppendVersion(System.Nullable{System.Boolean})
    open func set_AppendVersion(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_AppendVersion_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackHrefInclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackHrefInclude
    open func get_FallbackHrefInclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackHrefInclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackHrefInclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackHrefInclude(System.String)
    open func set_FallbackHrefInclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackHrefInclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackHrefExclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackHrefExclude
    open func get_FallbackHrefExclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackHrefExclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackHrefExclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackHrefExclude(System.String)
    open func set_FallbackHrefExclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackHrefExclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackTestClass()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackTestClass
    open func get_FallbackTestClass() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackTestClass_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackTestClass(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackTestClass(System.String)
    open func set_FallbackTestClass(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackTestClass_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackTestProperty()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackTestProperty
    open func get_FallbackTestProperty() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackTestProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackTestProperty(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackTestProperty(System.String)
    open func set_FallbackTestProperty(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackTestProperty_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackTestValue()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.get_FallbackTestValue
    open func get_FallbackTestValue() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_String__get_FallbackTestValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackTestValue(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.set_FallbackTestValue(System.String)
    open func set_FallbackTestValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_LinkTagHelper_void__set_FallbackTestValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Value indicating if file version should be appended to the href urls.
            

    */
    open var AppendVersion : Optional<Bool> {
        get {
            return try! get_AppendVersion();
        }
        set(v) {
            return try! set_AppendVersion(value: v!);
        }
    }
    /**
    
            The URL of a CSS stylesheet to fallback to in the case the primary one fails.
            

    */
    open var FallbackHref : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackHref();
        }
        set(v) {
            return try! set_FallbackHref(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in
            the case the primary one fails.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            Must be used in conjunction with .
            

    */
    open var FallbackHrefExclude : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackHrefExclude();
        }
        set(v) {
            return try! set_FallbackHrefExclude(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary
            one fails.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            

    */
    open var FallbackHrefInclude : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackHrefInclude();
        }
        set(v) {
            return try! set_FallbackHrefInclude(value: v!);
        }
    }
    /**
    
            The class name defined in the stylesheet to use for the fallback test.
            Must be used in conjunction with  and ,
            and either  or .
            

    */
    open var FallbackTestClass : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackTestClass();
        }
        set(v) {
            return try! set_FallbackTestClass(value: v!);
        }
    }
    /**
    
            The CSS property name to use for the fallback test.
            Must be used in conjunction with  and ,
            and either  or .
            

    */
    open var FallbackTestProperty : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackTestProperty();
        }
        set(v) {
            return try! set_FallbackTestProperty(value: v!);
        }
    }
    /**
    
            The CSS property value to use for the fallback test.
            Must be used in conjunction with  and ,
            and either  or .
            

    */
    open var FallbackTestValue : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackTestValue();
        }
        set(v) {
            return try! set_FallbackTestValue(value: v!);
        }
    }
    /**
    
            Address of the linked resource.
            

    */
    open var Href : Optional<dotnet.System.String> {
        get {
            return try! get_Href();
        }
        set(v) {
            return try! set_Href(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            Must be used in conjunction with .
            

    */
    open var HrefExclude : Optional<dotnet.System.String> {
        get {
            return try! get_HrefExclude();
        }
        set(v) {
            return try! set_HrefExclude(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of CSS stylesheets to load.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            

    */
    open var HrefInclude : Optional<dotnet.System.String> {
        get {
            return try! get_HrefInclude();
        }
        set(v) {
            return try! set_HrefInclude(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Boolean value that determines if an integrity hash will be compared with  value.
            

    */
    open var SuppressFallbackIntegrity : Bool {
        get {
            return try! get_SuppressFallbackIntegrity();
        }
        set(v) {
            return try! set_SuppressFallbackIntegrity(value: v);
        }
    }
} // LinkTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper
    /**
    
             implementation targeting <option> elements.
            

    */
open class OptionTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Specifies a value for the <option> element.
            

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // OptionTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper
    /**
    
            Renders a partial view.
            

    */
open class PartialTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope)
    /**
    
            Creates a new .
            

    - Parameter viewEngine: The  used to locate the partial view.
    - Parameter viewBufferScope: The .
    */
    public init(viewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine>, viewBufferScope : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_ctor_0__2__ICompositeViewEngine_IViewBufferScope(&__thrown, viewEngine?.get_handle() ?? nil, viewBufferScope?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_Model(System.Object)
    open func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Optional()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_Optional
    open func get_Optional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_bool__get_Optional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Optional(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_Optional(System.Boolean)
    open func set_Optional(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_Optional_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackName()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_FallbackName
    open func get_FallbackName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_String__get_FallbackName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_FallbackName(System.String)
    open func set_FallbackName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_FallbackName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_ViewData
    open func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            View to lookup if the view specified by  cannot be located.
            

    */
    open var FallbackName : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackName();
        }
        set(v) {
            return try! set_FallbackName(value: v!);
        }
    }
    /**
    
            An expression to be evaluated against the current model. Cannot be used together with .
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    
            The model to pass into the partial view. Cannot be used together with .
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
    /**
    
            The name or path of the partial view that is rendered to the response.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    
            When optional, executing the tag helper will no-op if the view cannot be located.
            Otherwise will throw stating the view could not be found.
            

    */
    open var Optional : Bool {
        get {
            return try! get_Optional();
        }
        set(v) {
            return try! set_Optional(value: v);
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
    /**
    
            A  to pass into the partial view.
            

    */
    open var ViewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v!);
        }
    }
} // PartialTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper
    /**
    
            A  that saves the state of Razor components rendered on the page up to that point.
            

    */
open class PersistComponentStateTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode> get_PersistenceMode()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.get_PersistenceMode
    open func get_PersistenceMode() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_System_Nullable_Microsoft_AspNetCore_Mvc_TagHelpers_PersistenceMode___get_PersistenceMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode(val: System_Int32_unbox(__return!)) : nil;
        }
    }
    // [IsSpecialName] void set_PersistenceMode(System.Nullable<Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.set_PersistenceMode(System.Nullable{Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode})
    open func set_PersistenceMode(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_PersistComponentStateTagHelper_void__set_PersistenceMode_0__1__System_Nullable_Microsoft_AspNetCore_Mvc_TagHelpers_PersistenceMode_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  for the state to persist.
            

    */
    open var PersistenceMode : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode> {
        get {
            return try! get_PersistenceMode();
        }
        set(v) {
            return try! set_PersistenceMode(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the current request.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // PersistComponentStateTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode
    /**
    
            The way to persist the component application state.
            

    */
public struct PersistenceMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_PersistenceMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode Server
    /**
    
            The state is persisted for a Blazor Server application.
            

    */
    public static var Server : aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode(val: Microsoft_AspNetCore_Mvc_TagHelpers_PersistenceMode_get_Server());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode WebAssembly
    /**
    
            The state is persisted for a Blazor WebAssembly application.
            

    */
    public static var WebAssembly : aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode(val: Microsoft_AspNetCore_Mvc_TagHelpers_PersistenceMode_get_WebAssembly());
            return __return;
        }
    }
} // PersistenceMode


// type: Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper
    /**
    
             implementation targeting all form elements
            to generate content before the form end tag.
            

    */
open class RenderAtEndOfFormTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    */
    open override func Init(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // RenderAtEndOfFormTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper
    /**
    
             implementation targeting <script> elements that supports fallback src paths.
            

    */
open class ScriptTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider, System.Text.Encodings.Web.HtmlEncoder, System.Text.Encodings.Web.JavaScriptEncoder, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider,System.Text.Encodings.Web.HtmlEncoder,System.Text.Encodings.Web.JavaScriptEncoder,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory)
    /**
    
            Creates a new .
            

    - Parameter hostingEnvironment: The .
    - Parameter cacheProvider: The .
    - Parameter fileVersionProvider: The .
    - Parameter htmlEncoder: The .
    - Parameter javaScriptEncoder: The .
    - Parameter urlHelperFactory: The .
    */
    public init(hostingEnvironment : Optional<aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostEnvironment>, cacheProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Razor.Infrastructure.TagHelperMemoryCacheProvider>, fileVersionProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, javaScriptEncoder : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder>, urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_ctor_0__6__IWebHostEnvironment_TagHelperMemoryCacheProvider_IFileVersionProvider_HtmlEncoder_JavaScriptEncoder_IUrlHelperFactory(&__thrown, hostingEnvironment?.get_handle() ?? nil, cacheProvider?.get_handle() ?? nil, fileVersionProvider?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, javaScriptEncoder?.get_handle() ?? nil, urlHelperFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Src()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_Src
    open func get_Src() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_Src_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Src(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_Src(System.String)
    open func set_Src(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_Src_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SrcInclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_SrcInclude
    open func get_SrcInclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_SrcInclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SrcInclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_SrcInclude(System.String)
    open func set_SrcInclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_SrcInclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SrcExclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_SrcExclude
    open func get_SrcExclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_SrcExclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SrcExclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_SrcExclude(System.String)
    open func set_SrcExclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_SrcExclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackSrc()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_FallbackSrc
    open func get_FallbackSrc() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_FallbackSrc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackSrc(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_FallbackSrc(System.String)
    open func set_FallbackSrc(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_FallbackSrc_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SuppressFallbackIntegrity()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_SuppressFallbackIntegrity
    open func get_SuppressFallbackIntegrity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_bool__get_SuppressFallbackIntegrity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SuppressFallbackIntegrity(bool)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_SuppressFallbackIntegrity(System.Boolean)
    open func set_SuppressFallbackIntegrity(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_SuppressFallbackIntegrity_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> get_AppendVersion()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_AppendVersion
    open func get_AppendVersion() throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_System_Nullable_bool___get_AppendVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] void set_AppendVersion(System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_AppendVersion(System.Nullable{System.Boolean})
    open func set_AppendVersion(value : Optional<Bool>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_AppendVersion_0__1__System_Nullable_bool_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackSrcInclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_FallbackSrcInclude
    open func get_FallbackSrcInclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_FallbackSrcInclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackSrcInclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_FallbackSrcInclude(System.String)
    open func set_FallbackSrcInclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_FallbackSrcInclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackSrcExclude()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_FallbackSrcExclude
    open func get_FallbackSrcExclude() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_FallbackSrcExclude_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackSrcExclude(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_FallbackSrcExclude(System.String)
    open func set_FallbackSrcExclude(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_FallbackSrcExclude_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FallbackTestExpression()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.get_FallbackTestExpression
    open func get_FallbackTestExpression() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_String__get_FallbackTestExpression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FallbackTestExpression(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.set_FallbackTestExpression(System.String)
    open func set_FallbackTestExpression(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper_void__set_FallbackTestExpression_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Value indicating if file version should be appended to src urls.
            

    */
    open var AppendVersion : Optional<Bool> {
        get {
            return try! get_AppendVersion();
        }
        set(v) {
            return try! set_AppendVersion(value: v!);
        }
    }
    /**
    
            The URL of a Script tag to fallback to in the case the primary one fails.
            

    */
    open var FallbackSrc : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackSrc();
        }
        set(v) {
            return try! set_FallbackSrc(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in
            the case the primary one fails.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            Must be used in conjunction with .
            

    */
    open var FallbackSrcExclude : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackSrcExclude();
        }
        set(v) {
            return try! set_FallbackSrcExclude(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the
            primary one fails.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            

    */
    open var FallbackSrcInclude : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackSrcInclude();
        }
        set(v) {
            return try! set_FallbackSrcInclude(value: v!);
        }
    }
    /**
    
            The script method defined in the primary script to use for the fallback test.
            

    */
    open var FallbackTestExpression : Optional<dotnet.System.String> {
        get {
            return try! get_FallbackTestExpression();
        }
        set(v) {
            return try! set_FallbackTestExpression(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Address of the external script to use.
            

    */
    open var Src : Optional<dotnet.System.String> {
        get {
            return try! get_Src();
        }
        set(v) {
            return try! set_Src(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            Must be used in conjunction with .
            

    */
    open var SrcExclude : Optional<dotnet.System.String> {
        get {
            return try! get_SrcExclude();
        }
        set(v) {
            return try! set_SrcExclude(value: v!);
        }
    }
    /**
    
            A comma separated list of globbed file patterns of JavaScript scripts to load.
            The glob patterns are assessed relative to the application's 'webroot' setting.
            

    */
    open var SrcInclude : Optional<dotnet.System.String> {
        get {
            return try! get_SrcInclude();
        }
        set(v) {
            return try! set_SrcInclude(value: v!);
        }
    }
    /**
    
            Boolean value that determines if an integrity hash will be compared with  value.
            

    */
    open var SuppressFallbackIntegrity : Bool {
        get {
            return try! get_SuppressFallbackIntegrity();
        }
        set(v) {
            return try! set_SuppressFallbackIntegrity(value: v);
        }
    }
} // ScriptTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper
    /**
    
             implementation targeting <select> elements with asp-for and/or
            asp-items attribute(s).
            

    */
open class SelectTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    */
    open override func Init(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.get_Items
    open func get_Items() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Items(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.set_Items(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    open func set_Items(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__set_Items_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            An expression to be evaluated against the current model.
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements.
            

    */
    open var Items : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>> {
        get {
            return try! get_Items();
        }
        set(v) {
            return try! set_Items(value: v!);
        }
    }
    /**
    
            The name of the <input> element.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // SelectTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions
public struct TagHelperOutputExtensions {
    // void CopyHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.CopyHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    
            Copies a user-provided attribute from 's
             to 's
            .
            

    - Parameter tagHelperOutput: The  this method extends.
    - Parameter attributeName: The name of the bound attribute.
    - Parameter context: The .
    */
    public static func CopyHtmlAttribute(tagHelperOutput : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, attributeName : Optional<dotnet.System.String>, context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TagHelperOutputExtensions_void__CopyHtmlAttribute_0__3__TagHelperOutput_String_TagHelperContext(&__thrown, tagHelperOutput?.get_handle() ?? nil, attributeName?.get_handle() ?? nil, context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MergeAttributes(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.MergeAttributes(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)
    /**
    
            Merges the given 's  into the
            .
            

    - Parameter tagHelperOutput: The  this method extends.
    - Parameter tagBuilder: The  to merge attributes from.
    */
    public static func MergeAttributes(tagHelperOutput : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, tagBuilder : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TagHelperOutputExtensions_void__MergeAttributes_0__2__TagHelperOutput_TagBuilder(&__thrown, tagHelperOutput?.get_handle() ?? nil, tagBuilder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveRange(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveRange(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})
    /**
    
            Removes the given  from 's
            .
            

    - Parameter tagHelperOutput: The  this method extends.
    - Parameter attributes: Attributes to remove.
    */
    public static func RemoveRange(tagHelperOutput : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, attributes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TagHelperOutputExtensions_void__RemoveRange_0__2__TagHelperOutput_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_(&__thrown, tagHelperOutput?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.AddClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.String,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Adds the given  to the 's
            .
            

    - Parameter tagHelperOutput: The  this method extends.
    - Parameter classValue: The class value to add.
    - Parameter htmlEncoder: The current HTML encoder.
    */
    public static func AddClass(tagHelperOutput : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, classValue : Optional<dotnet.System.String>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TagHelperOutputExtensions_void__AddClass_0__3__TagHelperOutput_String_HtmlEncoder(&__thrown, tagHelperOutput?.get_handle() ?? nil, classValue?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.String,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Removes the given  from the 's
            .
            

    - Parameter tagHelperOutput: The  this method extends.
    - Parameter classValue: The class value to remove.
    - Parameter htmlEncoder: The current HTML encoder.
    */
    public static func RemoveClass(tagHelperOutput : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, classValue : Optional<dotnet.System.String>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TagHelperOutputExtensions_void__RemoveClass_0__3__TagHelperOutput_String_HtmlEncoder(&__thrown, tagHelperOutput?.get_handle() ?? nil, classValue?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TagHelperOutputExtensions


// type: Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper
    /**
    
             implementation targeting <textarea> elements with an asp-for attribute.
            

    */
open class TextAreaTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_TextAreaTagHelper_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            An expression to be evaluated against the current model.
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    
            The name of the <input> element.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // TextAreaTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper
    /**
    
             implementation targeting any HTML element with an asp-validation-for
            attribute.
            

    */
open class ValidationMessageTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression get_For()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.get_For
    open func get_For() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_ModelExpression__get_For_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.set_For(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression)
    open func set_For(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper_void__set_For_0__1__ModelExpression(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets an expression to be evaluated against the current model.
            

    */
    open var For : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        get {
            return try! get_For();
        }
        set(v) {
            return try! set_For(value: v!);
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // ValidationMessageTagHelper


// type: Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper
    /**
    
             implementation targeting any HTML element with an asp-validation-summary
            attribute.
            

    */
open class ValidationSummaryTagHelper
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator)
    /**
    
            Creates a new .
            

    - Parameter generator: The .
    */
    public init(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_ctor_0__1__IHtmlGenerator(&__thrown, generator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open override func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.get_Order
    open override func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary get_ValidationSummary()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.get_ValidationSummary
    open func get_ValidationSummary() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_ValidationSummary__get_ValidationSummary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary(val: __return);
        }
    }
    // [IsSpecialName] void set_ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.set_ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary)
    open func set_ValidationSummary(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper_void__set_ValidationSummary_0__1__ValidationSummary(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    open override var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
    /**
    
            If  or , appends a validation
            summary. Otherwise (, the default), this tag helper does nothing.
            

    */
    open var ValidationSummary : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary {
        get {
            return try! get_ValidationSummary();
        }
        set(v) {
            return try! set_ValidationSummary(value: v);
        }
    }
    /**
    
            Gets the  of the executing view.
            

    */
    open var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v!);
        }
    }
} // ValidationSummaryTagHelper


}
// Microsoft.AspNetCore.Mvc.TagHelpers.Cache
extension Microsoft.AspNetCore.Mvc.TagHelpers.Cache {
// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey
    /**
    
            An instance of  represents the state of 
            or  keys.
            

    */
open class CacheTagKey
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.#ctor(Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    
            Creates an instance of  for a specific .
            

    - Parameter tagHelper: The .
    - Parameter context: The .
    */
    public init(tagHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper>, context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_ctor_0__2__CacheTagHelper_TagHelperContext(&__thrown, tagHelper?.get_handle() ?? nil, context?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.#ctor(Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper)
    /**
    
            Creates an instance of  for a specific .
            

    - Parameter tagHelper: The .
    */
    public init(tagHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_ctor_0__1__DistributedCacheTagHelper(&__thrown, tagHelper?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GenerateKey()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.GenerateKey
    /**
    
            Creates a  representation of the key.
            

    - Returns: A  uniquely representing the key.

    */
    open func GenerateKey() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_String__GenerateKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GenerateHashedKey()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.GenerateHashedKey
    /**
    
            Creates a hashed value of the key.
            

    - Returns: A cryptographic hash of the key.

    */
    open func GenerateHashedKey() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_String__GenerateHashedKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.Equals(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey)
    /**
    */
    open /* method final */ func Equals(other : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_bool__Equals_0__1__CacheTagKey(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_CacheTagKey_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // CacheTagKey


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormatter
    /**
    
            Implements  by serializing the content
            in UTF8.
            

    */
open class DistributedCacheTagHelperFormatter
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormatter_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormatter_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormatter.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> SerializeAsync(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormatter.SerializeAsync(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext)
    /**
    */
    open /* method final */ func SerializeAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormatter_System_Threading_Tasks_Task_u8Array___SerializeAsync_0__1__DistributedCacheTagHelperFormattingContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.HtmlString> DeserializeAsync(System.Byte[])
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormatter.DeserializeAsync(System.Byte[])
    /**
    */
    open /* method final */ func DeserializeAsync(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.HtmlString>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_HtmlString___DeserializeAsync_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DistributedCacheTagHelperFormatter


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext
    /**
    
            Represents an object containing the information to serialize with .
            

    */
open class DistributedCacheTagHelperFormattingContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormattingContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormattingContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormattingContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.HtmlString get_Html()
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext.get_Html
    open func get_Html() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormattingContext_HtmlString__get_Html_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.HtmlString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Html(Microsoft.AspNetCore.Html.HtmlString)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext.set_Html(Microsoft.AspNetCore.Html.HtmlString)
    open func set_Html(value : Optional<aspnetcore.Microsoft.AspNetCore.Html.HtmlString>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperFormattingContext_void__set_Html_0__1__HtmlString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  instance.
            

    */
    open var Html : Optional<aspnetcore.Microsoft.AspNetCore.Html.HtmlString> {
        get {
            return try! get_Html();
        }
        set(v) {
            return try! set_Html(value: v!);
        }
    }
} // DistributedCacheTagHelperFormattingContext


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperService
    /**
    
            Implements  and ensures
            multiple concurrent requests are gated.
            The entries are stored like this:
            
            
            Int32 representing the hashed cache key size.
            
            
            The UTF8 encoded hashed cache key.
            
            
            The UTF8 encoded cached content.
            
            
            

    */
open class DistributedCacheTagHelperService
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperService_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage, Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter, System.Text.Encodings.Web.HtmlEncoder, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperService.#ctor(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage,Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter,System.Text.Encodings.Web.HtmlEncoder,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter storage: The 's .
    - Parameter formatter: The  for cache value serialization.
    - Parameter HtmlEncoder: The  used to encode cache content.
    - Parameter loggerFactory: The .
    */
    public init(storage : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage>, formatter : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter>, HtmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperService_ctor_0__4__IDistributedCacheTagHelperStorage_IDistributedCacheTagHelperFormatter_HtmlEncoder_ILoggerFactory(&__thrown, storage?.get_handle() ?? nil, formatter?.get_handle() ?? nil, HtmlEncoder?.get_handle() ?? nil, loggerFactory?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> ProcessContentAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperService.ProcessContentAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
    /**
    */
    open /* method final */ func ProcessContentAsync(output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, key : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey>, options : Optional<aspnetcore.Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___ProcessContentAsync_0__3__TagHelperOutput_CacheTagKey_DistributedCacheEntryOptions(&__thrown, self.get_handle(), output?.get_handle() ?? nil, key?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DistributedCacheTagHelperService


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperStorage
    /**
    
            Implements  by storing the content
            in using  as the store.
            

    */
open class DistributedCacheTagHelperStorage
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperStorage_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperStorage_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperStorage.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)
    /**
    
            Creates a new .
            

    - Parameter distributedCache: The  to use.
    */
    public init(distributedCache : Optional<aspnetcore.Microsoft.Extensions.Caching.Distributed.IDistributedCache>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperStorage_ctor_0__1__IDistributedCache(&__thrown, distributedCache?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetAsync(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperStorage.GetAsync(System.String)
    /**
    */
    open /* method final */ func GetAsync(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperStorage_System_Threading_Tasks_Task_u8Array___GetAsync_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task SetAsync(System.String, System.Byte[], Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperStorage.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
    /**
    */
    open /* method final */ func SetAsync(key : Optional<dotnet.System.String>, value : Optional<dotnet.System_Arr<Swift.UInt8>>, options : Optional<aspnetcore.Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_DistributedCacheTagHelperStorage_Task__SetAsync_0__3__String_u8Array_DistributedCacheEntryOptions(&__thrown, self.get_handle(), key?.get_handle() ?? nil, (value?.get_handle()), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DistributedCacheTagHelperStorage


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter
    /**
    
            An implementation of this interface provides a service to
            serialize html fragments for being store by 
            

    */
open class IDistributedCacheTagHelperFormatter
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> SerializeAsync(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter.SerializeAsync(Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext)
    /**
    
            Serializes some html content.
            

    - Parameter context: The  to serialize.
    - Returns: The serialized result.

    */
    open func SerializeAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.DistributedCacheTagHelperFormattingContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter_System_Threading_Tasks_Task_u8Array___SerializeAsync_0__1__DistributedCacheTagHelperFormattingContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.HtmlString> DeserializeAsync(System.Byte[])
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperFormatter.DeserializeAsync(System.Byte[])
    /**
    
            Deserialize some html content.
            

    - Parameter value: The value to deserialize.
    - Returns: The deserialized content, null otherwise.

    */
    open func DeserializeAsync(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.HtmlString>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_HtmlString___DeserializeAsync_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IDistributedCacheTagHelperFormatter


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperService
    /**
    
            An implementation of this interface provides a service to process
            the content or fetches it from cache for distributed cache tag helpers.
            

    */
open class IDistributedCacheTagHelperService
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> ProcessContentAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperService.ProcessContentAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
    /**
    
            Processes the html content of a distributed cache tag helper.
            

    - Parameter output: The .
    - Parameter key: The key in the storage.
    - Parameter options: The .
    - Returns: A cached or new content for the cache tag helper.

    */
    open func ProcessContentAsync(output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>, key : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.Cache.CacheTagKey>, options : Optional<aspnetcore.Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___ProcessContentAsync_0__3__TagHelperOutput_CacheTagKey_DistributedCacheEntryOptions(&__thrown, self.get_handle(), output?.get_handle() ?? nil, key?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IDistributedCacheTagHelperService


// type: Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage
    /**
    
            An implementation of this interface provides a service to
            cache distributed html fragments from the <distributed-cache>
            tag helper.
            

    */
open class IDistributedCacheTagHelperStorage
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> GetAsync(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage.GetAsync(System.String)
    /**
    
            Gets the content from the cache and deserializes it.
            

    - Parameter key: The unique key to use in the cache.
    - Returns: The stored value if it exists, null otherwise.

    */
    open func GetAsync(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage_System_Threading_Tasks_Task_u8Array___GetAsync_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task SetAsync(System.String, System.Byte[], Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
// docid: M:Microsoft.AspNetCore.Mvc.TagHelpers.Cache.IDistributedCacheTagHelperStorage.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)
    /**
    
            Sets the content in the cache and serialized it.
            

    - Parameter key: The unique key to use in the cache.
    - Parameter value: The value to cache.
    - Parameter options: The cache entry options.
    */
    open func SetAsync(key : Optional<dotnet.System.String>, value : Optional<dotnet.System_Arr<Swift.UInt8>>, options : Optional<aspnetcore.Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage_Task__SetAsync_0__3__String_u8Array_DistributedCacheEntryOptions(&__thrown, self.get_handle(), key?.get_handle() ?? nil, (value?.get_handle()), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IDistributedCacheTagHelperStorage


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions
public struct TagHelperServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelper(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelper(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
             Adds MVC cache tag helper services to the application.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddCacheTagHelper(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_TagHelperServicesExtensions_IMvcCoreBuilder__AddCacheTagHelper_0__1__IMvcCoreBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})
    /**
    
             Configures the memory size limits on the cache of the .
            

    - Parameter builder: The .
    - Parameter configure: The to configure the cache options.
    - Returns: The .

    */
    public static func AddCacheTagHelperLimits(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_TagHelperServicesExtensions_IMvcBuilder__AddCacheTagHelperLimits_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddCacheTagHelperLimits(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>(configure);
        return try AddCacheTagHelperLimits(builder: builder, configure: del_configure);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})
    /**
    
             Configures the memory size limits on the cache of the .
            

    - Parameter builder: The .
    - Parameter configure: The to configure the cache options.
    - Returns: The .

    */
    public static func AddCacheTagHelperLimits(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_TagHelperServicesExtensions_IMvcCoreBuilder__AddCacheTagHelperLimits_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_TagHelpers_CacheTagHelperOptions_(&__thrown, builder?.get_handle() ?? nil, (configure?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddCacheTagHelperLimits(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>(configure);
        return try AddCacheTagHelperLimits(builder: builder, configure: del_configure);
    }
} // TagHelperServicesExtensions


}



public protocol Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperFormatter
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperService
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_TagHelpers_Cache_IDistributedCacheTagHelperStorage
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD void CopyHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
extension aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput {
    public func CopyHtmlAttribute(attributeName : Optional<dotnet.System.String>, context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.CopyHtmlAttribute(tagHelperOutput: self, attributeName: attributeName, context: context);
    }
}

// EXTENSION METHOD void MergeAttributes(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)
extension aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput {
    public func MergeAttributes(tagBuilder : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.MergeAttributes(tagHelperOutput: self, tagBuilder: tagBuilder);
    }
}

// EXTENSION METHOD void RemoveRange(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
extension aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput {
    public func RemoveRange(attributes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveRange(tagHelperOutput: self, attributes: attributes);
    }
}

// EXTENSION METHOD void AddClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, System.Text.Encodings.Web.HtmlEncoder)
extension aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput {
    public func AddClass(classValue : Optional<dotnet.System.String>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.AddClass(tagHelperOutput: self, classValue: classValue, htmlEncoder: htmlEncoder);
    }
}

// EXTENSION METHOD void RemoveClass(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput, System.String, System.Text.Encodings.Web.HtmlEncoder)
extension aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput {
    public func RemoveClass(classValue : Optional<dotnet.System.String>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveClass(tagHelperOutput: self, classValue: classValue, htmlEncoder: htmlEncoder);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelper(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCacheTagHelper() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelper(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddCacheTagHelperLimits(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddCacheTagHelperLimits(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCacheTagHelperLimits(configure : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddCacheTagHelperLimits(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

