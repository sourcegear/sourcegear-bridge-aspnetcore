// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions
public struct SessionMiddlewareExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds the  to automatically enable session state for the application.
            

    - Parameter app: The .
    - Returns: The .

    */
    public static func UseSession(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_SessionMiddlewareExtensions_IApplicationBuilder__UseSession_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.SessionOptions)
// docid: M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.SessionOptions)
    /**
    
            Adds the  to automatically enable session state for the application.
            

    - Parameter app: The .
    - Parameter options: The .
    - Returns: The .

    */
    public static func UseSession(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder, options : aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_SessionMiddlewareExtensions_IApplicationBuilder__UseSession_0__2__IApplicationBuilder_SessionOptions(&__thrown, app.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // SessionMiddlewareExtensions


// type: Microsoft.AspNetCore.Builder.SessionOptions
    /**
    
            Represents the session state options for the application.
            

    */
open class SessionOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Builder_SessionOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Builder.SessionOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Builder_SessionOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_Cookie()
// docid: M:Microsoft.AspNetCore.Builder.SessionOptions.get_Cookie
    open func get_Cookie() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_SessionOptions_CookieBuilder__get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Builder.SessionOptions.set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_Cookie(value : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Builder_SessionOptions_void__set_Cookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_IdleTimeout()
// docid: M:Microsoft.AspNetCore.Builder.SessionOptions.get_IdleTimeout
    open func get_IdleTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_SessionOptions_TimeSpan__get_IdleTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_IdleTimeout(System.TimeSpan)
    // [IsSpecialName] System.TimeSpan get_IOTimeout()
// docid: M:Microsoft.AspNetCore.Builder.SessionOptions.get_IOTimeout
    open func get_IOTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_SessionOptions_TimeSpan__get_IOTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_IOTimeout(System.TimeSpan)
    /**
    
            Determines the settings used to create the cookie.
            
             defaults to .
             defaults to .
             defaults to .
             defaults to true
             defaults to false
            
            

    */
    open var Cookie : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        get {
            return try! get_Cookie();
        }
        set(v) {
            return try! set_Cookie(value: v);
        }
    }
    /**
    
            The maximum amount of time allowed to load a session from the store or to commit it back to the store.
            Note this may only apply to asynchronous operations. This timeout can be disabled using .
            

    */
    open var IOTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_IOTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_IOTimeout(System.TimeSpan)
    }
    /**
    
            The IdleTimeout indicates how long the session can be idle before its contents are abandoned. Each session access
            resets the timeout. Note this only applies to the content of the session, not the cookie.
            

    */
    open var IdleTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_IdleTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_IdleTimeout(System.TimeSpan)
    }
} // SessionOptions


}

// Microsoft.AspNetCore.Session
extension Microsoft.AspNetCore.Session {
// type: Microsoft.AspNetCore.Session.DistributedSession
    /**
    
            An  backed by an .
            

    */
open class DistributedSession
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_ISession
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Session_DistributedSession_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE ctor (span) .ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache, System.String, System.TimeSpan, System.TimeSpan, System.Func<bool>, Microsoft.Extensions.Logging.ILoggerFactory, bool)
    // bool TryGetValue(System.String, ref System.Byte[])
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.TryGetValue(System.String,System.Byte[]@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout dotnet.System_Arr<Swift.UInt8>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Session_DistributedSession_bool__TryGetValue_0__2__String_outu8Array(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System_Arr<Swift.UInt8>(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Set(System.String, System.Byte[])
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.Set(System.String,System.Byte[])
    /**
    */
    open /* method final */ func Set(key : dotnet.System.String, value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Session_DistributedSession_void__Set_0__2__String_u8Array(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.Remove(System.String)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Session_DistributedSession_void__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Session_DistributedSession_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task LoadAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.LoadAsync(System.Threading.CancellationToken)
    /**
    */
    open /* method final */ func LoadAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_DistributedSession_Task__LoadAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task CommitAsync(System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.CommitAsync(System.Threading.CancellationToken)
    /**
    */
    open /* method final */ func CommitAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_DistributedSession_Task__CommitAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsAvailable()
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.get_IsAvailable
    open /* method final */ func get_IsAvailable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_DistributedSession_bool__get_IsAvailable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.get_Id
    open /* method final */ func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_DistributedSession_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Session.DistributedSession.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_DistributedSession_System_Collections_Generic_IEnumerable_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    */
    public var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
    }
    /**
    */
    public var IsAvailable : Bool {
        get {
            return try! get_IsAvailable();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
} // DistributedSession


// type: Microsoft.AspNetCore.Session.DistributedSessionStore
    /**
    
            An  backed by an .
            

    */
open class DistributedSessionStore
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Session_ISessionStore
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Session_DistributedSessionStore_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.AspNetCore.Session.DistributedSessionStore.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Initializes a new instance of .
            

    - Parameter cache: The  used to store the session data.
    - Parameter loggerFactory: The .
    */
    public init(cache : aspnetcore.Microsoft.Extensions.Caching.Distributed.IDistributedCache, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Session_DistributedSessionStore_ctor_0__2__IDistributedCache_ILoggerFactory(&__thrown, cache.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (span) Microsoft.AspNetCore.Http.ISession Create(System.String, System.TimeSpan, System.TimeSpan, System.Func<bool>, bool)
} // DistributedSessionStore


// type: Microsoft.AspNetCore.Session.ISessionStore
    /**
    
            Storage for sessions that maintain user data while the user browses a web application.
            

    */
open class ISessionStore
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Session_ISessionStore
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Session_ISessionStore_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (span) Microsoft.AspNetCore.Http.ISession Create(System.String, System.TimeSpan, System.TimeSpan, System.Func<bool>, bool)
} // ISessionStore


// type: Microsoft.AspNetCore.Session.SessionDefaults
public struct SessionDefaults {
    // static field: System.String CookieName
    /**
    
            Represent the default cookie name, which is ".AspNetCore.Session".
            

    */
    public static var CookieName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Session_SessionDefaults_get_CookieName());
            return __return;
        }
    }
    // static field: System.String CookiePath
    /**
    
            Represents the default path used to create the cookie, which is "/".
            

    */
    public static var CookiePath : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Session_SessionDefaults_get_CookiePath());
            return __return;
        }
    }
} // SessionDefaults


// type: Microsoft.AspNetCore.Session.SessionFeature
    /**
    */
open class SessionFeature
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Http_Features_ISessionFeature
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Session_SessionFeature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Session.SessionFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Session_SessionFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.ISession get_Session()
// docid: M:Microsoft.AspNetCore.Session.SessionFeature.get_Session
    open /* method final */ func get_Session() throws -> aspnetcore.Microsoft.AspNetCore.Http.ISession {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_SessionFeature_ISession__get_Session_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.ISession(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Session(Microsoft.AspNetCore.Http.ISession)
// docid: M:Microsoft.AspNetCore.Session.SessionFeature.set_Session(Microsoft.AspNetCore.Http.ISession)
    open /* method final */ func set_Session(value : aspnetcore.Microsoft.AspNetCore.Http.ISession) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Session_SessionFeature_void__set_Session_0__1__ISession(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Session : aspnetcore.Microsoft.AspNetCore.Http.ISession {
        get {
            return try! get_Session();
        }
        set(v) {
            return try! set_Session(value: v);
        }
    }
} // SessionFeature


// type: Microsoft.AspNetCore.Session.SessionMiddleware
    /**
    
            Enables the session state for the application.
            

    */
open class SessionMiddleware
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Session_SessionMiddleware_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.DataProtection.IDataProtectionProvider, Microsoft.AspNetCore.Session.ISessionStore, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.SessionOptions>)
// docid: M:Microsoft.AspNetCore.Session.SessionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.AspNetCore.Session.ISessionStore,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.SessionOptions})
    /**
    
            Creates a new .
            

    - Parameter next: The  representing the next middleware in the pipeline.
    - Parameter loggerFactory: The  representing the factory that used to create logger instances.
    - Parameter dataProtectionProvider: The  used to protect and verify the cookie.
    - Parameter sessionStore: The  representing the session store.
    - Parameter options: The session configuration options.
    */
    public init(next : aspnetcore.Microsoft.AspNetCore.Http.RequestDelegate, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, dataProtectionProvider : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider, sessionStore : aspnetcore.Microsoft.AspNetCore.Session.ISessionStore, options : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Session_SessionMiddleware_ctor_0__5__RequestDelegate_ILoggerFactory_IDataProtectionProvider_ISessionStore_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Builder_SessionOptions_(&__thrown, next.get_handle(), loggerFactory.get_handle(), dataProtectionProvider.get_handle(), sessionStore.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task Invoke(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Invokes the logic of the middleware.
            

    - Parameter context: The .
    - Returns: A  that completes when the middleware has completed processing.

    */
    open func Invoke(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Session_SessionMiddleware_Task__Invoke_0__1__HttpContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // SessionMiddleware


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions
public struct SessionServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services required for application session state.
            

    - Parameter services: The  to add the services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddSession(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_SessionServiceCollectionExtensions_IServiceCollection__AddSession_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.SessionOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.SessionOptions})
    /**
    
            Adds services required for application session state.
            

    - Parameter services: The  to add the services to.
    - Parameter configure: The session options to configure the middleware with.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddSession(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_SessionServiceCollectionExtensions_IServiceCollection__AddSession_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_Builder_SessionOptions_(&__thrown, services.get_handle(), configure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddSession(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>(configure);
        return try AddSession(services: services, configure: del_configure);
    }
} // SessionServiceCollectionExtensions


}



public protocol Microsoft_AspNetCore_Session_ISessionStore
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseSession() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Builder.SessionOptions)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseSession(options : aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())), options: options);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddSession() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.Builder.SessionOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddSession(configure : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: configure);
    }
    // delegate closure overload
    public func AddSession(configure : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configure = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Builder.SessionOptions>(configure);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configure: del_configure);
    }
}

