// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Components
// Microsoft.AspNetCore.Components.Authorization
extension Microsoft.AspNetCore.Components.Authorization {
// type: Microsoft.AspNetCore.Components.Authorization.AuthenticationState
    /**
    
            Provides information about the currently authenticated user, if any.
            

    */
open class AuthenticationState
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthenticationState_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_AuthenticationState_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationState.#ctor(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Constructs an instance of .
            

    - Parameter user: A  representing the user.
    */
    public init(user : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Authorization_AuthenticationState_ctor_0__1__ClaimsPrincipal(&__thrown, user.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationState.get_User
    open func get_User() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthenticationState_ClaimsPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    /**
    
            Gets a  that describes the current user.
            

    */
    open var User : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_User();
        }
    }
} // AuthenticationState


// type: Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler
    /**
    
            A handler for the  event.
            

    */
public final class AuthenticationStateChangedHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler.Invoke(System.Threading.Tasks.Task{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    public func Invoke(task : dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_void__Invoke_0__1__System_Threading_Tasks_Task_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), task.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>, System.AsyncCallback, System.Object)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler.BeginInvoke(System.Threading.Tasks.Task{Microsoft.AspNetCore.Components.Authorization.AuthenticationState},System.AsyncCallback,System.Object)
    public func BeginInvoke(task : dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_IAsyncResult__BeginInvoke_0__3__System_Threading_Tasks_Task_Microsoft_AspNetCore_Components_Authorization_AuthenticationState__AsyncCallback_Object(&__thrown, self.get_handle(), task.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public convenience init(_ __closure_Invoke : @escaping (dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws -> Void) throws
    {
        let __interlude_Invoke : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, task : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try __closure_Invoke(dotnet.System.Threading.Tasks.Task_1(hndl: task));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        func __cb_Invoke(pdata_interlude : UnsafeRawPointer, thrown : UnsafeMutablePointer<NullableHandle>, task : NonnullHandle) -> Void
        {
            let f_interlude = Unmanaged<AnyObject>.fromOpaque(pdata_interlude).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f_interlude(thrown, task);
        }
        let __pdata_Invoke = UnsafeRawPointer(Unmanaged.passRetained(__interlude_Invoke as AnyObject).toOpaque());

        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_create(
            &__thrown,
            __cb_Invoke,
            __pdata_Invoke,
            nil
            );
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h);
        }
    }
    // void Invoke(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler.Invoke(System.Threading.Tasks.Task{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    public func callAsFunction(task : dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthenticationStateChangedHandler_void__Invoke_0__1__System_Threading_Tasks_Task_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), task.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AuthenticationStateChangedHandler


// type: Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider
    /**
    
            Provides information about the authentication state of the current user.
            

    */
open class AuthenticationStateProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthenticationStateProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_AuthenticationStateProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> GetAuthenticationStateAsync()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.GetAuthenticationStateAsync
    /**
    
            Asynchronously gets an  that describes the current user.
            

    - Returns: A task that, when resolved, gives an  instance that describes the current user.

    */
    open func GetAuthenticationStateAsync() async throws -> aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthenticationStateProvider_System_Threading_Tasks_Task_Microsoft_AspNetCore_Components_Authorization_AuthenticationState___GetAuthenticationStateAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // [IsSpecialName] void add_AuthenticationStateChanged(Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.add_AuthenticationStateChanged(Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler)
    open func add_AuthenticationStateChanged(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthenticationStateProvider_void__add_AuthenticationStateChanged_0__1__AuthenticationStateChangedHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_AuthenticationStateChanged(value : @escaping (dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler(value);
        return try add_AuthenticationStateChanged(value: del_value);
    }
    // [IsSpecialName] void remove_AuthenticationStateChanged(Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.remove_AuthenticationStateChanged(Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler)
    open func remove_AuthenticationStateChanged(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthenticationStateProvider_void__remove_AuthenticationStateChanged_0__1__AuthenticationStateChangedHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_AuthenticationStateChanged(value : @escaping (dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationStateChangedHandler(value);
        return try remove_AuthenticationStateChanged(value: del_value);
    }
} // AuthenticationStateProvider


// type: Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView
    /**
    
             Combines the behaviors of  and ,
             so that it displays the page matching the specified route but only if the user
             is authorized to see it.
            
             Additionally, this component supplies a cascading parameter of type ,
             which makes the user's current authentication state available to descendants.
             

    */
public final class AuthorizeRouteView
    :
    aspnetcore.Microsoft.AspNetCore.Components.RouteView
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.#ctor
    /**
    
            Initialize a new instance of a .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> get_NotAuthorized()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.get_NotAuthorized
    public func get_NotAuthorized() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState___get_NotAuthorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NotAuthorized(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.set_NotAuthorized(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    public func set_NotAuthorized(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_void__set_NotAuthorized_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_NotAuthorized(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>(value);
        return try set_NotAuthorized(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_Authorizing()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.get_Authorizing
    public func get_Authorizing() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_RenderFragment__get_Authorizing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Authorizing(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.set_Authorizing(Microsoft.AspNetCore.Components.RenderFragment)
    public func set_Authorizing(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_void__set_Authorizing_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_Authorizing(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_Authorizing(value: del_value);
    }
    // [IsSpecialName] System.Object get_Resource()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.get_Resource
    public func get_Resource() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_Object__get_Resource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Resource(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.set_Resource(System.Object)
    public func set_Resource(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeRouteView_void__set_Resource_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The content that will be displayed while asynchronous authorization is in progress.
            

    */
    public var Authorizing : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_Authorizing();
        }
        set(v) {
            return try! set_Authorizing(value: v!);
        }
    }
    /**
    
            The content that will be displayed if the user is not authorized.
            

    */
    public var NotAuthorized : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        get {
            return try! get_NotAuthorized();
        }
        set(v) {
            return try! set_NotAuthorized(value: v!);
        }
    }
    /**
    
            The resource to which access is being controlled.
            

    */
    public var Resource : Optional<dotnet.System.Object> {
        get {
            return try! get_Resource();
        }
        set(v) {
            return try! set_Resource(value: v!);
        }
    }
} // AuthorizeRouteView


// type: Microsoft.AspNetCore.Components.Authorization.AuthorizeView
    /**
    
            Displays differing content depending on the user's authorization status.
            

    */
open class AuthorizeView
    :
    aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthorizeView_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_AuthorizeView_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.#ctor
    /**
    
            Constructs an instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Authorization_AuthorizeView_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Policy()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.get_Policy
    open func get_Policy() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeView_String__get_Policy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Policy(System.String)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.set_Policy(System.String)
    open func set_Policy(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeView_void__set_Policy_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Roles()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.get_Roles
    open func get_Roles() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeView_String__get_Roles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Roles(System.String)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.set_Roles(System.String)
    open func set_Roles(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeView_void__set_Roles_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The policy name that determines whether the content can be displayed.
            

    */
    open var Policy : Optional<dotnet.System.String> {
        get {
            return try! get_Policy();
        }
        set(v) {
            return try! set_Policy(value: v!);
        }
    }
    /**
    
            A comma delimited list of roles that are allowed to display the content.
            

    */
    open var Roles : Optional<dotnet.System.String> {
        get {
            return try! get_Roles();
        }
        set(v) {
            return try! set_Roles(value: v!);
        }
    }
} // AuthorizeView


// type: Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore
    /**
    
            A base class for components that display differing content depending on the user's authorization status.
            

    */
open class AuthorizeViewCore
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState___get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_void__set_ChildContent_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>(value);
        return try set_ChildContent(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> get_NotAuthorized()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.get_NotAuthorized
    open func get_NotAuthorized() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState___get_NotAuthorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NotAuthorized(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.set_NotAuthorized(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    open func set_NotAuthorized(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_void__set_NotAuthorized_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_NotAuthorized(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>(value);
        return try set_NotAuthorized(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> get_Authorized()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.get_Authorized
    open func get_Authorized() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState___get_Authorized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Authorized(Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.set_Authorized(Microsoft.AspNetCore.Components.RenderFragment{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    open func set_Authorized(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_void__set_Authorized_0__1__Microsoft_AspNetCore_Components_RenderFragment_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Authorized(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState) throws -> aspnetcore.Microsoft.AspNetCore.Components.RenderFragment) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>(value);
        return try set_Authorized(value: del_value);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_Authorizing()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.get_Authorizing
    open func get_Authorizing() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_RenderFragment__get_Authorizing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Authorizing(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.set_Authorizing(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_Authorizing(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_void__set_Authorizing_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_Authorizing(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_Authorizing(value: del_value);
    }
    // [IsSpecialName] System.Object get_Resource()
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.get_Resource
    open func get_Resource() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_Object__get_Resource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Resource(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.set_Resource(System.Object)
    open func set_Resource(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_AuthorizeViewCore_void__set_Resource_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The content that will be displayed if the user is authorized.
            If you specify a value for this parameter, do not also specify a value for .
            

    */
    open var Authorized : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        get {
            return try! get_Authorized();
        }
        set(v) {
            return try! set_Authorized(value: v!);
        }
    }
    /**
    
            The content that will be displayed while asynchronous authorization is in progress.
            

    */
    open var Authorizing : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_Authorizing();
        }
        set(v) {
            return try! set_Authorizing(value: v!);
        }
    }
    /**
    
            The content that will be displayed if the user is authorized.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
    /**
    
            The content that will be displayed if the user is not authorized.
            

    */
    open var NotAuthorized : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>> {
        get {
            return try! get_NotAuthorized();
        }
        set(v) {
            return try! set_NotAuthorized(value: v!);
        }
    }
    /**
    
            The resource to which access is being controlled.
            

    */
    open var Resource : Optional<dotnet.System.Object> {
        get {
            return try! get_Resource();
        }
        set(v) {
            return try! set_Resource(value: v!);
        }
    }
} // AuthorizeViewCore


// type: Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState
open class CascadingAuthenticationState
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_CascadingAuthenticationState_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_CascadingAuthenticationState_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Authorization_CascadingAuthenticationState_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.RenderFragment get_ChildContent()
// docid: M:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.get_ChildContent
    open func get_ChildContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Authorization_CascadingAuthenticationState_RenderFragment__get_ChildContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
// docid: M:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.set_ChildContent(Microsoft.AspNetCore.Components.RenderFragment)
    open func set_ChildContent(value : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_CascadingAuthenticationState_void__set_ChildContent_0__1__RenderFragment(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ChildContent(value : @escaping (aspnetcore.Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) throws -> Void) throws {
        let del_value = try aspnetcore.Microsoft.AspNetCore.Components.RenderFragment(value);
        return try set_ChildContent(value: del_value);
    }
    /**
    
            The content to which the authentication state should be provided.
            

    */
    open var ChildContent : Optional<aspnetcore.Microsoft.AspNetCore.Components.RenderFragment> {
        get {
            return try! get_ChildContent();
        }
        set(v) {
            return try! set_ChildContent(value: v!);
        }
    }
} // CascadingAuthenticationState


// type: Microsoft.AspNetCore.Components.Authorization.IHostEnvironmentAuthenticationStateProvider
    /**
    
            An interface implemented by  classes that can receive authentication
            state information from the host environment.
            

    */
open class IHostEnvironmentAuthenticationStateProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Components_Authorization_IHostEnvironmentAuthenticationStateProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Authorization_IHostEnvironmentAuthenticationStateProvider_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Components_Authorization_IHostEnvironmentAuthenticationStateProvider_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void SetAuthenticationState(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)
// docid: M:Microsoft.AspNetCore.Components.Authorization.IHostEnvironmentAuthenticationStateProvider.SetAuthenticationState(System.Threading.Tasks.Task{Microsoft.AspNetCore.Components.Authorization.AuthenticationState})
    /**
    
            Supplies updated authentication state data to the .
            

    - Parameter authenticationStateTask: A task that resolves with the updated .
    */
    open func SetAuthenticationState(authenticationStateTask : dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Authorization_IHostEnvironmentAuthenticationStateProvider_void__SetAuthenticationState_0__1__System_Threading_Tasks_Task_Microsoft_AspNetCore_Components_Authorization_AuthenticationState_(&__thrown, self.get_handle(), authenticationStateTask.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHostEnvironmentAuthenticationStateProvider


}




public protocol Microsoft_AspNetCore_Components_Authorization_IHostEnvironmentAuthenticationStateProvider
    :
    SGBridgeGetHandle
{
}

