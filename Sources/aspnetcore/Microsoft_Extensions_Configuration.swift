// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.Configuration
extension Microsoft.Extensions.Configuration {
// type: Microsoft.Extensions.Configuration.ChainedBuilderExtensions
public struct ChainedBuilderExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.IConfiguration)
    /**
    
            Adds an existing configuration to .
            

    - Parameter configurationBuilder: The  to add to.
    - Parameter config: The  to add.
    - Returns: The .

    */
    public static func AddConfiguration(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, config : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedBuilderExtensions_IConfigurationBuilder__AddConfiguration_0__2__IConfigurationBuilder_IConfiguration(&__thrown, configurationBuilder?.get_handle() ?? nil, config?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.Configuration.IConfiguration, bool)
// docid: M:Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)
    /**
    
            Adds an existing configuration to .
            

    - Parameter configurationBuilder: The  to add to.
    - Parameter config: The  to add.
    - Parameter shouldDisposeConfiguration: Whether the configuration should get disposed when the configuration provider is disposed.
    - Returns: The .

    */
    public static func AddConfiguration(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, config : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, shouldDisposeConfiguration : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedBuilderExtensions_IConfigurationBuilder__AddConfiguration_0__3__IConfigurationBuilder_IConfiguration_bool(&__thrown, configurationBuilder?.get_handle() ?? nil, config?.get_handle() ?? nil, Swift.Int32(shouldDisposeConfiguration ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ChainedBuilderExtensions


// type: Microsoft.Extensions.Configuration.ChainedConfigurationProvider
    /**
    
            Chained implementation of 
            

    */
open class ChainedConfigurationProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationProvider,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ChainedConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.ChainedConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.ChainedConfigurationSource)
    /**
    
            Initialize a new instance from the source configuration.
            

    - Parameter source: The source configuration.
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.ChainedConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ChainedConfigurationProvider_ctor_0__1__ChainedConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ChainedConfigurationProvider_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetChildKeys(System.Collections.Generic.IEnumerable<System.String>, System.String)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
    /**
    
            Returns the immediate descendant configuration keys for a given parent path based on this
            s data and the set of keys returned by all the preceding
            s.
            

    - Parameter earlierKeys: The child keys returned by the preceding providers for the same parent path.
    - Parameter parentPath: The parent path.
    - Returns: The child keys.

    */
    open /* method final */ func GetChildKeys(earlierKeys : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, parentPath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationProvider_System_Collections_Generic_IEnumerable_string___GetChildKeys_0__2__System_Collections_Generic_IEnumerable_string__String(&__thrown, self.get_handle(), (earlierKeys?.get_handle()), parentPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.GetReloadToken
    /**
    
            Returns a change token if this provider supports change tracking, null otherwise.
            

    - Returns: The change token.

    */
    open /* method final */ func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationProvider_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Load
    /**
    
            Loads configuration values from the source represented by this .
            

    */
    open /* method final */ func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ChainedConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.Set(System.String,System.String)
    /**
    
            Sets a configuration value for the specified key.
            

    - Parameter key: The key.
    - Parameter value: The value.
    */
    open /* method final */ func Set(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ChainedConfigurationProvider_void__Set_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGet(System.String, ref System.String)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationProvider.TryGet(System.String,System.String@)
    /**
    
            Tries to get a configuration value for the specified key.
            

    - Parameter key: The key.
    - Parameter value: The value.
    - Returns: True if a value for the specified key was found, otherwise false.

    */
    open /* method final */ func TryGet(key : Optional<dotnet.System.String>, value : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationProvider_bool__TryGet_0__2__String_outString(&__thrown, self.get_handle(), key?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.String(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ChainedConfigurationProvider


// type: Microsoft.Extensions.Configuration.ChainedConfigurationSource
    /**
    
            Represents a chained  as an .
            

    */
open class ChainedConfigurationSource
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ChainedConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ChainedConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: A 

    */
    open /* method final */ func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.IConfiguration get_Configuration()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.get_Configuration
    open func get_Configuration() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationSource_IConfiguration__get_Configuration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfiguration(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.set_Configuration(Microsoft.Extensions.Configuration.IConfiguration)
    open func set_Configuration(value : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ChainedConfigurationSource_void__set_Configuration_0__1__IConfiguration(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShouldDisposeConfiguration()
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.get_ShouldDisposeConfiguration
    open func get_ShouldDisposeConfiguration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ChainedConfigurationSource_bool__get_ShouldDisposeConfiguration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShouldDisposeConfiguration(bool)
// docid: M:Microsoft.Extensions.Configuration.ChainedConfigurationSource.set_ShouldDisposeConfiguration(System.Boolean)
    open func set_ShouldDisposeConfiguration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ChainedConfigurationSource_void__set_ShouldDisposeConfiguration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The chained configuration.
            

    */
    open var Configuration : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration> {
        get {
            return try! get_Configuration();
        }
        set(v) {
            return try! set_Configuration(value: v!);
        }
    }
    /**
    
            Whether the chained configuration should be disposed when the
            configuration provider gets disposed.
            

    */
    open var ShouldDisposeConfiguration : Bool {
        get {
            return try! get_ShouldDisposeConfiguration();
        }
        set(v) {
            return try! set_ShouldDisposeConfiguration(value: v);
        }
    }
} // ChainedConfigurationSource


// type: Microsoft.Extensions.Configuration.ConfigurationBuilder
    /**
    
            Used to build key/value based configuration settings for use in an application.
            

    */
open class ConfigurationBuilder
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationBuilder
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationBuilder_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationBuilder_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder Add(Microsoft.Extensions.Configuration.IConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)
    /**
    
            Adds a new configuration source.
            

    - Parameter source: The configuration source to add.
    - Returns: The same .

    */
    open /* method final */ func Add(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSource>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBuilder_IConfigurationBuilder__Add_0__1__IConfigurationSource(&__thrown, self.get_handle(), source?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationRoot Build()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
    /**
    
            Builds an  with keys and values from the set of providers registered in
            .
            

    - Returns: An  with keys and values from the registered providers.

    */
    open /* method final */ func Build() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBuilder_IConfigurationRoot__Build_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Properties()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.get_Properties
    open /* method final */ func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBuilder_System_Collections_Generic_IDictionary_string_object___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.Extensions.Configuration.IConfigurationSource> get_Sources()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.get_Sources
    open /* method final */ func get_Sources() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSource>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationBuilder_System_Collections_Generic_IList_Microsoft_Extensions_Configuration_IConfigurationSource___get_Sources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets a key/value collection that can be used to share data between the 
            and the registered s.
            

    */
    public var Properties : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_Properties();
        }
    }
    /**
    
            Returns the sources used to obtain configuration values.
            

    */
    public var Sources : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSource>> {
        get {
            return try! get_Sources();
        }
    }
} // ConfigurationBuilder


// type: Microsoft.Extensions.Configuration.ConfigurationKeyComparer
    /**
    
            IComparer implementation used to order configuration keys.
            

    */
open class ConfigurationKeyComparer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationKeyComparer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationKeyComparer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Compare(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.Compare(System.String,System.String)
    /**
    
            Compares two strings.
            

    - Parameter x: First string.
    - Parameter y: Second string.
    - Returns: Less than 0 if x is less than y, 0 if x is equal to y and greater than 0 if x is greater than y.

    */
    open /* method final */ func Compare(x : Optional<dotnet.System.String>, y : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationKeyComparer_i32__Compare_0__2__String_String(&__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.ConfigurationKeyComparer get_Instance()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationKeyComparer.get_Instance
    open class func get_Instance() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.ConfigurationKeyComparer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationKeyComparer_ConfigurationKeyComparer__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.ConfigurationKeyComparer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The default instance.
            

    */
    public static var Instance : Optional<aspnetcore.Microsoft.Extensions.Configuration.ConfigurationKeyComparer> {
        get {
            return try! get_Instance();
        }
    }
} // ConfigurationKeyComparer


// type: Microsoft.Extensions.Configuration.ConfigurationManager
    /**
    
            Configuration is mutable configuration object. It is both an  and an .
            As sources are added, it updates its current view of configuration. Once Build is called, configuration is frozen.
            

    */
public final class ConfigurationManager
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationBuilder,
    Microsoft_Extensions_Configuration_IConfigurationRoot,
    Microsoft_Extensions_Configuration_IConfiguration,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationManager_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.#ctor
    /**
    
            Creates an empty mutable configuration object that is both an  and an .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationManager_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationSection GetSection(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.GetSection(System.String)
    /**
    */
    public func GetSection(key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationManager_IConfigurationSection__GetSection_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationSection> GetChildren()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.GetChildren
    /**
    */
    public func GetChildren() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationManager_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationSection___GetChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationManager_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.get_Item(System.String)
    public func get_Item(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationManager_String__get_Item_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationManager.set_Item(System.String,System.String)
    public func set_Item(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationManager_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConfigurationManager


// type: Microsoft.Extensions.Configuration.ConfigurationProvider
    /**
    
            Base helper class for implementing an 
            

    */
open class ConfigurationProvider
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IEnumerable<System.String> GetChildKeys(System.Collections.Generic.IEnumerable<System.String>, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
    /**
    
            Returns the list of keys that this provider has.
            

    - Parameter earlierKeys: The earlier keys that other providers contain.
    - Parameter parentPath: The path for the parent IConfiguration.
    - Returns: The list of keys for this provider.

    */
    open func GetChildKeys(earlierKeys : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>, parentPath : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationProvider_System_Collections_Generic_IEnumerable_string___GetChildKeys_0__2__System_Collections_Generic_IEnumerable_string__String(&__thrown, self.get_handle(), (earlierKeys?.get_handle()), parentPath?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
    /**
    
            Returns a  that can be used to listen when this provider is reloaded.
            

    - Returns: The .

    */
    open /* method final */ func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationProvider_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.Load
    /**
    
            Loads (or reloads) the data for this provider.
            

    */
    open func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String,System.String)
    /**
    
            Sets a value for a given key.
            

    - Parameter key: The configuration key to set.
    - Parameter value: The value to set.
    */
    open func Set(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationProvider_void__Set_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.ToString
    /**
    
            Generates a string representing this provider name and relevant details.
            

    - Returns:  The configuration name. 

    */
    open override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationProvider_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool TryGet(System.String, ref System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String,System.String@)
    /**
    
            Attempts to find a value with the given key, returns true if one is found, false otherwise.
            

    - Parameter key: The key to lookup.
    - Parameter value: The value found at key if one is found.
    - Returns: True if key has a value, false otherwise.

    */
    open func TryGet(key : Optional<dotnet.System.String>, value : inout Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = (value != nil) ? (value!.get_handle()) : nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationProvider_bool__TryGet_0__2__String_outString(&__thrown, self.get_handle(), key?.get_handle() ?? nil, &_tmp_out_value);
        let __h__tmp2_value = _tmp_out_value;
        let _tmp2_value = (__h__tmp2_value != nil) ? dotnet.System.String(hndl: __h__tmp2_value!) : nil;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ConfigurationProvider


// type: Microsoft.Extensions.Configuration.ConfigurationReloadToken
    /**
    
            Implements 
            

    */
open class ConfigurationReloadToken
    :
    dotnet.System.Object,
    Microsoft_Extensions_Primitives_IChangeToken
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationReloadToken_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationReloadToken_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnReload()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.OnReload
    /**
    
            Used to trigger the change token when a reload occurs.
            

    */
    open func OnReload() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationReloadToken_void__OnReload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable RegisterChangeCallback(System.Action<System.Object>, System.Object)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.RegisterChangeCallback(System.Action{System.Object},System.Object)
    /**
    
            Registers for a callback that will be invoked when the entry has changed. 
            MUST be set before the callback is invoked.
            

    - Parameter callback: The callback to invoke.
    - Parameter state: State to be passed into the callback.
    - Returns: The  registration.

    */
    open /* method final */ func RegisterChangeCallback(callback : Optional<dotnet.System.Action_1<dotnet.System.Object>>, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationReloadToken_IDisposable__RegisterChangeCallback_0__2__System_Action_object__Object(&__thrown, self.get_handle(), (callback?.get_handle()), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IDisposable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open /* method final */ func RegisterChangeCallback(callback : @escaping (Optional<dotnet.System.Object>) throws -> Void, state : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IDisposable> {
        let del_callback = try dotnet.System.Action_1<dotnet.System.Object>(callback);
        return try RegisterChangeCallback(callback: del_callback, state: state);
    }
    // [IsSpecialName] bool get_ActiveChangeCallbacks()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.get_ActiveChangeCallbacks
    open /* method final */ func get_ActiveChangeCallbacks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationReloadToken_bool__get_ActiveChangeCallbacks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasChanged()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationReloadToken.get_HasChanged
    open /* method final */ func get_HasChanged() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationReloadToken_bool__get_HasChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Indicates if this token will proactively raise callbacks. Callbacks are still guaranteed to be invoked, eventually.
            

    */
    public var ActiveChangeCallbacks : Bool {
        get {
            return try! get_ActiveChangeCallbacks();
        }
    }
    /**
    
            Gets a value that indicates if a change has occurred.
            

    */
    public var HasChanged : Bool {
        get {
            return try! get_HasChanged();
        }
    }
} // ConfigurationReloadToken


// type: Microsoft.Extensions.Configuration.ConfigurationRoot
    /**
    
            The root node for a configuration.
            

    */
open class ConfigurationRoot
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfiguration,
    Microsoft_Extensions_Configuration_IConfigurationRoot,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationRoot_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IList<Microsoft.Extensions.Configuration.IConfigurationProvider>)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Configuration.IConfigurationProvider})
    /**
    
            Initializes a Configuration root with a list of providers.
            

    - Parameter providers: The s for this configuration.
    */
    public init(providers : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationRoot_ctor_0__1__System_Collections_Generic_IList_Microsoft_Extensions_Configuration_IConfigurationProvider_(&__thrown, (providers?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationRoot_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationSection> GetChildren()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
    /**
    
            Gets the immediate children sub-sections.
            

    - Returns: The children.

    */
    open /* method final */ func GetChildren() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRoot_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationSection___GetChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
    /**
    
            Returns a  that can be used to observe when this configuration is reloaded.
            

    - Returns: The .

    */
    open /* method final */ func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRoot_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationSection GetSection(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)
    /**
    
            Gets a configuration sub-section with the specified key.
            

    - Parameter key: The key of the configuration section.
    - Returns: The .

    */
    open /* method final */ func GetSection(key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRoot_IConfigurationSection__GetSection_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Reload()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
    /**
    
            Force the configuration values to be reloaded from the underlying sources.
            

    */
    open /* method final */ func Reload() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationRoot_void__Reload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationProvider> get_Providers()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.get_Providers
    open /* method final */ func get_Providers() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRoot_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationProvider___get_Providers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.get_Item(System.String)
    open /* method final */ func get_Item(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationRoot_String__get_Item_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationRoot.set_Item(System.String,System.String)
    open /* method final */ func set_Item(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationRoot_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The s for this configuration.
            

    */
    public var Providers : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider>> {
        get {
            return try! get_Providers();
        }
    }
} // ConfigurationRoot


// type: Microsoft.Extensions.Configuration.ConfigurationSection
    /**
    
            Represents a section of application configuration values.
            

    */
open class ConfigurationSection
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfiguration,
    Microsoft_Extensions_Configuration_IConfigurationSection
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_ConfigurationSection_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.IConfigurationRoot, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.IConfigurationRoot,System.String)
    /**
    
            Initializes a new instance.
            

    - Parameter root: The configuration root.
    - Parameter path: The path to this section.
    */
    public init(root : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationRoot>, path : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_ConfigurationSection_ctor_0__2__IConfigurationRoot_String(&__thrown, root?.get_handle() ?? nil, path?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Configuration.IConfigurationSection> GetChildren()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
    /**
    
            Gets the immediate descendant configuration sub-sections.
            

    - Returns: The configuration sub-sections.

    */
    open /* method final */ func GetChildren() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Configuration_IConfigurationSection___GetChildren_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Primitives.IChangeToken GetReloadToken()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
    /**
    
            Returns a  that can be used to observe when this configuration is reloaded.
            

    - Returns: The .

    */
    open /* method final */ func GetReloadToken() throws -> Optional<aspnetcore.Microsoft.Extensions.Primitives.IChangeToken> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_IChangeToken__GetReloadToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Primitives.IChangeToken(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationSection GetSection(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)
    /**
    
            Gets a configuration sub-section with the specified key.
            

    - Parameter key: The key of the configuration section.
    - Returns: The .

    */
    open /* method final */ func GetSection(key : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_IConfigurationSection__GetSection_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationSection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.get_Key
    open /* method final */ func get_Key() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.get_Path
    open /* method final */ func get_Path() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.get_Value
    open /* method final */ func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.set_Value(System.String)
    open /* method final */ func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationSection_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.get_Item(System.String)
    open /* method final */ func get_Item(key : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_ConfigurationSection_String__get_Item_0__1__String(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.ConfigurationSection.set_Item(System.String,System.String)
    open /* method final */ func set_Item(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_ConfigurationSection_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the key this section occupies in its parent.
            

    */
    public var Key : Optional<dotnet.System.String> {
        get {
            return try! get_Key();
        }
    }
    /**
    
            Gets the full path to this section from the .
            

    */
    public var Path : Optional<dotnet.System.String> {
        get {
            return try! get_Path();
        }
    }
    /**
    
            Gets or sets the section value.
            

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // ConfigurationSection


// type: Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions
public struct MemoryConfigurationBuilderExtensions {
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Adds the memory configuration provider to .
            

    - Parameter configurationBuilder: The  to add to.
    - Returns: The .

    */
    public static func AddInMemoryCollection(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_MemoryConfigurationBuilderExtensions_IConfigurationBuilder__AddInMemoryCollection_0__1__IConfigurationBuilder(&__thrown, configurationBuilder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    /**
    
            Adds the memory configuration provider to .
            

    - Parameter configurationBuilder: The  to add to.
    - Parameter initialData: The data to add to memory configuration provider.
    - Returns: The .

    */
    public static func AddInMemoryCollection(configurationBuilder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>, initialData : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_MemoryConfigurationBuilderExtensions_IConfigurationBuilder__AddInMemoryCollection_0__2__IConfigurationBuilder_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, configurationBuilder?.get_handle() ?? nil, (initialData?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // MemoryConfigurationBuilderExtensions


// type: Microsoft.Extensions.Configuration.StreamConfigurationProvider
    /**
    
            Stream based configuration provider
            

    */
open class StreamConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.ConfigurationProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_StreamConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.StreamConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.StreamConfigurationSource)
    /**
    
            Constructor.
            

    - Parameter source: The source.
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_StreamConfigurationProvider_ctor_0__1__StreamConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Load()
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.Load
    /**
    
            Load the configuration data from the stream. Will throw after the first call.
            

    */
    open override func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_StreamConfigurationProvider_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.Load(System.IO.Stream)
    /**
    
            Load the configuration data from the stream.
            

    - Parameter stream: The data stream.
    */
    open func Load(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_StreamConfigurationProvider_void__Load_0__1__Stream(&__thrown, self.get_handle(), stream?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Configuration.StreamConfigurationSource get_Source()
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationProvider.get_Source
    open func get_Source() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_StreamConfigurationProvider_StreamConfigurationSource__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The source settings for this provider.
            

    */
    open var Source : Optional<aspnetcore.Microsoft.Extensions.Configuration.StreamConfigurationSource> {
        get {
            return try! get_Source();
        }
    }
} // StreamConfigurationProvider


// type: Microsoft.Extensions.Configuration.StreamConfigurationSource
    /**
    
            Stream based .
            

    */
open class StreamConfigurationSource
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_StreamConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: An 

    */
    open func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_StreamConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.IO.Stream get_Stream()
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationSource.get_Stream
    open func get_Stream() throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_StreamConfigurationSource_Stream__get_Stream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Stream(System.IO.Stream)
// docid: M:Microsoft.Extensions.Configuration.StreamConfigurationSource.set_Stream(System.IO.Stream)
    open func set_Stream(value : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_StreamConfigurationSource_void__set_Stream_0__1__Stream(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The stream containing the configuration data.
            

    */
    open var Stream : Optional<dotnet.System.IO.Stream> {
        get {
            return try! get_Stream();
        }
        set(v) {
            return try! set_Stream(value: v!);
        }
    }
} // StreamConfigurationSource


}
// Microsoft.Extensions.Configuration.Memory
extension Microsoft.Extensions.Configuration.Memory {
// type: Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider
    /**
    
            In-memory implementation of 
            

    */
open class MemoryConfigurationProvider
    :
    aspnetcore.Microsoft.Extensions.Configuration.ConfigurationProvider,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Memory_MemoryConfigurationProvider_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource)
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource)
    /**
    
            Initialize a new instance from the source.
            

    - Parameter source: The source settings.
    */
    public init(source : Optional<aspnetcore.Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Memory_MemoryConfigurationProvider_ctor_0__1__MemoryConfigurationSource(&__thrown, source?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.String)
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.Add(System.String,System.String)
    /**
    
            Add a new key and value pair.
            

    - Parameter key: The configuration key.
    - Parameter value: The configuration value.
    */
    open func Add(key : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Memory_MemoryConfigurationProvider_void__Add_0__2__String_String(&__thrown, self.get_handle(), key?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.String>> GetEnumerator()
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider.GetEnumerator
    /**
    
            Returns an enumerator that iterates through the collection.
            

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    open /* method final */ func GetEnumerator() throws -> Optional<dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Memory_MemoryConfigurationProvider_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // MemoryConfigurationProvider


// type: Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource
    /**
    
            Represents in-memory data as an .
            

    */
open class MemoryConfigurationSource
    :
    dotnet.System.Object,
    Microsoft_Extensions_Configuration_IConfigurationSource
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Configuration_Memory_MemoryConfigurationSource_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Configuration_Memory_MemoryConfigurationSource_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)
    /**
    
            Builds the  for this source.
            

    - Parameter builder: The .
    - Returns: A 

    */
    open /* method final */ func Build(builder : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Memory_MemoryConfigurationSource_IConfigurationProvider__Build_0__1__IConfigurationBuilder(&__thrown, self.get_handle(), builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.Configuration.IConfigurationProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> get_InitialData()
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.get_InitialData
    open func get_InitialData() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Configuration_Memory_MemoryConfigurationSource_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____get_InitialData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InitialData(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
// docid: M:Microsoft.Extensions.Configuration.Memory.MemoryConfigurationSource.set_InitialData(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
    open func set_InitialData(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Configuration_Memory_MemoryConfigurationSource_void__set_InitialData_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string__(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The initial key value configuration pairs.
            

    */
    open var InitialData : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        get {
            return try! get_InitialData();
        }
        set(v) {
            return try! set_InitialData(value: v!);
        }
    }
} // MemoryConfigurationSource


}




// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.Configuration.IConfiguration)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddConfiguration(config : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), config: config);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.Configuration.IConfiguration, bool)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddConfiguration(config : Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfiguration>, shouldDisposeConfiguration : Bool) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.ChainedBuilderExtensions.AddConfiguration(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), config: config, shouldDisposeConfiguration: shouldDisposeConfiguration);
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddInMemoryCollection() throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>)
extension Microsoft_Extensions_Configuration_IConfigurationBuilder {
    public func AddInMemoryCollection(initialData : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>>) throws -> Optional<aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder> {
        return try aspnetcore.Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(configurationBuilder: aspnetcore.Microsoft.Extensions.Configuration.IConfigurationBuilder(hndl: __copy_handle(self.get_handle())), initialData: initialData);
    }
}

