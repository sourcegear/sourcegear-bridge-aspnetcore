// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Components
// Microsoft.AspNetCore.Components.Forms
extension Microsoft.AspNetCore.Components.Forms {
// type: Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator
    /**
    
            Adds Data Annotations validation support to an .
            

    */
open class DataAnnotationsValidator
    :
    aspnetcore.Microsoft.AspNetCore.Components.ComponentBase,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_DataAnnotationsValidator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_DataAnnotationsValidator_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DataAnnotationsValidator


// type: Microsoft.AspNetCore.Components.Forms.EditContext
    /**
    
            Holds metadata related to a data editing process, such as flags to indicate which
            fields have been modified and the current set of validation messages.
            

    */
public final class EditContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_EditContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.#ctor(System.Object)
    /**
    
            Constructs an instance of .
            

    - Parameter model: The model object for the . This object should hold the data being edited, for example as a set of properties.
    */
    public init(model : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_EditContext_ctor_0__1__Object(&__thrown, model.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Components.Forms.FieldIdentifier Field(System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.Field(System.String)
    /**
    
            Supplies a  corresponding to a specified field name
            on this 's .
            

    - Parameter fieldName: The name of the editable field.
    - Returns: A  corresponding to a specified field name on this 's .

    */
    public func Field(fieldName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_FieldIdentifier__Field_0__1__String(&__thrown, self.get_handle(), fieldName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier(hndl : __return);
        }
    }
    // void NotifyFieldChanged(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.NotifyFieldChanged(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Signals that the value for the specified field has changed.
            

    - Parameter fieldIdentifier: Identifies the field whose value has been changed.
    */
    public func NotifyFieldChanged(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        Microsoft_AspNetCore_Components_Forms_EditContext_void__NotifyFieldChanged_0__1__inFieldIdentifier(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void NotifyValidationStateChanged()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.NotifyValidationStateChanged
    /**
    
            Signals that some aspect of validation state has changed.
            

    */
    public func NotifyValidationStateChanged() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__NotifyValidationStateChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MarkAsUnmodified(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.MarkAsUnmodified(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Clears any modification flag that may be tracked for the specified field.
            

    - Parameter fieldIdentifier: Identifies the field whose modification flag (if any) should be cleared.
    */
    public func MarkAsUnmodified(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        Microsoft_AspNetCore_Components_Forms_EditContext_void__MarkAsUnmodified_0__1__inFieldIdentifier(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MarkAsUnmodified()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.MarkAsUnmodified
    /**
    
            Clears all modification flags within this .
            

    */
    public func MarkAsUnmodified() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__MarkAsUnmodified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsModified()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.IsModified
    /**
    
            Determines whether any of the fields in this  have been modified.
            

    - Returns: True if any of the fields in this  have been modified; otherwise false.

    */
    public func IsModified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_bool__IsModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetValidationMessages()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages
    /**
    
             Gets the current validation messages across all fields.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             

    - Returns: The current validation messages.

    */
    public func GetValidationMessages() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_System_Collections_Generic_IEnumerable_string___GetValidationMessages_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetValidationMessages(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
    /**
    
             Gets the current validation messages for the specified field.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             

    - Parameter fieldIdentifier: Identifies the field whose current validation messages should be returned.
    - Returns: The current validation messages for the specified field.

    */
    public func GetValidationMessages(fieldIdentifier : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_System_Collections_Generic_IEnumerable_string___GetValidationMessages_0__1__FieldIdentifier(&__thrown, self.get_handle(), fieldIdentifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.String> GetValidationMessages(System.Linq.Expressions.Expression<System.Func<System.Object>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.GetValidationMessages(System.Linq.Expressions.Expression{System.Func{System.Object}})
    /**
    
             Gets the current validation messages for the specified field.
            
             This method does not perform validation itself. It only returns messages determined by previous validation actions.
             

    - Parameter accessor: Identifies the field whose current validation messages should be returned.
    - Returns: The current validation messages for the specified field.

    */
    public func GetValidationMessages(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_System_Collections_Generic_IEnumerable_string___GetValidationMessages_0__1__System_Linq_Expressions_Expression_System_System_Func_object__(&__thrown, self.get_handle(), accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool IsModified(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.IsModified(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Determines whether the specified fields in this  has been modified.
            

    - Returns: True if the field has been modified; otherwise false.

    */
    public func IsModified(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_bool__IsModified_0__1__inFieldIdentifier(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsModified(System.Linq.Expressions.Expression<System.Func<System.Object>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.IsModified(System.Linq.Expressions.Expression{System.Func{System.Object}})
    /**
    
            Determines whether the specified fields in this  has been modified.
            

    - Parameter accessor: Identifies the field whose current validation messages should be returned.
    - Returns: True if the field has been modified; otherwise false.

    */
    public func IsModified(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_bool__IsModified_0__1__System_Linq_Expressions_Expression_System_System_Func_object__(&__thrown, self.get_handle(), accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Validate()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate
    /**
    
            Validates this .
            

    - Returns: True if there are no validation messages after validation; otherwise false.

    */
    public func Validate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_bool__Validate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.get_Model
    public func get_Model() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Forms.EditContextProperties get_Properties()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.get_Properties
    public func get_Properties() throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextProperties {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContext_EditContextProperties__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextProperties(hndl : __return);
        }
    }
    // [IsSpecialName] void add_OnFieldChanged(System.EventHandler<Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.add_OnFieldChanged(System.EventHandler{Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs})
    public func add_OnFieldChanged(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__add_OnFieldChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_FieldChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_OnFieldChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>(value);
        return try add_OnFieldChanged(value: del_value);
    }
    // [IsSpecialName] void remove_OnFieldChanged(System.EventHandler<Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.remove_OnFieldChanged(System.EventHandler{Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs})
    public func remove_OnFieldChanged(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__remove_OnFieldChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_FieldChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_OnFieldChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs>(value);
        return try remove_OnFieldChanged(value: del_value);
    }
    // [IsSpecialName] void add_OnValidationRequested(System.EventHandler<Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.add_OnValidationRequested(System.EventHandler{Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs})
    public func add_OnValidationRequested(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__add_OnValidationRequested_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_ValidationRequestedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_OnValidationRequested(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>(value);
        return try add_OnValidationRequested(value: del_value);
    }
    // [IsSpecialName] void remove_OnValidationRequested(System.EventHandler<Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.remove_OnValidationRequested(System.EventHandler{Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs})
    public func remove_OnValidationRequested(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__remove_OnValidationRequested_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_ValidationRequestedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_OnValidationRequested(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs>(value);
        return try remove_OnValidationRequested(value: del_value);
    }
    // [IsSpecialName] void add_OnValidationStateChanged(System.EventHandler<Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.add_OnValidationStateChanged(System.EventHandler{Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs})
    public func add_OnValidationStateChanged(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__add_OnValidationStateChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_ValidationStateChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func add_OnValidationStateChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>(value);
        return try add_OnValidationStateChanged(value: del_value);
    }
    // [IsSpecialName] void remove_OnValidationStateChanged(System.EventHandler<Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContext.remove_OnValidationStateChanged(System.EventHandler{Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs})
    public func remove_OnValidationStateChanged(value : Optional<dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContext_void__remove_OnValidationStateChanged_0__1__System_EventHandler_Microsoft_AspNetCore_Components_Forms_ValidationStateChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func remove_OnValidationStateChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs>(value);
        return try remove_OnValidationStateChanged(value: del_value);
    }
    /**
    
            Gets the model object for this .
            

    */
    public var Model : dotnet.System.Object {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets a collection of arbitrary properties associated with this instance.
            

    */
    public var Properties : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextProperties {
        get {
            return try! get_Properties();
        }
    }
} // EditContext


// type: Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions
public struct EditContextDataAnnotationsExtensions {
    // Microsoft.AspNetCore.Components.Forms.EditContext AddDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions.AddDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
    /**
    
            Adds DataAnnotations validation support to the .
            

    - Parameter editContext: The .
    */
    public static func AddDataAnnotationsValidation(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext) throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextDataAnnotationsExtensions_EditContext__AddDataAnnotationsValidation_0__1__EditContext(&__thrown, editContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext(hndl : __return);
        }
    }
    // System.IDisposable EnableDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions.EnableDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
    /**
    
            Enables DataAnnotations validation support for the .
            

    - Parameter editContext: The .
    - Returns: A disposable object whose disposal will remove DataAnnotations validation support from the .

    */
    public static func EnableDataAnnotationsValidation(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextDataAnnotationsExtensions_IDisposable__EnableDataAnnotationsValidation_0__1__EditContext(&__thrown, editContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
} // EditContextDataAnnotationsExtensions


// type: Microsoft.AspNetCore.Components.Forms.EditContextProperties
    /**
    
            Holds arbitrary key/value pairs associated with an .
            This can be used to track additional metadata for application-specific purposes.
            

    */
public final class EditContextProperties
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_EditContextProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextProperties.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_EditContextProperties_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool TryGetValue(System.Object, ref System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextProperties.TryGetValue(System.Object,System.Object@)
    /**
    
            Gets the value associated with the specified key, if any.
            

    - Parameter key: The key under which the value is stored.
    - Parameter value: The value, if present.
    - Returns: True if the value was present, otherwise false.

    */
    public func TryGetValue(key : dotnet.System.Object, value : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextProperties_bool__TryGetValue_0__2__Object_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Object(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextProperties.Remove(System.Object)
    /**
    
            Removes the specified entry from the collection.
            

    - Parameter key: The key of the entry to be removed.
    - Returns: True if the value was present, otherwise false.

    */
    public func Remove(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextProperties_bool__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextProperties.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(key : dotnet.System.Object) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_EditContextProperties_Object__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.EditContextProperties.set_Item(System.Object,System.Object)
    public func set_Item(key : dotnet.System.Object, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_EditContextProperties_void__set_Item_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EditContextProperties


// type: Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs
    /**
    
            Provides information about the  event.
            

    */
public final class FieldChangedEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_FieldChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs.#ctor(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Creates a new instance of .
            

    - Parameter fieldIdentifier: The 
    */
    public init(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        let h = Microsoft_AspNetCore_Components_Forms_FieldChangedEventArgs_ctor_0__1__inFieldIdentifier(&__thrown, &_tmp_in_fieldIdentifier);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Components.Forms.FieldIdentifier get_FieldIdentifier()
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs.get_FieldIdentifier
    public func get_FieldIdentifier() throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldChangedEventArgs_FieldIdentifier__get_FieldIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier(hndl : __return);
        }
    }
    /**
    
            Identifies the field whose value has changed.
            

    */
    public var FieldIdentifier : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier {
        get {
            return try! get_FieldIdentifier();
        }
    }
} // FieldChangedEventArgs


// type: Microsoft.AspNetCore.Components.Forms.FieldIdentifier
// boxed value type
    /**
    
            Uniquely identifies a single field that can be edited. This may correspond to a property on a
            model object, or can be any other named value.
            

    */
public final class FieldIdentifier
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_FieldIdentifier_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the name of the editable field.
            

    */
    public var FieldName : dotnet.System.String {
        get {
            return try! get_FieldName();
        }
    }
    /**
    
            Gets the object that owns the editable field.
            

    */
    public var Model : dotnet.System.Object {
        get {
            return try! get_Model();
        }
    }
    // .ctor(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.#ctor(System.Object,System.String)
    /**
    
            Initializes a new instance of the  structure.
            

    - Parameter model: The object that owns the field.
    - Parameter fieldName: The name of the editable field.
    */
    public init(model : dotnet.System.Object, fieldName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_ctor_0__2__Object_String(&__thrown, model.get_handle(), fieldName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_implicit_ctor();
            super.init(hndl: h);
    }
    // Microsoft.AspNetCore.Components.Forms.FieldIdentifier Create<TField>(System.Linq.Expressions.Expression<System.Func<TField>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})
    /**
    
            Initializes a new instance of the  structure.
            

    - Parameter accessor: An expression that identifies an object member.
    */
    public class func Create<UTField : SGBridgeGenericValue>(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<UTField>>) throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_FieldIdentifier__Create_1__1__System_Linq_Expressions_Expression_System_System_Func_UTField__(UTField.get_type_handle(), &__thrown, accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.GetHashCode
    /**
    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Equals(System.Object)
    /**
    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.Equals(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
    /**
    */
    public func Equals(otherIdentifier : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_bool__Equals_0__1__FieldIdentifier(&__thrown, self.get_handle(), otherIdentifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.get_Model
    public func get_Model() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FieldName()
// docid: M:Microsoft.AspNetCore.Components.Forms.FieldIdentifier.get_FieldName
    public func get_FieldName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_FieldIdentifier_String__get_FieldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // FieldIdentifier


// type: Microsoft.AspNetCore.Components.Forms.ValidationMessageStore
    /**
    
            Holds validation messages for an .
            

    */
public final class ValidationMessageStore
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Components.Forms.EditContext)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.#ctor(Microsoft.AspNetCore.Components.Forms.EditContext)
    /**
    
            Creates an instance of .
            

    - Parameter editContext: The  with which this store should be associated.
    */
    public init(editContext : aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_ctor_0__1__EditContext(&__thrown, editContext.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier, System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.String)
    /**
    
            Adds a validation message for the specified field.
            

    - Parameter fieldIdentifier: The identifier for the field.
    - Parameter message: The validation message.
    */
    public func Add(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Add_0__2__inFieldIdentifier_String(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier, message.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Linq.Expressions.Expression<System.Func<System.Object>>, System.String)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Add(System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)
    /**
    
            Adds a validation message for the specified field.
            

    - Parameter accessor: Identifies the field for which to add the message.
    - Parameter message: The validation message.
    */
    public func Add(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>, message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Add_0__2__System_Linq_Expressions_Expression_System_System_Func_object___String(&__thrown, self.get_handle(), accessor.get_handle(), message.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Add(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds the messages from the specified collection for the specified field.
            

    - Parameter fieldIdentifier: The identifier for the field.
    - Parameter messages: The validation messages to be added.
    */
    public func Add(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier, messages : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Add_0__2__inFieldIdentifier_System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier, messages.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Linq.Expressions.Expression<System.Func<System.Object>>, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Add(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Adds the messages from the specified collection for the specified field.
            

    - Parameter accessor: Identifies the field for which to add the messages.
    - Parameter messages: The validation messages to be added.
    */
    public func Add(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>, messages : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Add_0__2__System_Linq_Expressions_Expression_System_System_Func_object___System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), accessor.get_handle(), messages.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Clear
    /**
    
            Removes all messages within this .
            

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear(System.Linq.Expressions.Expression<System.Func<System.Object>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Clear(System.Linq.Expressions.Expression{System.Func{System.Object}})
    /**
    
            Removes all messages within this  for the specified field.
            

    - Parameter accessor: Identifies the field for which to remove the messages.
    */
    public func Clear(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Clear_0__1__System_Linq_Expressions_Expression_System_System_Func_object__(&__thrown, self.get_handle(), accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear(ref Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.Clear(Microsoft.AspNetCore.Components.Forms.FieldIdentifier@)
    /**
    
            Removes all messages within this  for the specified field.
            

    - Parameter fieldIdentifier: The identifier for the field.
    */
    public func Clear(fieldIdentifier : inout aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_fieldIdentifier = fieldIdentifier.get_handle();
        Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_void__Clear_0__1__inFieldIdentifier(&__thrown, self.get_handle(), &_tmp_in_fieldIdentifier);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Item(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.get_Item(Microsoft.AspNetCore.Components.Forms.FieldIdentifier)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(fieldIdentifier : aspnetcore.Microsoft.AspNetCore.Components.Forms.FieldIdentifier) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_System_Collections_Generic_IEnumerable_string___get_Item_0__1__FieldIdentifier(&__thrown, self.get_handle(), fieldIdentifier.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_Item(System.Linq.Expressions.Expression<System.Func<System.Object>>)
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationMessageStore.get_Item(System.Linq.Expressions.Expression{System.Func{System.Object}})
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(accessor : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_1<dotnet.System.Object>>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Components_Forms_ValidationMessageStore_System_Collections_Generic_IEnumerable_string___get_Item_0__1__System_Linq_Expressions_Expression_System_System_Func_object__(&__thrown, self.get_handle(), accessor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ValidationMessageStore


// type: Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs
    /**
    
            Provides information about the  event.
            

    */
public final class ValidationRequestedEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_ValidationRequestedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs Empty
    /**
    
            Gets a shared empty instance of .
            

    */
    public class override var Empty : aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs(hndl: Microsoft_AspNetCore_Components_Forms_ValidationRequestedEventArgs_get_Empty());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationRequestedEventArgs.#ctor
    /**
    
            Creates a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_ValidationRequestedEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ValidationRequestedEventArgs


// type: Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs
    /**
    
            Provides information about the  event.
            

    */
public final class ValidationStateChangedEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Components_Forms_ValidationStateChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs Empty
    /**
    
            Gets a shared empty instance of .
            

    */
    public class override var Empty : aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs(hndl: Microsoft_AspNetCore_Components_Forms_ValidationStateChangedEventArgs_get_Empty());
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Components.Forms.ValidationStateChangedEventArgs.#ctor
    /**
    
            Creates a new instance of 
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Components_Forms_ValidationStateChangedEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ValidationStateChangedEventArgs


}




// EXTENSION METHOD Microsoft.AspNetCore.Components.Forms.EditContext AddDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
extension aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
    public func AddDataAnnotationsValidation() throws -> aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
        return try aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions.AddDataAnnotationsValidation(editContext: self);
    }
}

// EXTENSION METHOD System.IDisposable EnableDataAnnotationsValidation(Microsoft.AspNetCore.Components.Forms.EditContext)
extension aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContext {
    public func EnableDataAnnotationsValidation() throws -> dotnet.System.IDisposable {
        return try aspnetcore.Microsoft.AspNetCore.Components.Forms.EditContextDataAnnotationsExtensions.EnableDataAnnotationsValidation(editContext: self);
    }
}

