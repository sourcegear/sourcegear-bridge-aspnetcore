// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.JSInterop
extension Microsoft.JSInterop {
// type: Microsoft.JSInterop.DotNetObjectReference
public struct DotNetObjectReference {
    // Microsoft.JSInterop.DotNetObjectReference<TValue> Create<TValue>(TValue)
// docid: M:Microsoft.JSInterop.DotNetObjectReference.Create``1(``0)
    /**
    
            Creates a new instance of .
            

    - Parameter value: The reference type to track.
    - Returns: An instance of .

    */
    public static func Create<UTValue : SGBridgeGenericValue>(value : UTValue) throws -> aspnetcore.Microsoft.JSInterop.DotNetObjectReference_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_DotNetObjectReference_Microsoft_JSInterop_DotNetObjectReference_UTValue___Create_1__1__UTValue(UTValue.get_type_handle(), &__thrown, value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.JSInterop.DotNetObjectReference_1(hndl : __return);
        }
    }
} // DotNetObjectReference


// type: Microsoft.JSInterop.DotNetObjectReference`1
    /**
    
             Wraps a JS interop argument, indicating that the value should not be serialized as JSON
             but instead should be passed as a reference.
            
             To avoid leaking memory, the reference must later be disposed by JS code or by .NET code.
             

    */
public final class DotNetObjectReference_1<TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_DotNetObjectReference_1_get_type_handle(TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:Microsoft.JSInterop.DotNetObjectReference`1.Dispose
    /**
    
            Stops tracking this object reference, allowing it to be garbage collected
            (if there are no other references to it). Once the instance is disposed, it
            can no longer be used in interop calls from JavaScript code.
            

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_DotNetObjectReference_1_void__Dispose_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] TValue get_Value()
// docid: M:Microsoft.JSInterop.DotNetObjectReference`1.get_Value
    public func get_Value() throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_DotNetObjectReference_1_TValue__get_Value_0__0(TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    /**
    
            Gets the object instance represented by this wrapper.
            

    */
    public var Value : TValue {
        get {
            return try! get_Value();
        }
    }
} // DotNetObjectReference_1


// type: Microsoft.JSInterop.DotNetStreamReference
    /**
    
            Represents the reference to a .NET stream sent to JavaScript.
            

    */
public final class DotNetStreamReference
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_DotNetStreamReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, bool)
// docid: M:Microsoft.JSInterop.DotNetStreamReference.#ctor(System.IO.Stream,System.Boolean)
    /**
    
            Create a reference to a .NET stream sent to JavaScript.
            

    - Parameter stream: The stream being sent to JavaScript.
    - Parameter leaveOpen: A flag that indicates whether the stream should be left open after transmission.
    */
    public init(stream : dotnet.System.IO.Stream, leaveOpen : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_DotNetStreamReference_ctor_0__2__Stream_bool(&__thrown, stream.get_handle(), Swift.Int32(leaveOpen ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.JSInterop.DotNetStreamReference.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_DotNetStreamReference_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_Stream()
// docid: M:Microsoft.JSInterop.DotNetStreamReference.get_Stream
    public func get_Stream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_DotNetStreamReference_Stream__get_Stream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_LeaveOpen()
// docid: M:Microsoft.JSInterop.DotNetStreamReference.get_LeaveOpen
    public func get_LeaveOpen() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_DotNetStreamReference_bool__get_LeaveOpen_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            A flag that indicates whether the stream should be left open after transmission.
            

    */
    public var LeaveOpen : Bool {
        get {
            return try! get_LeaveOpen();
        }
    }
    /**
    
            The stream being sent to JavaScript.
            

    */
    public var Stream : dotnet.System.IO.Stream {
        get {
            return try! get_Stream();
        }
    }
} // DotNetStreamReference


// type: Microsoft.JSInterop.IJSInProcessObjectReference
    /**
    
            Represents a reference to a JavaScript object whose functions can be invoked synchronously.
            

    */
open class IJSInProcessObjectReference
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSInProcessObjectReference,
    Microsoft_JSInterop_IJSObjectReference,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSInProcessObjectReference_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TValue Invoke<TValue>(System.String, System.Object[])
} // IJSInProcessObjectReference


// type: Microsoft.JSInterop.IJSInProcessRuntime
    /**
    
            Represents an instance of a JavaScript runtime to which calls may be dispatched.
            

    */
open class IJSInProcessRuntime
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSInProcessRuntime,
    Microsoft_JSInterop_IJSRuntime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSInProcessRuntime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TResult Invoke<TResult>(System.String, System.Object[])
} // IJSInProcessRuntime


// type: Microsoft.JSInterop.IJSObjectReference
    /**
    
            Represents a reference to a JavaScript object.
            

    */
open class IJSObjectReference
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSObjectReference,
    System_IAsyncDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSObjectReference_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Threading.CancellationToken, System.Object[])
} // IJSObjectReference


// type: Microsoft.JSInterop.IJSRuntime
    /**
    
            Represents an instance of a JavaScript runtime to which calls may be dispatched.
            

    */
open class IJSRuntime
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSRuntime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSRuntime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Threading.CancellationToken, System.Object[])
} // IJSRuntime


// type: Microsoft.JSInterop.IJSStreamReference
    /**
    
            Represents a reference to JavaScript data to be consumed through a .
            

    */
open class IJSStreamReference
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSStreamReference,
    System_IAsyncDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSStreamReference_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.ValueTask<System.IO.Stream> OpenReadStreamAsync(System.Int64, System.Threading.CancellationToken)
// docid: M:Microsoft.JSInterop.IJSStreamReference.OpenReadStreamAsync(System.Int64,System.Threading.CancellationToken)
    /**
    
            Opens a  with the  for the current data reference.
            

    - Parameter maxAllowedSize: Maximum number of bytes permitted to be read from JavaScript.
    - Parameter cancellationToken:  for cancelling read.
    - Returns:  which can provide data associated with the current data reference.

    */
    open func OpenReadStreamAsync(maxAllowedSize : Swift.Int64 = 512000, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_IJSStreamReference_System_Threading_Tasks_ValueTask_System_IO_Stream___OpenReadStreamAsync_0__2__i64_CancellationToken(&__thrown, self.get_handle(), maxAllowedSize, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.JSInterop.IJSStreamReference.get_Length
    open func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_IJSStreamReference_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IJSStreamReference


// type: Microsoft.JSInterop.IJSUnmarshalledObjectReference
    /**
    
            Represents a reference to a JavaScript object whose functions can be invoked synchronously without JSON marshalling.
            

    */
open class IJSUnmarshalledObjectReference
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSUnmarshalledObjectReference,
    Microsoft_JSInterop_IJSInProcessObjectReference
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSUnmarshalledObjectReference_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<TResult>(System.String)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, TResult>(System.String, T0)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, T1, TResult>(System.String, T0, T1)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, T1, T2, TResult>(System.String, T0, T1, T2)
} // IJSUnmarshalledObjectReference


// type: Microsoft.JSInterop.IJSUnmarshalledRuntime
    /**
    
            Represents an instance of a JavaScript runtime to which calls may be dispatched without JSON marshalling.
            Not all JavaScript runtimes support this capability. Currently it is only supported on WebAssembly and for
            security reasons, will never be supported for .NET code that runs on the server.
            This is an advanced mechanism that should only be used in performance-critical scenarios.
            

    */
open class IJSUnmarshalledRuntime
    :
    SGBridgeGenericValue,
    Microsoft_JSInterop_IJSUnmarshalledRuntime
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_IJSUnmarshalledRuntime_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<TResult>(System.String)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, TResult>(System.String, T0)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, T1, TResult>(System.String, T0, T1)
// TODO COPE (write_all_methods) (unused generic param) TResult InvokeUnmarshalled<T0, T1, T2, TResult>(System.String, T0, T1, T2)
} // IJSUnmarshalledRuntime


// type: Microsoft.JSInterop.JSCallResultType
    /**
    
            Describes the type of result expected from a JS interop call.
            

    */
public struct JSCallResultType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSCallResultType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.JSInterop.JSCallResultType Default
    /**
    
            Indicates that the returned value is not treated in a special way.
            

    */
    public static var Default : aspnetcore.Microsoft.JSInterop.JSCallResultType {
        get {
        let __return = aspnetcore.Microsoft.JSInterop.JSCallResultType(val: Microsoft_JSInterop_JSCallResultType_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.JSInterop.JSCallResultType JSObjectReference
    /**
    
            Indicates that the returned value is to be treated as a JS object reference.
            

    */
    public static var JSObjectReference : aspnetcore.Microsoft.JSInterop.JSCallResultType {
        get {
        let __return = aspnetcore.Microsoft.JSInterop.JSCallResultType(val: Microsoft_JSInterop_JSCallResultType_get_JSObjectReference());
            return __return;
        }
    }
    // static field: Microsoft.JSInterop.JSCallResultType JSStreamReference
    /**
    
            Indicates that the returned value is to be treated as a JS data reference.
            

    */
    public static var JSStreamReference : aspnetcore.Microsoft.JSInterop.JSCallResultType {
        get {
        let __return = aspnetcore.Microsoft.JSInterop.JSCallResultType(val: Microsoft_JSInterop_JSCallResultType_get_JSStreamReference());
            return __return;
        }
    }
} // JSCallResultType


// type: Microsoft.JSInterop.JSDisconnectedException
    /**
    
            Represents errors that occur during an interop call from .NET to JavaScript when the JavaScript runtime becomes disconnected.
            

    */
public final class JSDisconnectedException
    :
    dotnet.System.Exception
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSDisconnectedException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.JSInterop.JSDisconnectedException.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter message: The exception message.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_JSDisconnectedException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JSDisconnectedException


// type: Microsoft.JSInterop.JSException
    /**
    
            Represents errors that occur during an interop call from .NET to JavaScript.
            

    */
open class JSException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.JSInterop.JSException.#ctor(System.String)
    /**
    
            Constructs an instance of .
            

    - Parameter message: The exception message.
    */
    public init(message : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_JSException_ctor_0__1__String(&__thrown, message.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:Microsoft.JSInterop.JSException.#ctor(System.String,System.Exception)
    /**
    
            Constructs an instance of .
            

    - Parameter message: The exception message.
    - Parameter innerException: The inner exception.
    */
    public init(message : dotnet.System.String, innerException : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_JSException_ctor_0__2__String_Exception(&__thrown, message.get_handle(), innerException.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JSException


// type: Microsoft.JSInterop.JSInProcessObjectReferenceExtensions
public struct JSInProcessObjectReferenceExtensions {
    // void InvokeVoid(Microsoft.JSInterop.IJSInProcessObjectReference, System.String, System.Object[])
// docid: M:Microsoft.JSInterop.JSInProcessObjectReferenceExtensions.InvokeVoid(Microsoft.JSInterop.IJSInProcessObjectReference,System.String,System.Object[])
    /**
    
            Invokes the specified JavaScript function synchronously.
            

    - Parameter jsObjectReference: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function someScope.someFunction on the target instance.
    - Parameter args: JSON-serializable arguments.
    */
    public static func InvokeVoid(jsObjectReference : aspnetcore.Microsoft.JSInterop.IJSInProcessObjectReference, identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_JSInProcessObjectReferenceExtensions_void__InvokeVoid_0__3__IJSInProcessObjectReference_String_ObjectArray(&__thrown, jsObjectReference.get_handle(), identifier.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSInProcessObjectReferenceExtensions


// type: Microsoft.JSInterop.JSInProcessRuntime
    /**
    
            Abstract base class for an in-process JavaScript runtime.
            

    */
open class JSInProcessRuntime
    :
    aspnetcore.Microsoft.JSInterop.JSRuntime,
    Microsoft_JSInterop_IJSInProcessRuntime
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSInProcessRuntime_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) TValue Invoke<TValue>(System.String, System.Object[])
} // JSInProcessRuntime


// type: Microsoft.JSInterop.JSInProcessRuntimeExtensions
public struct JSInProcessRuntimeExtensions {
    // void InvokeVoid(Microsoft.JSInterop.IJSInProcessRuntime, System.String, System.Object[])
// docid: M:Microsoft.JSInterop.JSInProcessRuntimeExtensions.InvokeVoid(Microsoft.JSInterop.IJSInProcessRuntime,System.String,System.Object[])
    /**
    
            Invokes the specified JavaScript function synchronously.
            

    - Parameter jsRuntime: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function window.someScope.someFunction.
    - Parameter args: JSON-serializable arguments.
    */
    public static func InvokeVoid(jsRuntime : aspnetcore.Microsoft.JSInterop.IJSInProcessRuntime, identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_JSInProcessRuntimeExtensions_void__InvokeVoid_0__3__IJSInProcessRuntime_String_ObjectArray(&__thrown, jsRuntime.get_handle(), identifier.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSInProcessRuntimeExtensions


// type: Microsoft.JSInterop.JSInvokableAttribute
    /**
    
            Identifies a .NET method as allowing invocation from JavaScript code.
            Any method marked with this attribute may receive arbitrary parameter values
            from untrusted callers. All inputs should be validated carefully.
            

    */
public final class JSInvokableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSInvokableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.JSInterop.JSInvokableAttribute.#ctor
    /**
    
            Constructs an instance of  without setting
            an identifier for the method.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_JSInvokableAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.JSInterop.JSInvokableAttribute.#ctor(System.String)
    /**
    
            Constructs an instance of  using the specified
            identifier.
            

    - Parameter identifier: An identifier for the method, which must be unique within the scope of the assembly.
    */
    public init(identifier : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_JSInvokableAttribute_ctor_0__1__String(&__thrown, identifier.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:Microsoft.JSInterop.JSInvokableAttribute.get_Identifier
    public func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_JSInvokableAttribute_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
             Gets the identifier for the method. The identifier must be unique within the scope
             of an assembly.
            
             If not set, the identifier is taken from the name of the method. In this case the
             method name must be unique within the assembly.
             

    */
    public var Identifier : Optional<dotnet.System.String> {
        get {
            return try! get_Identifier();
        }
    }
} // JSInvokableAttribute


// type: Microsoft.JSInterop.JSObjectReferenceExtensions
public struct JSObjectReferenceExtensions {
    // System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.Object[])
// docid: M:Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference,System.String,System.Object[])
    /**
    
            Invokes the specified JavaScript function asynchronously.
            

    - Parameter jsObjectReference: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function someScope.someFunction on the target instance.
    - Parameter args: JSON-serializable arguments.
    - Returns: A  that represents the asynchronous invocation operation.

    */
    public static func InvokeVoidAsync(jsObjectReference : aspnetcore.Microsoft.JSInterop.IJSObjectReference, identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_JSObjectReferenceExtensions_ValueTask__InvokeVoidAsync_0__3__IJSObjectReference_String_ObjectArray(&__thrown, jsObjectReference.get_handle(), identifier.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Threading.CancellationToken, System.Object[])
    // System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.Threading.CancellationToken, System.Object[])
// docid: M:Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference,System.String,System.Threading.CancellationToken,System.Object[])
    /**
    
            Invokes the specified JavaScript function asynchronously.
            

    - Parameter jsObjectReference: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function someScope.someFunction on the target instance.
    - Parameter cancellationToken: 
            A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts
            () from being applied.
            
    - Parameter args: JSON-serializable arguments.
    - Returns: A  that represents the asynchronous invocation operation.

    */
    public static func InvokeVoidAsync(jsObjectReference : aspnetcore.Microsoft.JSInterop.IJSObjectReference, identifier : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_JSObjectReferenceExtensions_ValueTask__InvokeVoidAsync_0__4__IJSObjectReference_String_CancellationToken_ObjectArray(&__thrown, jsObjectReference.get_handle(), identifier.get_handle(), cancellationToken.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])
} // JSObjectReferenceExtensions


// type: Microsoft.JSInterop.JSRuntime
    /**
    
            Abstract base class for a JavaScript runtime.
            

    */
open class JSRuntime
    :
    dotnet.System.Object,
    Microsoft_JSInterop_IJSRuntime,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_JSRuntime_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Threading.CancellationToken, System.Object[])
    // void Dispose()
// docid: M:Microsoft.JSInterop.JSRuntime.Dispose
    /**
    
            Dispose the JSRuntime.
            

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_JSRuntime_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSRuntime


// type: Microsoft.JSInterop.JSRuntimeExtensions
public struct JSRuntimeExtensions {
    // System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.Object[])
// docid: M:Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])
    /**
    
            Invokes the specified JavaScript function asynchronously.
            

    - Parameter jsRuntime: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function window.someScope.someFunction.
    - Parameter args: JSON-serializable arguments.
    - Returns: A  that represents the asynchronous invocation operation.

    */
    public static func InvokeVoidAsync(jsRuntime : aspnetcore.Microsoft.JSInterop.IJSRuntime, identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_JSRuntimeExtensions_ValueTask__InvokeVoidAsync_0__3__IJSRuntime_String_ObjectArray(&__thrown, jsRuntime.get_handle(), identifier.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Threading.CancellationToken, System.Object[])
    // System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.Threading.CancellationToken, System.Object[])
// docid: M:Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime,System.String,System.Threading.CancellationToken,System.Object[])
    /**
    
            Invokes the specified JavaScript function asynchronously.
            

    - Parameter jsRuntime: The .
    - Parameter identifier: An identifier for the function to invoke. For example, the value "someScope.someFunction" will invoke the function window.someScope.someFunction.
    - Parameter cancellationToken: 
            A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts
            () from being applied.
            
    - Parameter args: JSON-serializable arguments.
    - Returns: A  that represents the asynchronous invocation operation.

    */
    public static func InvokeVoidAsync(jsRuntime : aspnetcore.Microsoft.JSInterop.IJSRuntime, identifier : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_JSRuntimeExtensions_ValueTask__InvokeVoidAsync_0__4__IJSRuntime_String_CancellationToken_ObjectArray(&__thrown, jsRuntime.get_handle(), identifier.get_handle(), cancellationToken.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])
} // JSRuntimeExtensions


}
// Microsoft.JSInterop.Implementation
extension Microsoft.JSInterop.Implementation {
// type: Microsoft.JSInterop.Implementation.JSInProcessObjectReference
    /**
    
            Implements functionality for .
            

    */
open class JSInProcessObjectReference
    :
    aspnetcore.Microsoft.JSInterop.Implementation.JSObjectReference,
    Microsoft_JSInterop_IJSInProcessObjectReference,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_Implementation_JSInProcessObjectReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) TValue Invoke<TValue>(System.String, System.Object[])
    // void Dispose()
// docid: M:Microsoft.JSInterop.Implementation.JSInProcessObjectReference.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_Implementation_JSInProcessObjectReference_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSInProcessObjectReference


// type: Microsoft.JSInterop.Implementation.JSObjectReference
    /**
    
            Implements functionality for .
            

    */
open class JSObjectReference
    :
    dotnet.System.Object,
    Microsoft_JSInterop_IJSObjectReference,
    System_IAsyncDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_Implementation_JSObjectReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Object[])
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(System.String, System.Threading.CancellationToken, System.Object[])
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:Microsoft.JSInterop.Implementation.JSObjectReference.DisposeAsync
    /**
    */
    open /* method final */ func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Implementation_JSObjectReference_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // JSObjectReference


// type: Microsoft.JSInterop.Implementation.JSObjectReferenceJsonWorker
public struct JSObjectReferenceJsonWorker {
    // void WriteJSObjectReference(System.Text.Json.Utf8JsonWriter, Microsoft.JSInterop.Implementation.JSObjectReference)
// docid: M:Microsoft.JSInterop.Implementation.JSObjectReferenceJsonWorker.WriteJSObjectReference(System.Text.Json.Utf8JsonWriter,Microsoft.JSInterop.Implementation.JSObjectReference)
    /**
    
            Writes a  to the .
            

    - Parameter writer: The .
    - Parameter objectReference: The  to write.
    */
    public static func WriteJSObjectReference(writer : dotnet.System.Text.Json.Utf8JsonWriter, objectReference : aspnetcore.Microsoft.JSInterop.Implementation.JSObjectReference) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_Implementation_JSObjectReferenceJsonWorker_void__WriteJSObjectReference_0__2__Utf8JsonWriter_JSObjectReference(&__thrown, writer.get_handle(), objectReference.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JSObjectReferenceJsonWorker


// type: Microsoft.JSInterop.Implementation.JSStreamReference
    /**
    
            Implements functionality for .
            

    */
public final class JSStreamReference
    :
    aspnetcore.Microsoft.JSInterop.Implementation.JSObjectReference,
    Microsoft_JSInterop_IJSStreamReference
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_Implementation_JSStreamReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_Length()
// docid: M:Microsoft.JSInterop.Implementation.JSStreamReference.get_Length
    public func get_Length() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Implementation_JSStreamReference_i64__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    public var Length : Swift.Int64 {
        get {
            return try! get_Length();
        }
    }
} // JSStreamReference


}

// Microsoft.JSInterop.Infrastructure
extension Microsoft.JSInterop.Infrastructure {
// type: Microsoft.JSInterop.Infrastructure.DotNetDispatcher
public struct DotNetDispatcher {
    // System.String Invoke(Microsoft.JSInterop.JSRuntime, ref Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo, System.String)
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetDispatcher.Invoke(Microsoft.JSInterop.JSRuntime,Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo@,System.String)
    /**
    
            Receives a call from JS to .NET, locating and invoking the specified method.
            

    - Parameter jsRuntime: The .
    - Parameter invocationInfo: The .
    - Parameter argsJson: A JSON representation of the parameters.
    - Returns: A JSON representation of the return value, or null.

    */
    public static func Invoke(jsRuntime : aspnetcore.Microsoft.JSInterop.JSRuntime, invocationInfo : inout aspnetcore.Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo, argsJson : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
            var _tmp_in_invocationInfo = invocationInfo.get_handle();
        let __return = Microsoft_JSInterop_Infrastructure_DotNetDispatcher_String__Invoke_0__3__JSRuntime_inDotNetInvocationInfo_String(&__thrown, jsRuntime.get_handle(), &_tmp_in_invocationInfo, argsJson.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void BeginInvokeDotNet(Microsoft.JSInterop.JSRuntime, Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo, System.String)
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetDispatcher.BeginInvokeDotNet(Microsoft.JSInterop.JSRuntime,Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo,System.String)
    /**
    
            Receives a call from JS to .NET, locating and invoking the specified method asynchronously.
            

    - Parameter jsRuntime: The .
    - Parameter invocationInfo: The .
    - Parameter argsJson: A JSON representation of the parameters.
    - Returns: A JSON representation of the return value, or null.

    */
    public static func BeginInvokeDotNet(jsRuntime : aspnetcore.Microsoft.JSInterop.JSRuntime, invocationInfo : aspnetcore.Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo, argsJson : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_Infrastructure_DotNetDispatcher_void__BeginInvokeDotNet_0__3__JSRuntime_DotNetInvocationInfo_String(&__thrown, jsRuntime.get_handle(), invocationInfo.get_handle(), argsJson.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInvokeJS(Microsoft.JSInterop.JSRuntime, System.String)
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetDispatcher.EndInvokeJS(Microsoft.JSInterop.JSRuntime,System.String)
    /**
    
            Receives notification that a call from .NET to JS has finished, marking the
            associated  as completed.
            

    - Parameter jsRuntime: The .
    - Parameter arguments: The serialized arguments for the callback completion.
    */
    public static func EndInvokeJS(jsRuntime : aspnetcore.Microsoft.JSInterop.JSRuntime, arguments : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_Infrastructure_DotNetDispatcher_void__EndInvokeJS_0__2__JSRuntime_String(&__thrown, jsRuntime.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReceiveByteArray(Microsoft.JSInterop.JSRuntime, System.Int32, System.Byte[])
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetDispatcher.ReceiveByteArray(Microsoft.JSInterop.JSRuntime,System.Int32,System.Byte[])
    /**
    
            Accepts the byte array data being transferred from JS to DotNet.
            

    - Parameter jsRuntime: The .
    - Parameter id: Identifier for the byte array being transfered.
    - Parameter data: Byte array to be transfered from JS.
    */
    public static func ReceiveByteArray(jsRuntime : aspnetcore.Microsoft.JSInterop.JSRuntime, id : Swift.Int32, data : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_JSInterop_Infrastructure_DotNetDispatcher_void__ReceiveByteArray_0__3__JSRuntime_i32_u8Array(&__thrown, jsRuntime.get_handle(), id, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DotNetDispatcher


// type: Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo
// boxed value type
    /**
    
            Information about a JSInterop call from JavaScript to .NET.
            

    */
public final class DotNetInvocationInfo
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the name of the assembly containing the method.
            Only one of  or  may be specified.
            

    */
    public var AssemblyName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyName();
        }
    }
    /**
    
            Gets the call identifier. This value is  when the client does not expect a value to be returned.
            

    */
    public var CallId : Optional<dotnet.System.String> {
        get {
            return try! get_CallId();
        }
    }
    /**
    
            Gets the object identifier for instance method calls.
            Only one of  or  may be specified.
            

    */
    public var DotNetObjectId : Swift.Int64 {
        get {
            return try! get_DotNetObjectId();
        }
    }
    /**
    
            Gets the identifier of the method to be invoked. This is the value specified in the .
            

    */
    public var MethodIdentifier : dotnet.System.String {
        get {
            return try! get_MethodIdentifier();
        }
    }
    // .ctor(System.String, System.String, System.Int64, System.String)
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.#ctor(System.String,System.String,System.Int64,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter assemblyName: The name of the assembly containing the method.
    - Parameter methodIdentifier: The identifier of the method to be invoked.
    - Parameter dotNetObjectId: The object identifier for instance method calls.
    - Parameter callId: The call identifier.
    */
    public init(assemblyName : Optional<dotnet.System.String>, methodIdentifier : dotnet.System.String, dotNetObjectId : Swift.Int64, callId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_ctor_0__4__String_String_i64_String(&__thrown, assemblyName?.get_handle() ?? nil, methodIdentifier.get_handle(), dotNetObjectId, callId?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_AssemblyName()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.get_AssemblyName
    public func get_AssemblyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_String__get_AssemblyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_MethodIdentifier()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.get_MethodIdentifier
    public func get_MethodIdentifier() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_String__get_MethodIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_DotNetObjectId()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.get_DotNetObjectId
    public func get_DotNetObjectId() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_i64__get_DotNetObjectId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_CallId()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationInfo.get_CallId
    public func get_CallId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationInfo_String__get_CallId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DotNetInvocationInfo


// type: Microsoft.JSInterop.Infrastructure.DotNetInvocationResult
// boxed value type
    /**
    
            Result of a .NET invocation that is returned to JavaScript.
            

    */
public final class DotNetInvocationResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the error kind.
            

    */
    public var ErrorKind : Optional<dotnet.System.String> {
        get {
            return try! get_ErrorKind();
        }
    }
    /**
    
            Gets the  that caused the failure.
            

    */
    public var Exception : Optional<dotnet.System.Exception> {
        get {
            return try! get_Exception();
        }
    }
    /**
    
            Gets a JSON representation of the result of a successful invocation.
            

    */
    public var ResultJson : Optional<dotnet.System.String> {
        get {
            return try! get_ResultJson();
        }
    }
    /**
    
             if the invocation succeeded, otherwise .
            

    */
    public var Success : Bool {
        get {
            return try! get_Success();
        }
    }
    public override init() {
        let h = Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Exception get_Exception()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.get_Exception
    public func get_Exception() throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_Exception__get_Exception_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ErrorKind()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.get_ErrorKind
    public func get_ErrorKind() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_String__get_ErrorKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ResultJson()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.get_ResultJson
    public func get_ResultJson() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_String__get_ResultJson_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Success()
// docid: M:Microsoft.JSInterop.Infrastructure.DotNetInvocationResult.get_Success
    public func get_Success() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_JSInterop_Infrastructure_DotNetInvocationResult_bool__get_Success_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DotNetInvocationResult


}



public protocol Microsoft_JSInterop_IJSInProcessObjectReference
    :
    Microsoft_JSInterop_IJSObjectReference,
    System_IDisposable
{
}

public protocol Microsoft_JSInterop_IJSInProcessRuntime
    :
    Microsoft_JSInterop_IJSRuntime
{
}

public protocol Microsoft_JSInterop_IJSObjectReference
    :
    System_IAsyncDisposable
{
}

public protocol Microsoft_JSInterop_IJSRuntime
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_JSInterop_IJSStreamReference
    :
    System_IAsyncDisposable
{
}

public protocol Microsoft_JSInterop_IJSUnmarshalledObjectReference
    :
    Microsoft_JSInterop_IJSInProcessObjectReference
{
}

public protocol Microsoft_JSInterop_IJSUnmarshalledRuntime
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD void InvokeVoid(Microsoft.JSInterop.IJSInProcessObjectReference, System.String, System.Object[])
extension Microsoft_JSInterop_IJSInProcessObjectReference {
    public func InvokeVoid(identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        try aspnetcore.Microsoft.JSInterop.JSInProcessObjectReferenceExtensions.InvokeVoid(jsObjectReference: aspnetcore.Microsoft.JSInterop.IJSInProcessObjectReference(hndl: __copy_handle(self.get_handle())), identifier: identifier, args: args);
    }
}

// EXTENSION METHOD void InvokeVoid(Microsoft.JSInterop.IJSInProcessRuntime, System.String, System.Object[])
extension Microsoft_JSInterop_IJSInProcessRuntime {
    public func InvokeVoid(identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        try aspnetcore.Microsoft.JSInterop.JSInProcessRuntimeExtensions.InvokeVoid(jsRuntime: aspnetcore.Microsoft.JSInterop.IJSInProcessRuntime(hndl: __copy_handle(self.get_handle())), identifier: identifier, args: args);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.Object[])
extension Microsoft_JSInterop_IJSObjectReference {
    public func InvokeVoidAsync(identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(jsObjectReference: aspnetcore.Microsoft.JSInterop.IJSObjectReference(hndl: __copy_handle(self.get_handle())), identifier: identifier, args: args);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Threading.CancellationToken, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.Threading.CancellationToken, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.Threading.CancellationToken, System.Object[])
extension Microsoft_JSInterop_IJSObjectReference {
    public func InvokeVoidAsync(identifier : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.JSInterop.JSObjectReferenceExtensions.InvokeVoidAsync(jsObjectReference: aspnetcore.Microsoft.JSInterop.IJSObjectReference(hndl: __copy_handle(self.get_handle())), identifier: identifier, cancellationToken: cancellationToken, args: args);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])
// TODO COPE extension method (span) System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSObjectReference, System.String, System.TimeSpan, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.Object[])
extension Microsoft_JSInterop_IJSRuntime {
    public func InvokeVoidAsync(identifier : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(jsRuntime: aspnetcore.Microsoft.JSInterop.IJSRuntime(hndl: __copy_handle(self.get_handle())), identifier: identifier, args: args);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Threading.CancellationToken, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.Threading.CancellationToken, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.Threading.CancellationToken, System.Object[])
extension Microsoft_JSInterop_IJSRuntime {
    public func InvokeVoidAsync(identifier : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        return try aspnetcore.Microsoft.JSInterop.JSRuntimeExtensions.InvokeVoidAsync(jsRuntime: aspnetcore.Microsoft.JSInterop.IJSRuntime(hndl: __copy_handle(self.get_handle())), identifier: identifier, cancellationToken: cancellationToken, args: args);
    }
}

// EXTENSION METHOD System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])
// TODO COPE extension method (unused generic param) System.Threading.Tasks.ValueTask<TValue> InvokeAsync<TValue>(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])

// EXTENSION METHOD System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])
// TODO COPE extension method (span) System.Threading.Tasks.ValueTask InvokeVoidAsync(Microsoft.JSInterop.IJSRuntime, System.String, System.TimeSpan, System.Object[])

