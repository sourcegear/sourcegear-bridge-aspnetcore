// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Mvc
extension Microsoft.AspNetCore.Mvc {
// type: Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute
    /**
    
            An attribute that causes validation of antiforgery tokens for all unsafe HTTP methods. An antiforgery
            token is required for HTTP methods other than GET, HEAD, OPTIONS, and TRACE.
            

    */
open class AutoValidateAntiforgeryTokenAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.AutoValidateAntiforgeryTokenAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_AutoValidateAntiforgeryTokenAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // AutoValidateAntiforgeryTokenAttribute


// type: Microsoft.AspNetCore.Mvc.Controller
    /**
    
            A base class for an MVC controller with view support.
            

    */
open class Controller
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ControllerBase,
    Microsoft_AspNetCore_Mvc_Filters_IActionFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IAsyncActionFilter,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Controller_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ViewResult View()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.View
    /**
    
            Creates a  object that renders a view to the response.
            

    - Returns: The created  object for the response.

    */
    open func View() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewResult__View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewResult View(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.View(System.String)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter viewName: The name or path of the view that is rendered to the response.
    - Returns: The created  object for the response.

    */
    open func View(viewName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewResult__View_0__1__String(&__thrown, self.get_handle(), viewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewResult View(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.View(System.Object)
    /**
    
            Creates a  object by specifying a 
            to be rendered by the view.
            

    - Parameter model: The model that is rendered by the view.
    - Returns: The created  object for the response.

    */
    open func View(model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewResult__View_0__1__Object(&__thrown, self.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewResult View(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.View(System.String,System.Object)
    /**
    
            Creates a  object by specifying a 
            and the  to be rendered by the view.
            

    - Parameter viewName: The name or path of the view that is rendered to the response.
    - Parameter model: The model that is rendered by the view.
    - Returns: The created  object for the response.

    */
    open func View(viewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewResult__View_0__2__String_Object(&__thrown, self.get_handle(), viewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult PartialView()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.PartialView
    /**
    
            Creates a  object that renders a partial view to the response.
            

    - Returns: The created  object for the response.

    */
    open func PartialView() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_PartialViewResult__PartialView_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult PartialView(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.PartialView(System.String)
    /**
    
            Creates a  object by specifying a .
            

    - Parameter viewName: The name or path of the partial view that is rendered to the response.
    - Returns: The created  object for the response.

    */
    open func PartialView(viewName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_PartialViewResult__PartialView_0__1__String(&__thrown, self.get_handle(), viewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult PartialView(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.PartialView(System.Object)
    /**
    
            Creates a  object by specifying a 
            to be rendered by the partial view.
            

    - Parameter model: The model that is rendered by the partial view.
    - Returns: The created  object for the response.

    */
    open func PartialView(model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_PartialViewResult__PartialView_0__1__Object(&__thrown, self.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.PartialViewResult PartialView(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.PartialView(System.String,System.Object)
    /**
    
            Creates a  object by specifying a 
            and the  to be rendered by the partial view.
            

    - Parameter viewName: The name or path of the partial view that is rendered to the response.
    - Parameter model: The model that is rendered by the partial view.
    - Returns: The created  object for the response.

    */
    open func PartialView(viewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_PartialViewResult__PartialView_0__2__String_Object(&__thrown, self.get_handle(), viewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.ViewComponent(System.String)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewComponentResult__ViewComponent_0__1__String(&__thrown, self.get_handle(), componentName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.ViewComponent(System.Type)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewComponentResult__ViewComponent_0__1__Type(&__thrown, self.get_handle(), componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.ViewComponent(System.String,System.Object)
    /**
    
            Creates a  by specifying the name of a view component to render.
            

    - Parameter componentName: 
            The view component name. Can be a view component
             or
            .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentName : dotnet.System.String, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewComponentResult__ViewComponent_0__2__String_Object(&__thrown, self.get_handle(), componentName.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponentResult ViewComponent(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.ViewComponent(System.Type,System.Object)
    /**
    
            Creates a  by specifying the  of a view component to
            render.
            

    - Parameter componentType: The view component .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: The created  object for the response.

    */
    open func ViewComponent(componentType : dotnet.System.Type_, arguments : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewComponentResult__ViewComponent_0__2__Type_Object(&__thrown, self.get_handle(), componentType.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.JsonResult Json(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.Json(System.Object)
    /**
    
            Creates a  object that serializes the specified  object
            to JSON.
            

    - Parameter data: The object to serialize.
    - Returns: The created  that serializes the specified 
            to JSON format for the response.

    */
    open func Json(data : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.JsonResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_JsonResult__Json_0__1__Object(&__thrown, self.get_handle(), data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.JsonResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.JsonResult Json(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.Json(System.Object,System.Object)
    /**
    
            Creates a  object that serializes the specified  object
            to JSON.
            

    - Parameter data: The object to serialize.
    - Parameter serializerSettings: The serializer settings to be used by the formatter.
            
            When using System.Text.Json, this should be an instance of .
            
            
            When using Newtonsoft.Json, this should be an instance of JsonSerializerSettings.
            
            
    - Returns: The created  that serializes the specified 
            as JSON format for the response.

    */
    open func Json(data : Optional<dotnet.System.Object>, serializerSettings : Optional<dotnet.System.Object>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.JsonResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_JsonResult__Json_0__2__Object_Object(&__thrown, self.get_handle(), data?.get_handle() ?? nil, serializerSettings?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.JsonResult(hndl : __return);
        }
    }
    // void OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
    /**
    
            Called before the action method is invoked.
            

    - Parameter context: The action executing context.
    */
    open func OnActionExecuting(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controller_void__OnActionExecuting_0__1__ActionExecutingContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
    /**
    
            Called after the action method is invoked.
            

    - Parameter context: The action executed context.
    */
    open func OnActionExecuted(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controller_void__OnActionExecuted_0__1__ActionExecutedContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
    /**
    
            Called before the action method is invoked.
            

    - Parameter context: The action executing context.
    - Parameter next: The  to execute. Invoke this delegate in the body
            of  to continue execution of the action.
    - Returns: A  instance.

    */
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_Task__OnActionExecutionAsync_0__2__ActionExecutingContext_ActionExecutionDelegate(&__thrown, self.get_handle(), context.get_handle(), next.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open func OnActionExecutionAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext, next : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext>) throws -> dotnet.System.Threading.Tasks.Task {
        let del_next = try aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate(next);
        return try OnActionExecutionAsync(context: context, next: del_next);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controller_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controller_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Controller.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Controller_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.Controller.get_ViewBag
    open func get_ViewBag() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Controller_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    
            Gets or sets  used by .
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets the dynamic view bag.
            

    */
    open var ViewBag : dotnet.System.Object {
        get {
            return try! get_ViewBag();
        }
    }
    /**
    
            Gets or sets  used by  and .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
} // Controller


// type: Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions
    /**
    
            Provides programmatic configuration for cookies set by 
            

    */
open class CookieTempDataProviderOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_Cookie()
// docid: M:Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions.get_Cookie
    open func get_Cookie() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_CookieBuilder__get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions.set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_Cookie(value : Optional<aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_void__set_Cookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            
            Determines the settings used to create the cookie in .
            
            
             defaults to . Setting this to
             may cause browsers to not send back the cookie to the server in an
            OAuth login flow.
             defaults to .
             defaults to true.
             defaults to false, This property is only considered when a
            user opts into the CookiePolicyMiddleware. If you are using this middleware and want to use
            , then either set this property to true or
            request user consent for non-essential cookies.
            
            

    */
    open var Cookie : Optional<aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder> {
        get {
            return try! get_Cookie();
        }
        set(v) {
            return try! set_Cookie(value: v!);
        }
    }
} // CookieTempDataProviderOptions


// type: Microsoft.AspNetCore.Mvc.IViewComponentHelper
    /**
    
            Supports the rendering of view components in a view.
            

    */
open class IViewComponentHelper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IViewComponentHelper
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IViewComponentHelper_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.IViewComponentHelper.InvokeAsync(System.String,System.Object)
    /**
    
            Invokes a view component with the specified .
            

    - Parameter name: The name of the view component.
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: A  that on completion returns the rendered .
            

    */
    open func InvokeAsync(name : dotnet.System.String, arguments : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IViewComponentHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.IViewComponentHelper.InvokeAsync(System.Type,System.Object)
    /**
    
            Invokes a view component of type .
            

    - Parameter componentType: The view component .
    - Parameter arguments: 
            An  with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an  instance
            containing the invocation arguments.
            
    - Returns: A  that on completion returns the rendered .
            

    */
    open func InvokeAsync(componentType : dotnet.System.Type_, arguments : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IViewComponentHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__Type_Object(&__thrown, self.get_handle(), componentType.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // IViewComponentHelper


// type: Microsoft.AspNetCore.Mvc.IViewComponentResult
    /**
    
            Result type of a .
            

    */
open class IViewComponentResult
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_IViewComponentResult
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IViewComponentResult_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.IViewComponentResult.Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Executes the result of a  using the specified .
            

    - Parameter context: The  for the current component execution.
    */
    open func Execute(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_IViewComponentResult_void__Execute_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.IViewComponentResult.ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Asynchronously executes the result of a  using the specified
            .
            

    - Parameter context: The  for the current component execution.
    - Returns: A  that represents the asynchronous execution.

    */
    open func ExecuteAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IViewComponentResult_Task__ExecuteAsync_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentResult


// type: Microsoft.AspNetCore.Mvc.IgnoreAntiforgeryTokenAttribute
    /**
    
            A filter that skips antiforgery token validation.
            

    */
open class IgnoreAntiforgeryTokenAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IAntiforgeryPolicy,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_IgnoreAntiforgeryTokenAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.IgnoreAntiforgeryTokenAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_IgnoreAntiforgeryTokenAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.IgnoreAntiforgeryTokenAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_IgnoreAntiforgeryTokenAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.IgnoreAntiforgeryTokenAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_IgnoreAntiforgeryTokenAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // IgnoreAntiforgeryTokenAttribute


// type: Microsoft.AspNetCore.Mvc.MvcViewOptions
    /**
    
            Provides programmatic configuration for views in the MVC framework.
            

    */
open class MvcViewOptions
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_MvcViewOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.MvcViewOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_MvcViewOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions get_HtmlHelperOptions()
// docid: M:Microsoft.AspNetCore.Mvc.MvcViewOptions.get_HtmlHelperOptions
    open func get_HtmlHelperOptions() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcViewOptions_HtmlHelperOptions__get_HtmlHelperOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HtmlHelperOptions(Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions)
// docid: M:Microsoft.AspNetCore.Mvc.MvcViewOptions.set_HtmlHelperOptions(Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions)
    open func set_HtmlHelperOptions(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_MvcViewOptions_void__set_HtmlHelperOptions_0__1__HtmlHelperOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> get_ViewEngines()
// docid: M:Microsoft.AspNetCore.Mvc.MvcViewOptions.get_ViewEngines
    open func get_ViewEngines() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcViewOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine___get_ViewEngines_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> get_ClientModelValidatorProviders()
// docid: M:Microsoft.AspNetCore.Mvc.MvcViewOptions.get_ClientModelValidatorProviders
    open func get_ClientModelValidatorProviders() throws -> dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_MvcViewOptions_System_Collections_Generic_IList_Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidatorProvider___get_ClientModelValidatorProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    /**
    
            Gets a list of  instances.
            

    */
    open var ClientModelValidatorProviders : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider> {
        get {
            return try! get_ClientModelValidatorProviders();
        }
    }
    /**
    
            Gets or sets programmatic configuration for the HTML helpers and .
            

    */
    open var HtmlHelperOptions : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions {
        get {
            return try! get_HtmlHelperOptions();
        }
        set(v) {
            return try! set_HtmlHelperOptions(value: v);
        }
    }
    /**
    
            Gets a list s used by this application.
            

    */
    open var ViewEngines : dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        get {
            return try! get_ViewEngines();
        }
    }
} // MvcViewOptions


// type: Microsoft.AspNetCore.Mvc.PageRemoteAttribute
    /**
    
            A  for razor page handler which configures Unobtrusive validation
            to send an Ajax request to the web site. The invoked handler should return JSON indicating
            whether the value is valid.
            

    */
open class PageRemoteAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.RemoteAttributeBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_PageRemoteAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.PageRemoteAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_PageRemoteAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PageHandler()
// docid: M:Microsoft.AspNetCore.Mvc.PageRemoteAttribute.get_PageHandler
    open func get_PageHandler() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PageRemoteAttribute_String__get_PageHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageHandler(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PageRemoteAttribute.set_PageHandler(System.String)
    open func set_PageHandler(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PageRemoteAttribute_void__set_PageHandler_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PageName()
// docid: M:Microsoft.AspNetCore.Mvc.PageRemoteAttribute.get_PageName
    open func get_PageName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PageRemoteAttribute_String__get_PageName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PageName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PageRemoteAttribute.set_PageName(System.String)
    open func set_PageName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PageRemoteAttribute_void__set_PageName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The handler name used when generating the URL where client should send a validation request.
            

    */
    open var PageHandler : Optional<dotnet.System.String> {
        get {
            return try! get_PageHandler();
        }
        set(v) {
            return try! set_PageHandler(value: v!);
        }
    }
    /**
    
            The page name used when generating the URL where client should send a validation request.
            

    */
    open var PageName : Optional<dotnet.System.String> {
        get {
            return try! get_PageName();
        }
        set(v) {
            return try! set_PageName(value: v!);
        }
    }
} // PageRemoteAttribute


// type: Microsoft.AspNetCore.Mvc.PartialViewResult
    /**
    
            Represents an  that renders a partial view to the response.
            

    */
open class PartialViewResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_PartialViewResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_PartialViewResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_ViewName
    open func get_ViewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_ViewName(System.String)
    open func set_ViewName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_ViewName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine get_ViewEngine()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_ViewEngine
    open func get_ViewEngine() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_IViewEngine__get_ViewEngine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
    open func set_ViewEngine(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_ViewEngine_0__1__IViewEngine(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_PartialViewResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.PartialViewResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_PartialViewResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the Content-Type header for the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets the view data model.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            Gets or sets the  used for rendering the view for this result.
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets or sets the  used for rendering the view for this result.
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
    /**
    
            Gets or sets the  used to locate views.
            

    */
    open var ViewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        get {
            return try! get_ViewEngine();
        }
        set(v) {
            return try! set_ViewEngine(value: v!);
        }
    }
    /**
    
            Gets or sets the name or path of the partial view that is rendered to the response.
            

    */
    open var ViewName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewName();
        }
        set(v) {
            return try! set_ViewName(value: v!);
        }
    }
} // PartialViewResult


// type: Microsoft.AspNetCore.Mvc.RemoteAttribute
    /**
    
            A  for controllers which configures Unobtrusive validation to send an Ajax request to the
            web site. The invoked action should return JSON indicating whether the value is valid.
            

    */
open class RemoteAttribute
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.RemoteAttributeBase
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RemoteAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttribute.#ctor(System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter routeName: 
            The route name used when generating the URL where client should send a validation request.
            
    */
    public init(routeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RemoteAttribute_ctor_0__1__String(&__thrown, routeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttribute.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter action: 
            The action name used when generating the URL where client should send a validation request.
            
    - Parameter controller: 
            The controller name used when generating the URL where client should send a validation request.
            
    */
    public init(action : dotnet.System.String, controller : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RemoteAttribute_ctor_0__2__String_String(&__thrown, action.get_handle(), controller.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttribute.#ctor(System.String,System.String,System.String)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter action: 
            The action name used when generating the URL where client should send a validation request.
            
    - Parameter controller: 
            The controller name used when generating the URL where client should send a validation request.
            
    - Parameter areaName: The name of the area containing the .
    */
    public init(action : dotnet.System.String, controller : dotnet.System.String, areaName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_RemoteAttribute_ctor_0__3__String_String_String(&__thrown, action.get_handle(), controller.get_handle(), areaName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // RemoteAttribute


// type: Microsoft.AspNetCore.Mvc.RemoteAttributeBase
    /**
    
            A  which configures Unobtrusive validation to send an Ajax request to the
            web site. The invoked endpoint should return JSON indicating whether the value is valid.
            

    */
open class RemoteAttributeBase
    :
    dotnet.System.ComponentModel.DataAnnotations.ValidationAttribute,
    Microsoft_AspNetCore_Mvc_ModelBinding_Validation_IClientModelValidator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_RemoteAttributeBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String FormatAdditionalFieldsForClientValidation(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.FormatAdditionalFieldsForClientValidation(System.String)
    /**
    
            Formats  and  for use in generated HTML.
            

    - Parameter property: 
            Name of the property associated with this  instance.
            
    - Returns: Comma-separated names of fields the client should include in a validation request.

    */
    open func FormatAdditionalFieldsForClientValidation(property : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_String__FormatAdditionalFieldsForClientValidation_0__1__String(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatPropertyForClientValidation(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.FormatPropertyForClientValidation(System.String)
    /**
    
            Formats  for use in generated HTML.
            

    - Parameter property: One field name the client should include in a validation request.
    - Returns: Name of a field the client should include in a validation request.

    */
    open class func FormatPropertyForClientValidation(property : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_String__FormatPropertyForClientValidation_0__1__String(&__thrown, property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String FormatErrorMessage(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.FormatErrorMessage(System.String)
    /**
    */
    open override func FormatErrorMessage(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_String__FormatErrorMessage_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValid(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.IsValid(System.Object)
    /**
    */
    open override func IsValid(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void AddValidation(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.AddValidation(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext)
    /**
    
            Adds Unobtrusive validation HTML attributes to .
            

    - Parameter context: 
             to add Unobtrusive validation HTML attributes to.
            
    */
    open func AddValidation(context : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientModelValidationContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RemoteAttributeBase_void__AddValidation_0__1__ClientModelValidationContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HttpMethod()
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.get_HttpMethod
    open func get_HttpMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_String__get_HttpMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HttpMethod(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.set_HttpMethod(System.String)
    open func set_HttpMethod(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RemoteAttributeBase_void__set_HttpMethod_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_AdditionalFields()
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.get_AdditionalFields
    open func get_AdditionalFields() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_RemoteAttributeBase_String__get_AdditionalFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AdditionalFields(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.RemoteAttributeBase.set_AdditionalFields(System.String)
    open func set_AdditionalFields(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_RemoteAttributeBase_void__set_AdditionalFields_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the comma-separated names of fields the client should include in a validation request.
            

    */
    open var AdditionalFields : dotnet.System.String {
        get {
            return try! get_AdditionalFields();
        }
        set(v) {
            return try! set_AdditionalFields(value: v);
        }
    }
    /**
    
            Gets or sets the HTTP method ("Get" or "Post") client should use when sending a validation
            request.
            

    */
    open var HttpMethod : Optional<dotnet.System.String> {
        get {
            return try! get_HttpMethod();
        }
        set(v) {
            return try! set_HttpMethod(value: v!);
        }
    }
} // RemoteAttributeBase


// type: Microsoft.AspNetCore.Mvc.SkipStatusCodePagesAttribute
    /**
    
            A filter that prevents execution of the StatusCodePages middleware.
            

    */
open class SkipStatusCodePagesAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IResourceFilter,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_SkipStatusCodePagesAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.SkipStatusCodePagesAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_SkipStatusCodePagesAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
// docid: M:Microsoft.AspNetCore.Mvc.SkipStatusCodePagesAttribute.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)
    /**
    */
    open /* method final */ func OnResourceExecuted(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SkipStatusCodePagesAttribute_void__OnResourceExecuted_0__1__ResourceExecutedContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
// docid: M:Microsoft.AspNetCore.Mvc.SkipStatusCodePagesAttribute.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)
    /**
    */
    open /* method final */ func OnResourceExecuting(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_SkipStatusCodePagesAttribute_void__OnResourceExecuting_0__1__ResourceExecutingContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SkipStatusCodePagesAttribute


// type: Microsoft.AspNetCore.Mvc.TempDataAttribute
    /**
    
            Properties decorated with  will have their values stored in
            and loaded from the . 
            is supported on properties of Controllers, Razor Pages, and Razor Page Models.
            

    */
public final class TempDataAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_TempDataAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.TempDataAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_TempDataAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.TempDataAttribute.get_Key
    public func get_Key() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_TempDataAttribute_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Key(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.TempDataAttribute.set_Key(System.String)
    public func set_Key(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_TempDataAttribute_void__set_Key_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the key used to get or add the property from value from .
            When unspecified, the key is derived from the property name.
            

    */
    public var Key : Optional<dotnet.System.String> {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v!);
        }
    }
} // TempDataAttribute


// type: Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute
    /**
    
            Specifies that the class or method that this attribute is applied validates the anti-forgery token.
            If the anti-forgery token is not available, or if the token is invalid, the validation will fail
            and the action method will not execute.
            

    */
open class ValidateAntiForgeryTokenAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ValidateAntiForgeryTokenAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the  property.
            

    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // ValidateAntiForgeryTokenAttribute


// type: Microsoft.AspNetCore.Mvc.ViewComponent
    /**
    
            A base class for view components.
            

    */
open class ViewComponent
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult Content(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.Content(System.String)
    /**
    
            Returns a result which will render HTML encoded text.
            

    - Parameter content: The content, will be HTML encoded before output.
    - Returns: A .

    */
    open func Content(content : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ContentViewComponentResult__Content_0__1__String(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult View()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.View
    /**
    
            Returns a result which will render the partial view with name "Default".
            

    - Returns: A .

    */
    open func View() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewViewComponentResult__View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult View(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.View(System.String)
    /**
    
            Returns a result which will render the partial view with name .
            

    - Parameter viewName: The name of the partial view to render.
    - Returns: A .

    */
    open func View(viewName : Optional<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewViewComponentResult__View_0__1__String(&__thrown, self.get_handle(), viewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult View<TModel>(TModel)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.View``1(``0)
    /**
    
            Returns a result which will render the partial view with name "Default".
            

    - Parameter model: The model object for the view.
    - Returns: A .

    */
    open func View<UTModel : SGBridgeGenericValue>(model : UTModel) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewViewComponentResult__View_1__1__UTModel(UTModel.get_type_handle(), &__thrown, self.get_handle(), model.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult View<TModel>(System.String, TModel)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.View``1(System.String,``0)
    /**
    
            Returns a result which will render the partial view with name .
            

    - Parameter viewName: The name of the partial view to render.
    - Parameter model: The model object for the view.
    - Returns: A .

    */
    open func View<UTModel : SGBridgeGenericValue>(viewName : Optional<dotnet.System.String>, model : UTModel) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewViewComponentResult__View_1__2__String_UTModel(UTModel.get_type_handle(), &__thrown, self.get_handle(), viewName?.get_handle() ?? nil, model.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpContext get_HttpContext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_HttpContext
    open func get_HttpContext() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_HttpContext__get_HttpContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.HttpRequest get_Request()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_Request
    open func get_Request() throws -> aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_HttpRequest__get_Request_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.HttpRequest(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IPrincipal get_User()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_User
    open func get_User() throws -> dotnet.System.Security.Principal.IPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_IPrincipal__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Claims.ClaimsPrincipal get_UserClaimsPrincipal()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_UserClaimsPrincipal
    open func get_UserClaimsPrincipal() throws -> dotnet.System.Security.Claims.ClaimsPrincipal {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ClaimsPrincipal__get_UserClaimsPrincipal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsPrincipal(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Routing.RouteData get_RouteData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_RouteData
    open func get_RouteData() throws -> aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_RouteData__get_RouteData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Routing.RouteData(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ViewBag
    open func get_ViewBag() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IUrlHelper get_Url()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_Url
    open func get_Url() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_IUrlHelper__get_Url_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.set_Url(Microsoft.AspNetCore.Mvc.IUrlHelper)
    open func set_Url(value : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponent_void__set_Url_0__1__IUrlHelper(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext get_ViewComponentContext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ViewComponentContext
    open func get_ViewComponentContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewComponentContext__get_ViewComponentContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewComponentContext(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.set_ViewComponentContext(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    open func set_ViewComponentContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponent_void__set_ViewComponentContext_0__1__ViewComponentContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine get_ViewEngine()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.get_ViewEngine
    open func get_ViewEngine() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponent_ICompositeViewEngine__get_ViewEngine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponent.set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine)
    open func set_ViewEngine(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponent_void__set_ViewEngine_0__1__ICompositeViewEngine(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the .
            

    */
    open var HttpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext {
        get {
            return try! get_HttpContext();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Request : aspnetcore.Microsoft.AspNetCore.Http.HttpRequest {
        get {
            return try! get_Request();
        }
    }
    /**
    
            Gets the  for the current request.
            

    */
    open var RouteData : aspnetcore.Microsoft.AspNetCore.Routing.RouteData {
        get {
            return try! get_RouteData();
        }
    }
    /**
    
            Gets the .
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var Url : aspnetcore.Microsoft.AspNetCore.Mvc.IUrlHelper {
        get {
            return try! get_Url();
        }
        set(v) {
            return try! set_Url(value: v);
        }
    }
    /**
    
            Gets the  for the current user.
            

    */
    open var User : dotnet.System.Security.Principal.IPrincipal {
        get {
            return try! get_User();
        }
    }
    /**
    
            Gets the  for the current user.
            

    */
    open var UserClaimsPrincipal : dotnet.System.Security.Claims.ClaimsPrincipal {
        get {
            return try! get_UserClaimsPrincipal();
        }
    }
    /**
    
            Gets the view bag.
            

    */
    open var ViewBag : dotnet.System.Object {
        get {
            return try! get_ViewBag();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewComponentContext : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext {
        get {
            return try! get_ViewComponentContext();
        }
        set(v) {
            return try! set_ViewComponentContext(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine {
        get {
            return try! get_ViewEngine();
        }
        set(v) {
            return try! set_ViewEngine(value: v);
        }
    }
} // ViewComponent


// type: Microsoft.AspNetCore.Mvc.ViewComponentAttribute
    /**
    
            Indicates the class and all subclasses are view components. Optionally specifies a view component's name. If
            defining a base class for multiple view components, associate this attribute with that base.
            

    */
open class ViewComponentAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponentAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponentAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentAttribute.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentAttribute_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the name of the view component. Do not supply a name in an attribute associated with a view
            component base class.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // ViewComponentAttribute


// type: Microsoft.AspNetCore.Mvc.ViewComponentResult
    /**
    
            An  which renders a view component to the response.
            

    */
open class ViewComponentResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponentResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponentResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_Arguments
    open func get_Arguments() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_Object__get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Arguments(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_Arguments(System.Object)
    open func set_Arguments(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_Arguments_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ViewComponentName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_ViewComponentName
    open func get_ViewComponentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_String__get_ViewComponentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewComponentName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_ViewComponentName(System.String)
    open func set_ViewComponentName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_ViewComponentName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ViewComponentType()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_ViewComponentType
    open func get_ViewComponentType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_Type__get_ViewComponentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewComponentType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_ViewComponentType(System.Type)
    open func set_ViewComponentType(value : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_ViewComponentType_0__1__Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponentResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponentResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponentResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the arguments provided to the view component.
            

    */
    open var Arguments : Optional<dotnet.System.Object> {
        get {
            return try! get_Arguments();
        }
        set(v) {
            return try! set_Arguments(value: v!);
        }
    }
    /**
    
            Gets or sets the Content-Type header for the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Get the view data model.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets or sets the name of the view component to invoke. Will be ignored if 
            is set to a non-null value.
            

    */
    open var ViewComponentName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewComponentName();
        }
        set(v) {
            return try! set_ViewComponentName(value: v!);
        }
    }
    /**
    
            Gets or sets the type of the view component to invoke.
            

    */
    open var ViewComponentType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ViewComponentType();
        }
        set(v) {
            return try! set_ViewComponentType(value: v!);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
} // ViewComponentResult


// type: Microsoft.AspNetCore.Mvc.ViewDataAttribute
    /**
    
            Properties decorated with  will have their values stored in
            and loaded from the . 
            is supported on properties of Controllers, and Razor Page handlers.
            

    */
public final class ViewDataAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewDataAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewDataAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewDataAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Key()
// docid: M:Microsoft.AspNetCore.Mvc.ViewDataAttribute.get_Key
    public func get_Key() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewDataAttribute_String__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Key(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewDataAttribute.set_Key(System.String)
    public func set_Key(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewDataAttribute_void__set_Key_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the key used to get or add the property from value from .
            When unspecified, the key is the property name.
            

    */
    public var Key : Optional<dotnet.System.String> {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v!);
        }
    }
} // ViewDataAttribute


// type: Microsoft.AspNetCore.Mvc.ViewResult
    /**
    
            Represents an  that renders a view to the response.
            

    */
open class ViewResult
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult,
    Microsoft_AspNetCore_Mvc_Infrastructure_IStatusCodeActionResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)
    /**
    */
    open override func ExecuteResultAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_Task__ExecuteResultAsync_0__1__ActionContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_StatusCode()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_StatusCode
    open /* method final */ func get_StatusCode() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_System_Nullable_i32___get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_StatusCode(System.Nullable{System.Int32})
    open func set_StatusCode(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_StatusCode_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_ViewName
    open func get_ViewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_ViewName(System.String)
    open func set_ViewName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_ViewName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine get_ViewEngine()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_ViewEngine
    open func get_ViewEngine() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_IViewEngine__get_ViewEngine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
    open func set_ViewEngine(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_ViewEngine_0__1__IViewEngine(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewResult_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewResult.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewResult_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the Content-Type header for the response.
            

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    
            Gets the view data model.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets or sets the HTTP status code.
            

    */
    public var StatusCode : Optional<Swift.Int32> {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v!);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets or sets the  for this result.
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
    /**
    
            Gets or sets the  used to locate views.
            

    */
    open var ViewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        get {
            return try! get_ViewEngine();
        }
        set(v) {
            return try! set_ViewEngine(value: v!);
        }
    }
    /**
    
            Gets or sets the name or path of the view that is rendered to the response.
            

    */
    open var ViewName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewName();
        }
        set(v) {
            return try! set_ViewName(value: v!);
        }
    }
} // ViewResult


}
// Microsoft.AspNetCore.Mvc.Diagnostics
extension Microsoft.AspNetCore.Mvc.Diagnostics {
// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData
    /**
    
            An  that occurs after a ViewComponent.
            

    */
public final class AfterViewComponentEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, Microsoft.AspNetCore.Mvc.IViewComponentResult, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,Microsoft.AspNetCore.Mvc.IViewComponentResult,System.Object)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter viewComponentContext: The .
    - Parameter viewComponentResult: The .
    - Parameter viewComponent: The .
    */
    public init(actionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, viewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, viewComponentResult : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentResult>, viewComponent : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_ctor_0__4__ActionDescriptor_ViewComponentContext_IViewComponentResult_Object(&__thrown, actionDescriptor?.get_handle() ?? nil, viewComponentContext?.get_handle() ?? nil, viewComponentResult?.get_handle() ?? nil, viewComponent?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext get_ViewComponentContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData.get_ViewComponentContext
    public func get_ViewComponentContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_ViewComponentContext__get_ViewComponentContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.IViewComponentResult get_ViewComponentResult()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData.get_ViewComponentResult
    public func get_ViewComponentResult() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_IViewComponentResult__get_ViewComponentResult_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ViewComponent()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewComponentEventData.get_ViewComponent
    public func get_ViewComponent() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewComponentEventData_Object__get_ViewComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The view component.
            

    */
    public var ViewComponent : Optional<dotnet.System.Object> {
        get {
            return try! get_ViewComponent();
        }
    }
    /**
    
            The .
            

    */
    public var ViewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        get {
            return try! get_ViewComponentContext();
        }
    }
    /**
    
            The .
            

    */
    public var ViewComponentResult : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentResult> {
        get {
            return try! get_ViewComponentResult();
        }
    }
} // AfterViewComponentEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewEventData
    /**
    
            An  that occurs after a view.
            

    */
public final class AfterViewEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewEventData.#ctor(Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter view: The .
    - Parameter viewContext: The .
    */
    public init(view : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView>, viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewEventData_ctor_0__2__IView_ViewContext(&__thrown, view?.get_handle() ?? nil, viewContext?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewEventData.get_View
    public func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewEventData_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.AfterViewEventData.get_ViewContext
    public func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_AfterViewEventData_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            The .
            

    */
    public var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
    }
} // AfterViewEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewComponentEventData
    /**
    
            An  that occurs before a ViewComponent.
            

    */
public final class BeforeViewComponentEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewComponentEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter viewComponentContext: The .
    - Parameter viewComponent: The .
    */
    public init(actionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, viewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, viewComponent : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_ctor_0__3__ActionDescriptor_ViewComponentContext_Object(&__thrown, actionDescriptor?.get_handle() ?? nil, viewComponentContext?.get_handle() ?? nil, viewComponent?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewComponentEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext get_ViewComponentContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewComponentEventData.get_ViewComponentContext
    public func get_ViewComponentContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_ViewComponentContext__get_ViewComponentContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ViewComponent()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewComponentEventData.get_ViewComponent
    public func get_ViewComponent() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewComponentEventData_Object__get_ViewComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The view component.
            

    */
    public var ViewComponent : Optional<dotnet.System.Object> {
        get {
            return try! get_ViewComponent();
        }
    }
    /**
    
            The .
            

    */
    public var ViewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        get {
            return try! get_ViewComponentContext();
        }
    }
} // BeforeViewComponentEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewEventData
    /**
    
            An  that occurs before a view.
            

    */
public final class BeforeViewEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewEventData.#ctor(Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Initializes a new instance of .
            

    - Parameter view: The .
    - Parameter viewContext: The .
    */
    public init(view : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView>, viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewEventData_ctor_0__2__IView_ViewContext(&__thrown, view?.get_handle() ?? nil, viewContext?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewEventData.get_View
    public func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewEventData_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.BeforeViewEventData.get_ViewContext
    public func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_BeforeViewEventData_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            The .
            

    */
    public var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
    }
} // BeforeViewEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentAfterViewExecuteEventData
    /**
    
            An  that occurs after a view is executed.
            

    */
public final class ViewComponentAfterViewExecuteEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentAfterViewExecuteEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter viewComponentContext: The .
    - Parameter view: The .
    */
    public init(actionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, viewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, view : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_ctor_0__3__ActionDescriptor_ViewComponentContext_IView(&__thrown, actionDescriptor?.get_handle() ?? nil, viewComponentContext?.get_handle() ?? nil, view?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentAfterViewExecuteEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext get_ViewComponentContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentAfterViewExecuteEventData.get_ViewComponentContext
    public func get_ViewComponentContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_ViewComponentContext__get_ViewComponentContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentAfterViewExecuteEventData.get_View
    public func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentAfterViewExecuteEventData_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            The .
            

    */
    public var ViewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        get {
            return try! get_ViewComponentContext();
        }
    }
} // ViewComponentAfterViewExecuteEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentBeforeViewExecuteEventData
    /**
    
            An  that occurs before a view is executed.
            

    */
public final class ViewComponentBeforeViewExecuteEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentBeforeViewExecuteEventData.#ctor(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionDescriptor: The .
    - Parameter viewComponentContext: The .
    - Parameter view: The .
    */
    public init(actionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor>, viewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, view : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_ctor_0__3__ActionDescriptor_ViewComponentContext_IView(&__thrown, actionDescriptor?.get_handle() ?? nil, viewComponentContext?.get_handle() ?? nil, view?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor get_ActionDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentBeforeViewExecuteEventData.get_ActionDescriptor
    public func get_ActionDescriptor() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_ActionDescriptor__get_ActionDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext get_ViewComponentContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentBeforeViewExecuteEventData.get_ViewComponentContext
    public func get_ViewComponentContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_ViewComponentContext__get_ViewComponentContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewComponentBeforeViewExecuteEventData.get_View
    public func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewComponentBeforeViewExecuteEventData_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor> {
        get {
            return try! get_ActionDescriptor();
        }
    }
    /**
    
            The .
            

    */
    public var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            The .
            

    */
    public var ViewComponentContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext> {
        get {
            return try! get_ViewComponentContext();
        }
    }
} // ViewComponentBeforeViewExecuteEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData
    /**
    
            An  that when a view is found.
            

    */
public final class ViewFoundEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, bool, Microsoft.AspNetCore.Mvc.ActionResult, System.String, Microsoft.AspNetCore.Mvc.ViewEngines.IView)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Boolean,Microsoft.AspNetCore.Mvc.ActionResult,System.String,Microsoft.AspNetCore.Mvc.ViewEngines.IView)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter isMainPage: Whether this is a main page.
    - Parameter result: The .
    - Parameter viewName: The name of the view.
    - Parameter view: The .
    */
    public init(actionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext>, isMainPage : Bool, result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult>, viewName : Optional<dotnet.System.String>, view : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_ctor_0__5__ActionContext_bool_ActionResult_String_IView(&__thrown, actionContext?.get_handle() ?? nil, Swift.Int32(isMainPage ? 1 : 0), result?.get_handle() ?? nil, viewName?.get_handle() ?? nil, view?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.get_ActionContext
    public func get_ActionContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsMainPage()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.get_IsMainPage
    public func get_IsMainPage() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_bool__get_IsMainPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.get_Result
    public func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_ActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.get_ViewName
    public func get_ViewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewFoundEventData.get_View
    public func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewFoundEventData_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
             if a main page.
            

    */
    public var IsMainPage : Bool {
        get {
            return try! get_IsMainPage();
        }
    }
    /**
    
            The .
            

    */
    public var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        get {
            return try! get_Result();
        }
    }
    /**
    
            The .
            

    */
    public var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            The name of the view.
            

    */
    public var ViewName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewName();
        }
    }
} // ViewFoundEventData


// type: Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData
    /**
    
            An  that when a view is not found.
            

    */
public final class ViewNotFoundEventData
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Diagnostics.EventData
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String EventName
    /**
    
            The name of the event.
            

    */
    public class var EventName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_get_EventName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, bool, Microsoft.AspNetCore.Mvc.ActionResult, System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.Boolean,Microsoft.AspNetCore.Mvc.ActionResult,System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter isMainPage: Whether this is a main page.
    - Parameter result: The .
    - Parameter viewName: The name of the view.
    - Parameter searchedLocations: The locations searched for the view.
    */
    public init(actionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext>, isMainPage : Bool, result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult>, viewName : Optional<dotnet.System.String>, searchedLocations : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_ctor_0__5__ActionContext_bool_ActionResult_String_System_Collections_Generic_IEnumerable_string_(&__thrown, actionContext?.get_handle() ?? nil, Swift.Int32(isMainPage ? 1 : 0), result?.get_handle() ?? nil, viewName?.get_handle() ?? nil, (searchedLocations?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionContext get_ActionContext()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.get_ActionContext
    public func get_ActionContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_ActionContext__get_ActionContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsMainPage()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.get_IsMainPage
    public func get_IsMainPage() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_bool__get_IsMainPage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ActionResult get_Result()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.get_Result
    public func get_Result() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_ActionResult__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.get_ViewName
    public func get_ViewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_SearchedLocations()
// docid: M:Microsoft.AspNetCore.Mvc.Diagnostics.ViewNotFoundEventData.get_SearchedLocations
    public func get_SearchedLocations() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Diagnostics_ViewNotFoundEventData_System_Collections_Generic_IEnumerable_string___get_SearchedLocations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The .
            

    */
    public var ActionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext> {
        get {
            return try! get_ActionContext();
        }
    }
    /**
    
             if a main page.
            

    */
    public var IsMainPage : Bool {
        get {
            return try! get_IsMainPage();
        }
    }
    /**
    
            The .
            

    */
    public var Result : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ActionResult> {
        get {
            return try! get_Result();
        }
    }
    /**
    
            The locations that were searched.
            

    */
    public var SearchedLocations : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_SearchedLocations();
        }
    }
    /**
    
            The name of the view.
            

    */
    public var ViewName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewName();
        }
    }
} // ViewNotFoundEventData


}

// Microsoft.AspNetCore.Mvc.ModelBinding
extension Microsoft.AspNetCore.Mvc.ModelBinding {
// type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions
public struct ModelStateDictionaryExtensions {
    // void AddModelError<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter modelState: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Parameter errorMessage: The error message to add.
    */
    public static func AddModelError<UTModel : SGBridgeGenericValue>(modelState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, errorMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionaryExtensions_void__AddModelError_1__3__ModelStateDictionary_System_Linq_Expressions_Expression_System_System_Func_UTModel_object___String(UTModel.get_type_handle(), &__thrown, modelState?.get_handle() ?? nil, (expression?.get_handle()), errorMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TryAddModelException<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.Exception)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.TryAddModelException``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Exception)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter modelState: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Parameter exception: The  to add.
    */
    public static func TryAddModelException<UTModel : SGBridgeGenericValue>(modelState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, exception : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionaryExtensions_void__TryAddModelException_1__3__ModelStateDictionary_System_Linq_Expressions_Expression_System_System_Func_UTModel_object___Exception(UTModel.get_type_handle(), &__thrown, modelState?.get_handle() ?? nil, (expression?.get_handle()), exception?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddModelError<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.Exception, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Exception,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
    /**
    
            Adds the specified  to the  instance
            that is associated with the specified . If the maximum number of allowed
            errors has already been recorded, ensures that a  exception is
            recorded instead.
            

    - Parameter modelState: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Parameter exception: The  to add.
    - Parameter metadata: The  associated with the model.
    */
    public static func AddModelError<UTModel : SGBridgeGenericValue>(modelState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, exception : Optional<dotnet.System.Exception>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionaryExtensions_void__AddModelError_1__4__ModelStateDictionary_System_Linq_Expressions_Expression_System_System_Func_UTModel_object___Exception_ModelMetadata(UTModel.get_type_handle(), &__thrown, modelState?.get_handle() ?? nil, (expression?.get_handle()), exception?.get_handle() ?? nil, metadata?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.Remove``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    /**
    
            Removes the specified  from the .
            

    - Parameter modelState: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Returns: 
            true if the element is successfully removed; otherwise, false.
            This method also returns false if  was not found in the model-state dictionary.
            

    */
    public static func Remove<UTModel : SGBridgeGenericValue>(modelState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionaryExtensions_bool__Remove_1__2__ModelStateDictionary_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__(UTModel.get_type_handle(), &__thrown, modelState?.get_handle() ?? nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAll<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>)
// docid: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.RemoveAll``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    /**
    
            Removes all the entries for the specified  from the
            .
            

    - Parameter modelState: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against an item in the current model.
    */
    public static func RemoveAll<UTModel : SGBridgeGenericValue>(modelState : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ModelBinding_ModelStateDictionaryExtensions_void__RemoveAll_1__2__ModelStateDictionary_System_Linq_Expressions_Expression_System_System_Func_UTModel_object__(UTModel.get_type_handle(), &__thrown, modelState?.get_handle() ?? nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ModelStateDictionaryExtensions


}

// Microsoft.AspNetCore.Mvc.Rendering
extension Microsoft.AspNetCore.Mvc.Rendering {
// type: Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode
    /**
    
            Controls the rendering of hidden input fields when using CheckBox tag helpers or html helpers.
            

    */
public struct CheckBoxHiddenInputRenderMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_CheckBoxHiddenInputRenderMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode None
    /**
    
            Hidden input fields will not be automatically rendered. If checkbox is not checked, no value will be posted.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_CheckBoxHiddenInputRenderMode_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode Inline
    /**
    
            Hidden input fields will be rendered inline with each checkbox. Use this for legacy ASP.NET MVC behavior.
            

    */
    public static var Inline : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_CheckBoxHiddenInputRenderMode_get_Inline());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode EndOfForm
    /**
    
            Hidden input fields will be rendered for each checkbox at the bottom of the form element. This is the preferred render method and default MVC behavior.
            If  is false, will fall back on .
            

    */
    public static var EndOfForm : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_CheckBoxHiddenInputRenderMode_get_EndOfForm());
            return __return;
        }
    }
} // CheckBoxHiddenInputRenderMode


// type: Microsoft.AspNetCore.Mvc.Rendering.FormMethod
    /**
    
            Specifies constants which define the form method used.
            

    */
public struct FormMethod : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_FormMethod_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.FormMethod Get
    /**
    
            Get form method.
            

    */
    public static var Get : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod(val: Microsoft_AspNetCore_Mvc_Rendering_FormMethod_get_Get());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.FormMethod Post
    /**
    
            Post form method.
            

    */
    public static var Post : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod(val: Microsoft_AspNetCore_Mvc_Rendering_FormMethod_get_Post());
            return __return;
        }
    }
} // FormMethod


// type: Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode
    /**
    
            Controls the value-rendering method For HTML5 input elements of types such as date, time, datetime and
            datetime-local.
            

    */
public struct Html5DateRenderingMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_Html5DateRenderingMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode Rfc3339
    /**
    
            Render date and time values as Rfc3339 compliant strings to support HTML5 date and time types of input
            elements.
            

    */
    public static var Rfc3339 : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: Microsoft_AspNetCore_Mvc_Rendering_Html5DateRenderingMode_get_Rfc3339());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode CurrentCulture
    /**
    
            Render date and time values according to the current culture's ToString behavior.
            

    */
    public static var CurrentCulture : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: Microsoft_AspNetCore_Mvc_Rendering_Html5DateRenderingMode_get_CurrentCulture());
            return __return;
        }
    }
} // Html5DateRenderingMode


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperComponentExtensions
public struct HtmlHelperComponentExtensions {
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode, System.Object)
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Type, Microsoft.AspNetCore.Mvc.Rendering.RenderMode, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperComponentExtensions.RenderComponentAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Type,Microsoft.AspNetCore.Mvc.Rendering.RenderMode,System.Object)
    /**
    
            Renders the specified .
            

    - Parameter htmlHelper: The .
    - Parameter componentType: The component type.
    - Parameter parameters: An  containing the parameters to pass
            to the component.
    - Parameter renderMode: The  for the component.
    */
    public static func RenderComponentAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, componentType : Optional<dotnet.System.Type_>, renderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode, parameters : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperComponentExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___RenderComponentAsync_0__4__IHtmlHelper_Type_RenderMode_Object(&__thrown, htmlHelper?.get_handle() ?? nil, componentType?.get_handle() ?? nil, renderMode.get_value(), parameters?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperComponentExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions
public struct HtmlHelperDisplayExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the , using a display template. The template is found
            using the 's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Returns: A new  containing the created HTML.

    */
    public static func Display(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__Display_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using a display template and specified
            additional view data. The template is found using the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func Display(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__Display_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns HTML markup for the , using a display template. The template is found
            using the  or the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Returns: A new  containing the created HTML.

    */
    public static func Display(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__Display_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using a display template and specified
            additional view data. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func Display(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__Display_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)
    /**
    
            Returns HTML markup for the , using a display template and specified HTML
            field name. The template is found using the  or the
            's.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Returns: A new  containing the created HTML.

    */
    public static func Display(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__Display_0__4__IHtmlHelper_String_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns HTML markup for the , using a display template. The template is found
            using the 's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns HTML markup for the , using a display template and specified
            additional view data. The template is found using the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)
    /**
    
            Returns HTML markup for the , using a display template. The template is found
            using the  or the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)
    /**
    
            Returns HTML markup for the , using a display template and specified
            additional view data. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)
    /**
    
            Returns HTML markup for the , using a display template and specified HTML
            field name. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns HTML markup for the current model, using a display template. The template is found using the
            model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)
    /**
    
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__2__IHtmlHelper_Object(&__thrown, htmlHelper?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the current model, using a display template. The template is found using the
             or the model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns HTML markup for the current model, using a display template and specified HTML field name. The
            template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the current model, using a display template, specified HTML field name, and
            additional view data. The template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the created HTML.

    */
    public static func DisplayForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayExtensions_IHtmlContent__DisplayForModel_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperDisplayExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions
public struct HtmlHelperDisplayNameExtensions {
    // System.String DisplayNameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns the display name for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A  containing the display name.

    */
    public static func DisplayNameForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayNameExtensions_String__DisplayNameForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayNameFor<TModelItem, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<System.Collections.Generic.IEnumerable<TModelItem>>, System.Linq.Expressions.Expression<System.Func<TModelItem,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns the display name for the specified 
            if the current model represents a collection.
            

    - Parameter htmlHelper: 
            The  of  instance this method extends.
            
    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Returns: A  containing the display name.

    */
    public static func DisplayNameFor<UTModelItem : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<dotnet.System.Collections.Generic.IEnumerable_1<UTModelItem>>>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModelItem,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperDisplayNameExtensions_String__DisplayNameFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTModelItem___System_Linq_Expressions_Expression_System_System_Func_UTModelItem_UTResult__(UTModelItem.get_type_handle(), UTResult.get_type_handle(), &__thrown, (htmlHelper?.get_handle()), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperDisplayNameExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions
public struct HtmlHelperEditorExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the , using an editor template. The template is found
            using the 's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func Editor(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__Editor_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using an editor template and specified
            additional view data. The template is found using the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func Editor(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__Editor_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns HTML markup for the , using an editor template. The template is found
            using the  or the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Returns: A new  containing the <input> element(s).

    */
    public static func Editor(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__Editor_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using an editor template and specified
            additional view data. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func Editor(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__Editor_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)
    /**
    
            Returns HTML markup for the , using an editor template and specified HTML
            field name. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func Editor(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__Editor_0__4__IHtmlHelper_String_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns HTML markup for the , using an editor template. The template is found
            using the 's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns HTML markup for the , using an editor template and specified
            additional view data. The template is found using the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)
    /**
    
            Returns HTML markup for the , using an editor template. The template is found
            using the  or the 's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template that is used to create the HTML markup.
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)
    /**
    
            Returns HTML markup for the , using an editor template and specified
            additional view data. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template that is used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)
    /**
    
            Returns HTML markup for the , using an editor template and specified HTML
            field name. The template is found using the  or the
            's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template that is used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns HTML markup for the current model, using an editor template. The template is found using the
            model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)
    /**
    
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__2__IHtmlHelper_Object(&__thrown, htmlHelper?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the current model, using an editor template. The template is found using the
             or the model's .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns HTML markup for the current model, using an editor template and specified HTML field name. The
            template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the current model, using an editor template, specified HTML field name, and
            additional view data. The template is found using the  or the model's
            .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or 
            that can contain additional view data that will be merged into the
             instance created for the template.
            
    - Returns: A new  containing the <input> element(s).

    */
    public static func EditorForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperEditorExtensions_IHtmlContent__EditorForModel_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperEditorExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions
public struct HtmlHelperFormExtensions {
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Renders a <form> start tag to the response. The <form>'s action attribute value will
            match the current request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Nullable{System.Boolean})
    /**
    
            Renders a <form> start tag to the response. The <form>'s action attribute value will
            match the current request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__2__IHtmlHelper_System_Nullable_bool_(&__thrown, htmlHelper?.get_handle() ?? nil, (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the
            current action will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__2__IHtmlHelper_FormMethod(&__thrown, htmlHelper?.get_handle() ?? nil, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the
            current action will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__3__IHtmlHelper_FormMethod_Object(&__thrown, htmlHelper?.get_handle() ?? nil, method.get_value(), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the
            current action will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token only if
             is not .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__4__IHtmlHelper_FormMethod_System_Nullable_bool__Object(&__thrown, htmlHelper?.get_handle() ?? nil, method.get_value(), (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the
            current action will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__2__IHtmlHelper_Object(&__thrown, htmlHelper?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__4__IHtmlHelper_String_String_FormMethod(&__thrown, htmlHelper?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__5__IHtmlHelper_String_String_Object_FormMethod(&__thrown, htmlHelper?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginForm_0__5__IHtmlHelper_String_String_FormMethod_Object(&__thrown, htmlHelper?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, method.get_value(), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)
    /**
    
            Renders a <form> start tag to the response. The first route that can provide a URL with the
            specified  generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__2__IHtmlHelper_Object(&__thrown, htmlHelper?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object, System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object,System.Nullable{System.Boolean})
    /**
    
            Renders a <form> start tag to the response. The first route that can provide a URL with the
            specified  generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeValues : Optional<dotnet.System.Object>, antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__3__IHtmlHelper_Object_System_Nullable_bool_(&__thrown, htmlHelper?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Nullable<bool>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Nullable{System.Boolean})
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>, antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__3__IHtmlHelper_String_System_Nullable_bool_(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil, (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__3__IHtmlHelper_String_FormMethod(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__4__IHtmlHelper_String_Object_FormMethod(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter routeName: The name of the route.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    public static func BeginRouteForm(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, routeName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperFormExtensions_MvcForm__BeginRouteForm_0__4__IHtmlHelper_String_FormMethod_Object(&__thrown, htmlHelper?.get_handle() ?? nil, routeName?.get_handle() ?? nil, method.get_value(), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperFormExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions
public struct HtmlHelperInputExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <input> elements.

    */
    public static func CheckBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__CheckBox_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Boolean)
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter isChecked: If true, checkbox is initially checked.
    - Returns: A new  containing the <input> elements.

    */
    public static func CheckBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, isChecked : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__CheckBox_0__3__IHtmlHelper_String_bool(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, Swift.Int32(isChecked ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  dictionary entry with key "checked",
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the checkbox element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <input> elements.

    */
    public static func CheckBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__CheckBox_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor<TModel>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,bool>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBoxFor``1(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <input> elements.

    */
    public static func CheckBoxFor<UTModel : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,Bool>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__CheckBoxFor_1__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_bool__(UTModel.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns an <input> element of type "hidden" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func Hidden(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__Hidden_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an <input> element of type "hidden" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Returns: A new  containing the <input> element.

    */
    public static func Hidden(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__Hidden_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent HiddenFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.HiddenFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns an <input> element of type "hidden" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func HiddenFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__HiddenFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns an <input> element of type "password" for the specified . Does
            not add a "value" attribute.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func Password(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__Password_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an <input> element of type "password" for the specified . Adds a
            "value" attribute containing the  parameter if that is non-null.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Returns: A new  containing the <input> element.

    */
    public static func Password(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__Password_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent PasswordFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.PasswordFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns an <input> element of type "password" for the specified . Does
            not add a "value" attribute.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func PasswordFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__PasswordFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the  parameter if that is
            non-null.
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: Value to include in the element. Must not be null.
    - Returns: A new  containing the <input> element.

    */
    public static func RadioButton(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__RadioButton_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the first non-null value found in:
            the  parameter, or
            the  dictionary entry with key "value".
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  dictionary entry with key "checked",
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: 
            If non-null, value to include in the element. Must not be null if no "checked" entry exists
            in .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <input> element.

    */
    public static func RadioButton(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__RadioButton_0__4__IHtmlHelper_String_Object_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Boolean)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the  parameter if that is
            non-null.
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: 
            If non-null, value to include in the element. Must not be null if
             is also null.
            
    - Parameter isChecked: 
            If true, radio button is initially selected. Must not be null if
             is also null.
            
    - Returns: A new  containing the <input> element.

    */
    public static func RadioButton(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__RadioButton_0__4__IHtmlHelper_String_Object_bool(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, Swift.Int32(isChecked ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButtonFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the  parameter.
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter value: Value to include in the element. Must not be null.
    - Returns: A new  containing the <input> element.

    */
    public static func RadioButtonFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__RadioButtonFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func TextBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBox_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Returns: A new  containing the <input> element.

    */
    public static func TextBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBox_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the "value"
            attribute unless that came from model binding.
            
    - Returns: A new  containing the <input> element.

    */
    public static func TextBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBox_0__4__IHtmlHelper_String_Object_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <input> element.

    */
    public static func TextBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBox_0__4__IHtmlHelper_String_Object_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <input> element.

    */
    public static func TextBoxFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBoxFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the
             value when using that in the "value" attribute.
            
    - Returns: A new  containing the <input> element.

    */
    public static func TextBoxFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, format : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBoxFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <input> element.

    */
    public static func TextBoxFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextBoxFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextArea(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextArea_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextArea(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextArea_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextArea(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextArea_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextArea(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextArea_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextAreaFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextAreaFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <textarea> element.

    */
    public static func TextAreaFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperInputExtensions_IHtmlContent__TextAreaFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperInputExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions
public struct HtmlHelperLabelExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <label> element.

    */
    public static func Label(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__Label_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter labelText: The inner text of the element.
    - Returns: A new  containing the <label> element.

    */
    public static func Label(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__Label_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, labelText?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  containing the <label> element.

    */
    public static func LabelFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter labelText: The inner text of the element.
    - Returns: A new  containing the <label> element.

    */
    public static func LabelFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), labelText?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <label> element.

    */
    public static func LabelFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns a <label> element for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A new  containing the <label> element.

    */
    public static func LabelForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns a <label> element for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter labelText: The inner text of the element.
    - Returns: A new  containing the <label> element.

    */
    public static func LabelForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelForModel_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, labelText?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)
    /**
    
            Returns a <label> element for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <label> element.

    */
    public static func LabelForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelForModel_0__2__IHtmlHelper_Object(&__thrown, htmlHelper?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns a <label> element for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter labelText: The inner text of the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the <label> element.

    */
    public static func LabelForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLabelExtensions_IHtmlContent__LabelForModel_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperLabelExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions
public struct HtmlHelperLinkExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__3__IHtmlHelper_String_String(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__4__IHtmlHelper_String_String_Object(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__5__IHtmlHelper_String_String_Object_Object(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__4__IHtmlHelper_String_String_String(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__5__IHtmlHelper_String_String_String_Object(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter helper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the anchor element.

    */
    public static func ActionLink(helper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__ActionLink_0__6__IHtmlHelper_String_String_String_Object_Object(&__thrown, helper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: A new  containing the anchor element.

    */
    public static func RouteLink(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__RouteLink_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeName: The name of the route.
    - Returns: A new  containing the anchor element.

    */
    public static func RouteLink(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__RouteLink_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Returns: A new  containing the anchor element.

    */
    public static func RouteLink(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__RouteLink_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the anchor element.

    */
    public static func RouteLink(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__RouteLink_0__4__IHtmlHelper_String_Object_Object(&__thrown, htmlHelper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route
            parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: A new  containing the anchor element.

    */
    public static func RouteLink(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperLinkExtensions_IHtmlContent__RouteLink_0__5__IHtmlHelper_String_String_Object_Object(&__thrown, htmlHelper?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperLinkExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions
public struct HtmlHelperNameExtensions {
    // System.String NameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.NameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns the full HTML element name for the current model. Uses
             (if non-empty) to reflect relationship between
            current  and the top-level view's model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A  containing the element name.

    */
    public static func NameForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperNameExtensions_String__NameForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String IdForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.IdForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns the HTML element Id for the current model.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A  containing the element Id.

    */
    public static func IdForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperNameExtensions_String__IdForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperNameExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions
public struct HtmlHelperPartialExtensions {
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Returns: 
            A  that on completion returns a new  instance containing
            the created HTML.
            

    */
    public static func PartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___PartialAsync_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter viewData: A  to pass into the partial view.
    - Returns: 
            A  that on completion returns a new  instance containing
            the created HTML.
            

    */
    public static func PartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___PartialAsync_0__3__IHtmlHelper_String_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Returns: 
            A  that on completion returns a new  instance containing
            the created HTML.
            

    */
    public static func PartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___PartialAsync_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Returns: 
            Returns a new  instance containing the created HTML.
            

    */
    public static func Partial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_IHtmlContent__Partial_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter viewData: A  to pass into the partial view.
    - Returns: 
            Returns a new  instance containing the created HTML.
            

    */
    public static func Partial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_IHtmlContent__Partial_0__3__IHtmlHelper_String_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Returns: 
            Returns a new  instance containing the created HTML.
            

    */
    public static func Partial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_IHtmlContent__Partial_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Parameter viewData: A  to pass into the partial view.
    - Returns: 
            Returns a new  instance containing the created HTML.
            

    */
    public static func Partial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_IHtmlContent__Partial_0__4__IHtmlHelper_String_Object_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    */
    public static func RenderPartial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_void__RenderPartial_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter viewData: A  to pass into the partial view.
    */
    public static func RenderPartial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_void__RenderPartial_0__3__IHtmlHelper_String_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    */
    public static func RenderPartial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_void__RenderPartial_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Parameter viewData: A  to pass into the partial view.
    */
    public static func RenderPartial(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_void__RenderPartial_0__4__IHtmlHelper_String_Object_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Returns: A  that renders the created HTML when it executes.

    */
    public static func RenderPartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_Task__RenderPartialAsync_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter viewData: A  to pass into the partial view.
    - Returns: A  that renders the created HTML when it executes.

    */
    public static func RenderPartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_Task__RenderPartialAsync_0__3__IHtmlHelper_String_ViewDataDictionary(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Returns: A  that renders the created HTML when it executes.

    */
    public static func RenderPartialAsync(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperPartialExtensions_Task__RenderPartialAsync_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperPartialExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions
public struct HtmlHelperSelectExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on the  entry with full name. Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownList(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownList_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on  and the 
            entry with full name. Adds a "selected" attribute to an <option> if its
             (if non-null) or  matches the
            first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter optionLabel: 
            The text for a default empty item. Does not include such an item if argument is null.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownList(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownList_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, optionLabel?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name,
            the  entry with full name (unless used instead of
            ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownList(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownList_0__3__IHtmlHelper_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name,
            the  entry with full name (unless used instead of
            ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownList(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownList_0__4__IHtmlHelper_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on  and . Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name,
            the  entry with full name (unless used instead of
            ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Parameter optionLabel: 
            The text for a default empty item. Does not include such an item if argument is null.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownList(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownList_0__4__IHtmlHelper_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), optionLabel?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownListFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownListFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownListFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownListFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on  and . Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Parameter optionLabel: 
            The text for a default empty item. Does not include such an item if argument is null.
            
    - Returns: A new  containing the <select> element.

    */
    public static func DropDownListFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__DropDownListFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), (selectList?.get_handle()), optionLabel?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns a multi-selection <select> element for the . Adds
            <option> elements based on the  entry with full name. Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A new  containing the <select> element.

    */
    public static func ListBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__ListBox_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    
            Returns a multi-selection <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name,
            the  entry with full name (unless used instead of
            ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Returns: A new  containing the <select> element.

    */
    public static func ListBox(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__ListBox_0__3__IHtmlHelper_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    
            Returns a multi-selection <select> element for the  . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the 
            entry with full name and that entry must be a collection of  objects.
            
    - Returns: A new  containing the <select> element.

    */
    public static func ListBoxFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperSelectExtensions_IHtmlContent__ListBoxFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperSelectExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions
public struct HtmlHelperValidationExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessage(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessage_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessage(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessage_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the
            () element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessage(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessage_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            A new  containing a  element. An empty
             if the  is valid and client-side validation is
            disabled.
            

    */
    public static func ValidationMessage(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessage_0__4__IHtmlHelper_String_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, message?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the
            () element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessage(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessage_0__4__IHtmlHelper_String_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil, message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessageFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessageFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessageFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessageFor_2__3__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the
            () element. Alternatively, an
             instance containing the HTML
            attributes.
            
    - Returns: 
            A new  containing a  element.
            An empty  if the  is valid and client-side
            validation is disabled.
            

    */
    public static func ValidationMessageFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessageFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_Object(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            A new  containing the  element. An empty
             if the  is valid and client-side validation is
            disabled.
            

    */
    public static func ValidationMessageFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationMessageFor_2__4__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult___String_String(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()), message?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: 
            New  containing a <div> element wrapping the <ul> element.
            An empty  if the current model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter excludePropertyErrors: 
            If true, display model-level errors only; otherwise display all errors.
            
    - Returns: 
            New  containing a <div> element wrapping the <ul> element.
            An empty  if the current model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, excludePropertyErrors : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__2__IHtmlHelper_bool(&__thrown, htmlHelper?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter message: The message to display with the validation summary.
    - Returns: 
            New  containing a <div> element wrapping the
             element (which wraps the
            ) and the <ul> element. An empty  if the current
            model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter message: The message to display with the validation summary.
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            New  containing a <div> element wrapping the  element
            and the <ul> element. An empty  if the current model is valid and
            client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__3__IHtmlHelper_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, message?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter excludePropertyErrors: 
            If true, display model-level errors only; otherwise display all errors.
            
    - Parameter message: The message to display with the validation summary.
    - Returns: 
            New  containing a <div> element wrapping the
             element (which, in turn, wraps the
            ) and the <ul> element. An empty  if the current
            model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, excludePropertyErrors : Bool, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__3__IHtmlHelper_bool_String(&__thrown, htmlHelper?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter message: The message to display with the validation summary.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the topmost (<div>) element.
            Alternatively, an  instance containing
            the HTML attributes.
            
    - Returns: 
            New  containing a <div> element wrapping the
             element (which wraps the
            ) and the <ul> element. An empty  if the current
            model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__3__IHtmlHelper_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter message: The message to display with the validation summary.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the topmost (<div>) element.
            Alternatively, an  instance containing
            the HTML attributes.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            New  containing a <div> element wrapping the  element
            and the <ul> element. An empty  if the current model is valid and
            client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__4__IHtmlHelper_String_Object_String(&__thrown, htmlHelper?.get_handle() ?? nil, message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter excludePropertyErrors: 
            If true, display model-level errors only; otherwise display all errors.
            
    - Parameter message: The message to display with the validation summary.
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            New  containing a <div> element wrapping the  element
            and the <ul> element. An empty  if the current model is valid and
            client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__4__IHtmlHelper_bool_String_String(&__thrown, htmlHelper?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.Object)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter excludePropertyErrors: 
            If true, display model-level errors only; otherwise display all errors.
            
    - Parameter message: The message to display with the validation summary.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the topmost (<div>) element.
            Alternatively, an  instance containing
            the HTML attributes.
            
    - Returns: 
            New  containing a <div> element wrapping the
             element (which wraps the
            ) and the <ul> element. An empty  if the current
            model is valid and client-side validation is disabled.
            

    */
    public static func ValidationSummary(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValidationExtensions_IHtmlContent__ValidationSummary_0__4__IHtmlHelper_bool_String_Object(&__thrown, htmlHelper?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperValidationExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions
public struct HtmlHelperValueExtensions {
    // System.String Value(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.Value(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns the formatted value for the specified . Specifically, returns the
            first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: Expression name, relative to the current model.
    - Returns: A  containing the formatted value.

    */
    public static func Value(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValueExtensions_String__Value_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ValueFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns the formatted value for the specified . Specifically, returns the
            first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A  containing the formatted value.

    */
    public static func ValueFor<UTModel : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(htmlHelper : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValueExtensions_String__ValueFor_2__2__Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTResult__(UTModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
    /**
    
            Returns the formatted value for the current model. Specifically, returns the
            first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Returns: A  containing the formatted value.

    */
    public static func ValueForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValueExtensions_String__ValueForModel_0__1__IHtmlHelper(&__thrown, htmlHelper?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)
    /**
    
            Returns the formatted value for the current model. Specifically, returns the
            first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the .
            See  for more information about a "full name".
            

    - Parameter htmlHelper: The  instance this method extends.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the return
            value unless that came from model binding.
            
    - Returns: A  containing the formatted value.

    */
    public static func ValueForModel(htmlHelper : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_HtmlHelperValueExtensions_String__ValueForModel_0__2__IHtmlHelper_String(&__thrown, htmlHelper?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HtmlHelperValueExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper
    /**
    
            Base HTML helpers.
            

    */
open class IHtmlHelper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.ActionLink(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified action.
            

    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter actionName: The name of the action.
    - Parameter controllerName: The name of the controller.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter hostname: The host name for the URL.
    - Parameter fragment: The URL fragment name (the anchor name).
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the anchor element.

    */
    open func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__ActionLink_0__8__String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent AntiForgeryToken()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.AntiForgeryToken
    /**
    
            Returns a <hidden> element (antiforgery token) that will be validated when the containing
            <form> is submitted.
            

    - Returns:  containing the <hidden> element.

    */
    open func AntiForgeryToken() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__AntiForgeryToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.BeginForm(System.String,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)
    /**
    
            Renders a <form> start tag to the response. When the user submits the form, the action with name
             will process the request.
            

    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token only if
             is not .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    open func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_MvcForm__BeginForm_0__6__String_String_Object_FormMethod_System_Nullable_bool__Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value(), (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.BeginRouteForm(System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)
    /**
    
            Renders a <form> start tag to the response. The route with name 
            generates the <form>'s action attribute value.
            

    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter antiforgery: 
            If true, <form> elements will include an antiforgery token.
            If false, suppresses the generation an <input> of type "hidden" with an antiforgery token.
            If null, <form> elements will include an antiforgery token only if
             is not .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            An  instance which renders the </form> end tag when disposed.
            

    */
    open func BeginRouteForm(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_MvcForm__BeginRouteForm_0__5__String_Object_FormMethod_System_Nullable_bool__Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value(), (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBox(System.String, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.CheckBox(System.String,System.Nullable{System.Boolean},System.Object)
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  dictionary entry with key "checked",
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            If  is non-null, instead uses the first non-null value found in:
            the  entry with full name, or
            the  parameter.
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter isChecked: If true, checkbox is initially checked.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the checkbox element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> elements.

    */
    open func CheckBox(expression : Optional<dotnet.System.String>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__CheckBox_0__3__String_System_Nullable_bool__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Display(System.String,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using a display template, specified HTML field
            name, and additional view data. The template is found using the  or the
            's .
            

    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to display.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or  that can contain additional
            view data that will be merged into the  instance created for the
            template.
            
    - Returns: A new  containing the created HTML.

    */
    open func Display(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Display_0__4__String_String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.DisplayName(System.String)
    /**
    
            Returns the display name for the specified .
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: A  containing the display name.

    */
    open func DisplayName(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__DisplayName_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayText(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.DisplayText(System.String)
    /**
    
            Returns the simple display text for the specified .
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: 
            A  containing the simple display text.
            If the expression result is null, returns .
            

    */
    open func DisplayText(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__DisplayText_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.DropDownList(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String,System.Object)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on  and . Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name,
            the  entry with full name (unless used instead of ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the  entry with
            full name and that entry must be a collection of  objects.
            
    - Parameter optionLabel: 
            The text for a default empty item. Does not include such an item if argument is null.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    open func DropDownList(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__DropDownList_0__4__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (selectList?.get_handle()), optionLabel?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Editor(System.String,System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using an editor template, specified HTML field
            name, and additional view data. The template is found using the  or the
            's .
            

    - Parameter expression: 
            Expression name, relative to the current model. May identify a single property or an
             that contains the properties to edit.
            
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or  that can contain additional
            view data that will be merged into the  instance created for the
            template.
            
    - Returns: A new  containing the <input> element(s).

    */
    open func Editor(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Editor_0__4__String_String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.Object)
    /**
    
            Converts the  to an HTML-encoded .
            

    - Parameter value: The  to encode.
    - Returns: The HTML-encoded .

    */
    open func Encode(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__Encode_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.String)
    /**
    
            Converts the specified  to an HTML-encoded .
            

    - Parameter value: The  to encode.
    - Returns: The HTML-encoded .

    */
    open func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__Encode_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndForm()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.EndForm
    /**
    
            Renders the </form> end tag to the response.
            

    */
    open func EndForm() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_void__EndForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String FormatValue(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.FormatValue(System.Object,System.String)
    /**
    
            Formats the value.
            

    - Parameter value: The value.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the return
            value.
            
    - Returns: A  containing the formatted value.

    */
    open func FormatValue(value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__FormatValue_0__2__Object_String(&__thrown, self.get_handle(), value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GenerateIdFromName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.GenerateIdFromName(System.String)
    /**
    
            Returns an HTML element Id for the specified expression .
            

    - Parameter fullName: 
            Fully-qualified expression name, ignoring the current model. Must not be null. See
             for more information about a "full name".
            
    - Returns: A  containing the element Id.

    */
    open func GenerateIdFromName(fullName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__GenerateIdFromName_0__1__String(&__thrown, self.get_handle(), fullName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEnumSelectList<TEnum>()
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEnumSelectList(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.GetEnumSelectList(System.Type)
    /**
    
            Returns a select list for the given .
            

    - Parameter enumType:  to generate a select list for.
    - Returns: 
            An  containing the select list for the given
            .
            

    */
    open func GetEnumSelectList(enumType : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem___GetEnumSelectList_0__1__Type(&__thrown, self.get_handle(), enumType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Hidden(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Hidden(System.String,System.Object,System.Object)
    /**
    
            Returns an <input> element of type "hidden" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func Hidden(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Hidden_0__3__String_Object_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Id(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Id(System.String)
    /**
    
            Returns the HTML element Id for the specified .
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: A  containing the element Id.

    */
    open func Id(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__Id_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Label(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Label(System.String,System.String,System.Object)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter labelText: The inner text of the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <label> element.

    */
    open func Label(expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Label_0__3__String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBox(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.ListBox(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    
            Returns a multi-selection <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches an entry in the first non-null collection found in:
            the  entry with full name,
            the  entry with full name (unless used instead of ), or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, finds the 
            collection with name  in .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    open func ListBox(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__ListBox_0__3__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Name(System.String)
    /**
    
            Returns the full HTML element name for the specified . Uses
             (if non-empty) to reflect relationship between current
             and the top-level view's model.
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: A  containing the element name.

    */
    open func Name(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__Name_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Returns HTML markup for the specified partial view.
            

    - Parameter partialViewName: 
            The name of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Parameter viewData: A  to pass into the partial view.
    - Returns: 
            A  that on completion returns a new  instance containing
            the created HTML.
            

    */
    open func PartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___PartialAsync_0__3__String_Object_ViewDataDictionary(&__thrown, self.get_handle(), partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Password(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Password(System.String,System.Object,System.Object)
    /**
    
            Returns an <input> element of type "password" for the specified . Adds a
            "value" attribute containing the first non-null value in:
            the  parameter, or
            the  dictionary entry with key "value".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func Password(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Password_0__3__String_Object_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButton(System.String, System.Object, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.RadioButton(System.String,System.Object,System.Nullable{System.Boolean},System.Object)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the first non-null value found in:
            the  parameter, or
            the  dictionary entry with key "value".
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  dictionary entry with key "checked",
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            If  is non-null, instead uses the first non-null value found in:
            the  entry with full name, or
            the  parameter.
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: 
            If non-null, value to include in the element. Must not be null if
             is also null and no "checked" entry exists in
            .
            
    - Parameter isChecked: 
            If true, radio button is initially selected. Must not be null if
             is also null and no "checked" entry exists in
            .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func RadioButton(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__RadioButton_0__4__String_Object_System_Nullable_bool__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.String)
    /**
    
            Wraps HTML markup in an , without HTML-encoding the specified
            .
            

    - Parameter value: HTML markup .
    - Returns: A new  containing the wrapped .

    */
    open func Raw(value : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Raw_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.Object)
    /**
    
            Wraps HTML markup from the string representation of an  in an
            , without HTML-encoding the string representation.
            

    - Parameter value: The  to wrap.
    - Returns:  containing the wrapped string representation.

    */
    open func Raw(value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__Raw_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RenderPartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.RenderPartialAsync(System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Renders HTML markup for the specified partial view.
            

    - Parameter partialViewName: 
            The name or path of the partial view used to create the HTML markup. Must not be null.
            
    - Parameter model: A model to pass into the partial view.
    - Parameter viewData: A  to pass into the partial view.
    - Returns: A  that renders the created HTML when it executes.

    */
    open func RenderPartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_Task__RenderPartialAsync_0__3__String_Object_ViewDataDictionary(&__thrown, self.get_handle(), partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.RouteLink(System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Returns an anchor (<a>) element that contains a URL path to the specified route.
            

    - Parameter linkText: The inner text of the anchor element. Must not be null.
    - Parameter routeName: The name of the route.
    - Parameter protocol: The protocol for the URL, such as "http" or "https".
    - Parameter hostName: The host name for the URL.
    - Parameter fragment: The URL fragment name (the anchor name).
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the anchor element.

    */
    open func RouteLink(linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__RouteLink_0__7__String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostName?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(System.String, System.String, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.TextArea(System.String,System.String,System.Int32,System.Int32,System.Object)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter rows: Number of rows in the textarea.
    - Parameter columns: Number of columns in the textarea.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <textarea> element.

    */
    open func TextArea(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__TextArea_0__5__String_String_i32_i32_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.TextBox(System.String,System.Object,System.String,System.Object)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  parameter,
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: If non-null, value to include in the element.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the "value"
            attribute unless that came from model binding.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func TextBox(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__TextBox_0__4__String_Object_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.ValidationMessage(System.String,System.String,System.Object,System.String)
    /**
    
            Returns the validation message if an error exists in the  object
            for the specified .
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side validation may
            update the associated CSS class.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the  element.
            Alternatively, an  instance containing the HTML attributes.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            A new  containing a  element. An empty
             if the  is valid and client-side validation is
            disabled.
            

    */
    open func ValidationMessage(expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__ValidationMessage_0__4__String_String_Object_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(bool, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.ValidationSummary(System.Boolean,System.String,System.Object,System.String)
    /**
    
            Returns an unordered list (<ul> element) of validation messages that are in the
             object.
            

    - Parameter excludePropertyErrors: 
            If true, display model-level errors only; otherwise display all errors.
            
    - Parameter message: The message to display with the validation summary.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the topmost (<div>) element.
            Alternatively, an  instance containing the HTML attributes.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            New  containing a <div> element wrapping the  element
            and the <ul> element. An empty  if the current model is valid and
            client-side validation is disabled.
            

    */
    open func ValidationSummary(excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IHtmlContent__ValidationSummary_0__4__bool_String_Object_String(&__thrown, self.get_handle(), Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Value(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Value(System.String,System.String)
    /**
    
            Returns the formatted value for the specified . Specifically, returns the
            first non-null value found in:
            the  entry with full name,
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the return
            value unless that came from model binding.
            
    - Returns: A  containing the formatted value.

    */
    open func Value(expression : Optional<dotnet.System.String>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__Value_0__2__String_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode get_Html5DateRenderingMode()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_Html5DateRenderingMode
    open func get_Html5DateRenderingMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_Html5DateRenderingMode__get_Html5DateRenderingMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
    open func set_Html5DateRenderingMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_void__set_Html5DateRenderingMode_0__1__Html5DateRenderingMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_IdAttributeDotReplacement()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_IdAttributeDotReplacement
    open func get_IdAttributeDotReplacement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_String__get_IdAttributeDotReplacement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_MetadataProvider
    open func get_MetadataProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_ViewBag
    open func get_ViewBag() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_ViewContext
    open func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_ViewData
    open func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_TempData
    open func get_TempData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.UrlEncoder get_UrlEncoder()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.get_UrlEncoder
    open func get_UrlEncoder() throws -> Optional<dotnet.System.Text.Encodings.Web.UrlEncoder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_UrlEncoder__get_UrlEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encodings.Web.UrlEncoder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHtmlHelper


// type: Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1
    /**
    
            An  for Linq expressions.
            

    */
open class IHtmlHelper_1<TModel : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1,
    Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper
{
    public typealias TModel_IHtmlHelper_1 = TModel;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_get_type_handle(TModel.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor(System.Linq.Expressions.Expression<System.Func<TModel,bool>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.CheckBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)
    /**
    
            Returns an <input> element of type "checkbox" with value "true" and an <input> element of type
            "hidden" with value "false" for the specified . Adds a "checked" attribute to
            the "checkbox" element based on the first non-null value found in:
            the  dictionary entry with key "checked", or
            the  entry with full name.
            If  evaluates to a non-null value, instead uses the first
            non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the checkbox element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> elements.

    */
    open func CheckBoxFor(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,Bool>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__CheckBoxFor_0__2__System_Linq_Expressions_Expression_System_System_Func_TModel_bool___Object(TModel.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using a display template, specified HTML field
            name, and additional view data. The template is found using the  or the
            's .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or  that can contain additional
            view data that will be merged into the  instance created for the
            template.
            
    - Returns: A new  containing the created HTML.

    */
    open func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__DisplayFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayNameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayNameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    
            Returns the display name for the specified .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A  containing the display name.

    */
    open func DisplayNameFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__DisplayNameFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayNameForInnerType<TModelItem, TResult>(System.Linq.Expressions.Expression<System.Func<TModelItem,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayNameForInnerType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns the display name for the specified 
            if the current model represents a collection.
            

    - Parameter expression: An expression to be evaluated against an item in the current model.
    - Returns: A  containing the display name.

    */
    open func DisplayNameForInnerType<UTModelItem : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModelItem,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__DisplayNameForInnerType_2__1__System_Linq_Expressions_Expression_System_System_Func_UTModelItem_UTResult__(TModel.get_type_handle(), UTModelItem.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayTextFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayTextFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    
            Returns the simple display text for the specified .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: 
            A  containing the simple display text.
            If the  result is null, returns
            .
            

    */
    open func DisplayTextFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__DisplayTextFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String,System.Object)
    /**
    
            Returns a single-selection HTML <select> element for the . Adds
            <option> elements based on  and . Adds a
            "selected" attribute to an <option> if its  (if non-null) or
             matches the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, uses the  entry with
            full name and that entry must be a collection of  objects.
            
    - Parameter optionLabel: 
            The text for a default empty item. Does not include such an item if argument is null.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    open func DropDownListFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__DropDownListFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), (selectList?.get_handle()), optionLabel?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)
    /**
    
            Returns HTML markup for the , using an editor template, specified HTML field
            name, and additional view data. The template is found using the  or the
            's .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter templateName: The name of the template that is used to create the HTML markup.
    - Parameter htmlFieldName: 
            A  used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            
    - Parameter additionalViewData: 
            An anonymous  or  that can contain additional
            view data that will be merged into the  instance created for the
            template.
            
    - Returns: A new  containing the <input> element(s).

    */
    open func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__EditorFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Encode(System.Object)
    /**
    */
    open func Encode(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__Encode_0__1__Object(TModel.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Encode(System.String)
    /**
    */
    open func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__Encode_0__1__String(TModel.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent HiddenFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.HiddenFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
    /**
    
            Returns an <input> element of type "hidden" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func HiddenFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__HiddenFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String IdFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.IdFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    
            Returns the HTML element Id for the specified .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A  containing the element Id.

    */
    open func IdFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__IdFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.LabelFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)
    /**
    
            Returns a <label> element for the specified .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter labelText: The inner text of the element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <label> element.

    */
    open func LabelFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__LabelFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ListBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    
            Returns a multi-selection <select> element for the . Adds
            <option> elements based on . Adds a "selected" attribute to an
            <option> if its  (if non-null) or
             matches an entry in the first non-null collection found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, finds the 
            collection with name  in .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <select> element.

    */
    open func ListBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__ListBoxFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String NameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    
            Returns the full HTML element name for the specified . Uses
             (if non-empty) to reflect relationship between current
             and the top-level view's model.
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A  containing the element name.

    */
    open func NameFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__NameFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent PasswordFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.PasswordFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
    /**
    
            Returns an <input> element of type "password" for the specified . Adds a
            "value" attribute containing the  dictionary entry with key "value" (if
            any).
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func PasswordFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__PasswordFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)
    /**
    
            Returns an <input> element of type "radio" for the specified .
            Adds a "value" attribute to the element containing the first non-null value found in:
            the  parameter, or
            the  dictionary entry with key "value".
            Adds a "checked" attribute to the element if  matches the first non-null
            value found in:
            the  dictionary entry with key "checked", or
            the  entry with full name.
            If  evaluates to a non-null value, instead uses the first
            non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            Adds a "value" attribute to the element containing the  parameter.
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter value: Value to include in the element. Must not be null.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func RadioButtonFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__RadioButtonFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Raw(System.Object)
    /**
    */
    open func Raw(value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__Raw_0__1__Object(TModel.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Raw(System.String)
    /**
    */
    open func Raw(value : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__Raw_0__1__String(TModel.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)
    /**
    
            Returns a <textarea> element for the specified . Adds content to the
            element body based on the first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter rows: Number of rows in the textarea.
    - Parameter columns: Number of columns in the textarea.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <textarea> element.

    */
    open func TextAreaFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__TextAreaFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___i32_i32_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)
    /**
    
            Returns an <input> element of type "text" for the specified . Adds a
            "value" attribute to the element containing the first non-null value found in:
            the  entry with full name,
            the  evaluated against , or
            the  dictionary entry with key "value".
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the
             value when using that in the "value" attribute.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  containing the <input> element.

    */
    open func TextBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__TextBoxFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ValidationMessageFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object,System.String)
    /**
    
            Returns the validation message if an error exists in the 
            object for the specified .
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the  element.
            Alternatively, an  instance containing the HTML attributes.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Returns: 
            A new  containing the  element. null if the
             is valid and client-side validation is disabled.
            

    */
    open func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_IHtmlContent__ValidationMessageFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object_String(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ValueFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ValueFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)
    /**
    
            Returns the formatted value for the specified . Specifically, returns the
            first non-null value found in:
            the  entry with full name, or
            the  evaluated against .
            See  for more information about a "full name".
            

    - Parameter expression: An expression to be evaluated against the current model.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the
             value when returning that value.
            
    - Returns: A  containing the formatted value.

    */
    open func ValueFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_String__ValueFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel> get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.get_ViewData
    open func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1_Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_TModel___get_ViewData_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHtmlHelper_1


// type: Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper
    /**
    
            Base JSON helpers.
            

    */
open class IJsonHelper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_Rendering_IJsonHelper
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_IJsonHelper_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Html.IHtmlContent Serialize(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper.Serialize(System.Object)
    /**
    
            Returns serialized JSON for the .
            

    - Parameter value: The value to serialize as JSON.
    - Returns: A new  containing the serialized JSON.

    */
    open func Serialize(value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_IJsonHelper_IHtmlContent__Serialize_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IJsonHelper


// type: Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList
    /**
    
            Represents a list that lets users select multiple items.
            This class is typically rendered as an HTML <select multiple="multiple"> element with the specified collection
            of  objects.
            

    */
open class MultiSelectList
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.IEnumerable)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_ctor_0__1__IEnumerable(&__thrown, items?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.Collections.IEnumerable)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter selectedValues: The selected values.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, selectedValues : Optional<dotnet.System.Collections.IEnumerable>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_ctor_0__2__IEnumerable_IEnumerable(&__thrown, items?.get_handle() ?? nil, selectedValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter dataValueField: The data value field.
    - Parameter dataTextField: The data text field.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_ctor_0__3__IEnumerable_String_String(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String, System.Collections.IEnumerable)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter dataValueField: The data value field.
    - Parameter dataTextField: The data text field.
    - Parameter selectedValues: The selected values.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>, selectedValues : Optional<dotnet.System.Collections.IEnumerable>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_ctor_0__4__IEnumerable_String_String_IEnumerable(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil, selectedValues?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String, System.Collections.IEnumerable, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable,System.String)
    /**
    
            Initializes a new instance of the MultiSelectList class by using the items to include in the list,
            the data value field, the data text field, the selected values, and the data group field.
            

    - Parameter items: The items used to build each  of the list.
    - Parameter dataValueField: The data value field. Used to match the Value property of the corresponding
            .
    - Parameter dataTextField: The data text field. Used to match the Text property of the corresponding
            .
    - Parameter selectedValues: The selected values field. Used to match the Selected property of the
            corresponding .
    - Parameter dataGroupField: The data group field. Used to match the Group property of the corresponding
            .
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>, selectedValues : Optional<dotnet.System.Collections.IEnumerable>, dataGroupField : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_ctor_0__5__IEnumerable_String_String_IEnumerable_String(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil, selectedValues?.get_handle() ?? nil, dataGroupField?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerator<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.GetEnumerator
    /**
    */
    open func GetEnumerator() throws -> Optional<dotnet.System.Collections.Generic.IEnumerator_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_System_Collections_Generic_IEnumerator_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DataGroupField()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.get_DataGroupField
    open func get_DataGroupField() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_String__get_DataGroupField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DataTextField()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.get_DataTextField
    open func get_DataTextField() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_String__get_DataTextField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DataValueField()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.get_DataValueField
    open func get_DataValueField() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_String__get_DataValueField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.IEnumerable get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.get_Items
    open func get_Items() throws -> Optional<dotnet.System.Collections.IEnumerable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_IEnumerable__get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.IEnumerable get_SelectedValues()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList.get_SelectedValues
    open func get_SelectedValues() throws -> Optional<dotnet.System.Collections.IEnumerable> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_MultiSelectList_IEnumerable__get_SelectedValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the data group field.
            

    */
    open var DataGroupField : Optional<dotnet.System.String> {
        get {
            return try! get_DataGroupField();
        }
    }
    /**
    
            Gets the data text field.
            

    */
    open var DataTextField : Optional<dotnet.System.String> {
        get {
            return try! get_DataTextField();
        }
    }
    /**
    
            Gets the data value field.
            

    */
    open var DataValueField : Optional<dotnet.System.String> {
        get {
            return try! get_DataValueField();
        }
    }
    /**
    
            Gets the items.
            

    */
    open var Items : Optional<dotnet.System.Collections.IEnumerable> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Gets the selected values.
            

    */
    open var SelectedValues : Optional<dotnet.System.Collections.IEnumerable> {
        get {
            return try! get_SelectedValues();
        }
    }
} // MultiSelectList


// type: Microsoft.AspNetCore.Mvc.Rendering.MvcForm
    /**
    
            An HTML form element in an MVC view.
            

    */
open class MvcForm
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_MvcForm_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MvcForm.#ctor(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Initializes a new instance of .
            

    - Parameter viewContext: The .
    - Parameter htmlEncoder: The .
    */
    public init(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_MvcForm_ctor_0__2__ViewContext_HtmlEncoder(&__thrown, viewContext?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MvcForm.Dispose
    /**
    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_MvcForm_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndForm()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.MvcForm.EndForm
    /**
    
            Renders the </form> end tag to the response.
            

    */
    open func EndForm() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_MvcForm_void__EndForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MvcForm


// type: Microsoft.AspNetCore.Mvc.Rendering.RenderMode
    /**
    
            Describes the render mode of the component.
            

    */
public struct RenderMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.RenderMode Static
    /**
    
            Renders the component into static HTML.
            

    */
    public static var Static : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_Static());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.RenderMode Server
    /**
    
            Renders a marker for a Blazor server-side application. This doesn't include any output from the component.
            When the user-agent starts, it uses this marker to bootstrap a blazor application.
            

    */
    public static var Server : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_Server());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.RenderMode ServerPrerendered
    /**
    
            Renders the component into static HTML and includes a marker for a Blazor server-side application.
            When the user-agent starts, it uses this marker to bootstrap a blazor application.
            

    */
    public static var ServerPrerendered : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_ServerPrerendered());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.RenderMode WebAssembly
    /**
    
            Renders a marker for a Blazor webassembly application. This doesn't include any output from the component.
            When the user-agent starts, it uses this marker to bootstrap a blazor client-side application.
            

    */
    public static var WebAssembly : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_WebAssembly());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.RenderMode WebAssemblyPrerendered
    /**
    
            Renders the component into static HTML and includes a marker for a Blazor webassembly application.
            When the user-agent starts, it uses this marker to bootstrap a blazor client-side application.
            

    */
    public static var WebAssemblyPrerendered : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_RenderMode_get_WebAssemblyPrerendered());
            return __return;
        }
    }
} // RenderMode


// type: Microsoft.AspNetCore.Mvc.Rendering.SelectList
    /**
    
            Represents a list that lets users select a single item.
            This class is typically rendered as an HTML <select> element with the specified collection
            of  objects.
            

    */
open class SelectList
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MultiSelectList
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_SelectList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.IEnumerable)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    */
    public override init(items : Optional<dotnet.System.Collections.IEnumerable>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectList_ctor_0__1__IEnumerable(&__thrown, items?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable,System.Object)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter selectedValue: The selected value.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, selectedValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectList_ctor_0__2__IEnumerable_Object(&__thrown, items?.get_handle() ?? nil, selectedValue?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter dataValueField: The data value field.
    - Parameter dataTextField: The data text field.
    */
    public override init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectList_ctor_0__3__IEnumerable_String_String(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)
    /**
    
            Initialize a new instance of .
            

    - Parameter items: The items.
    - Parameter dataValueField: The data value field.
    - Parameter dataTextField: The data text field.
    - Parameter selectedValue: The selected value.
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>, selectedValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectList_ctor_0__4__IEnumerable_String_String_Object(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil, selectedValue?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEnumerable, System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object,System.String)
    /**
    
            Initializes a new instance of the SelectList class by using the specified items for the list,
            the data value field, the data text field, a selected value, and the data group field.
            

    - Parameter items: The items used to build each  of the list.
    - Parameter dataValueField: The data value field. Used to match the Value property of the corresponding
            .
    - Parameter dataTextField: The data text field. Used to match the Text property of the corresponding
            .
    - Parameter selectedValue: The selected values. Used to match the Selected property of the corresponding
            .
    - Parameter dataGroupField: The data group field. Used to match the Group property of the corresponding
            .
    */
    public init(items : Optional<dotnet.System.Collections.IEnumerable>, dataValueField : Optional<dotnet.System.String>, dataTextField : Optional<dotnet.System.String>, selectedValue : Optional<dotnet.System.Object>, dataGroupField : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectList_ctor_0__5__IEnumerable_String_String_Object_String(&__thrown, items?.get_handle() ?? nil, dataValueField?.get_handle() ?? nil, dataTextField?.get_handle() ?? nil, selectedValue?.get_handle() ?? nil, dataGroupField?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_SelectedValue()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectList.get_SelectedValue
    open func get_SelectedValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectList_Object__get_SelectedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The selected value.
            

    */
    open var SelectedValue : Optional<dotnet.System.Object> {
        get {
            return try! get_SelectedValue();
        }
    }
} // SelectList


// type: Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup
    /**
    
            Represents the optgroup HTML element and its attributes.
            In a select list, multiple groups with the same name are supported.
            They are compared with reference equality.
            

    */
open class SelectListGroup
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Disabled()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup.get_Disabled
    open func get_Disabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_bool__get_Disabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Disabled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup.set_Disabled(System.Boolean)
    open func set_Disabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_void__set_Disabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListGroup_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value that indicates whether this  is disabled.
            

    */
    open var Disabled : Bool {
        get {
            return try! get_Disabled();
        }
        set(v) {
            return try! set_Disabled(value: v);
        }
    }
    /**
    
            Represents the value of the optgroup's label.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
} // SelectListGroup


// type: Microsoft.AspNetCore.Mvc.Rendering.SelectListItem
    /**
    
            Represents an item in a  or .
            This class is typically rendered as an HTML <option> element with the specified
            attribute values.
            

    */
open class SelectListItem
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.#ctor(System.String,System.String)
    /**
    
            Initializes a new instance of .
            

    - Parameter text: The display text of this .
    - Parameter value: The value of this .
    */
    public init(text : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_ctor_0__2__String_String(&__thrown, text?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.#ctor(System.String,System.String,System.Boolean)
    /**
    
            Initializes a new instance of .
            

    - Parameter text: The display text of this .
    - Parameter value: The value of this .
    - Parameter selected: Value that indicates whether this  is selected.
    */
    public init(text : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, selected : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_ctor_0__3__String_String_bool(&__thrown, text?.get_handle() ?? nil, value?.get_handle() ?? nil, Swift.Int32(selected ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, bool, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.#ctor(System.String,System.String,System.Boolean,System.Boolean)
    /**
    
            Initializes a new instance of .
            

    - Parameter text: The display text of this .
    - Parameter value: The value of this .
    - Parameter selected: Value that indicates whether this  is selected.
    - Parameter disabled: Value that indicates whether this  is disabled.
    */
    public init(text : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, selected : Bool, disabled : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_ctor_0__4__String_String_bool_bool(&__thrown, text?.get_handle() ?? nil, value?.get_handle() ?? nil, Swift.Int32(selected ? 1 : 0), Swift.Int32(disabled ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Disabled()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.get_Disabled
    open func get_Disabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_bool__get_Disabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Disabled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.set_Disabled(System.Boolean)
    open func set_Disabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_void__set_Disabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup get_Group()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.get_Group
    open func get_Group() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_SelectListGroup__get_Group_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Group(Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.set_Group(Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup)
    open func set_Group(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_void__set_Group_0__1__SelectListGroup(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Selected()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.get_Selected
    open func get_Selected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_bool__get_Selected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Selected(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.set_Selected(System.Boolean)
    open func set_Selected(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_void__set_Selected_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.get_Text
    open func get_Text() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Text(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.set_Text(System.String)
    open func set_Text(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_void__set_Text_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a value that indicates whether this  is disabled.
            This property is typically rendered as a disabled="disabled" attribute in the HTML
            <option> element.
            

    */
    open var Disabled : Bool {
        get {
            return try! get_Disabled();
        }
        set(v) {
            return try! set_Disabled(value: v);
        }
    }
    /**
    
            Represents the optgroup HTML element this item is wrapped into.
            In a select list, multiple groups with the same name are supported.
            They are compared with reference equality.
            

    */
    open var Group : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListGroup> {
        get {
            return try! get_Group();
        }
        set(v) {
            return try! set_Group(value: v!);
        }
    }
    /**
    
            Gets or sets a value that indicates whether this  is selected.
            This property is typically rendered as a selected="selected" attribute in the HTML
            <option> element.
            

    */
    open var Selected : Bool {
        get {
            return try! get_Selected();
        }
        set(v) {
            return try! set_Selected(value: v);
        }
    }
    /**
    
            Gets or sets a value that indicates the display text of this .
            This property is typically rendered as the inner HTML in the HTML <option> element.
            

    */
    open var Text : Optional<dotnet.System.String> {
        get {
            return try! get_Text();
        }
        set(v) {
            return try! set_Text(value: v!);
        }
    }
    /**
    
            Gets or sets a value that indicates the value of this .
            This property is typically rendered as a value="..." attribute in the HTML
            <option> element.
            

    */
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // SelectListItem


// type: Microsoft.AspNetCore.Mvc.Rendering.TagBuilder
    /**
    
            Contains methods and properties that are used to create HTML elements. This class is often used to write HTML
            helpers and tag helpers.
            

    */
open class TagBuilder
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.#ctor(System.String)
    /**
    
            Creates a new HTML tag that has the specified tag name.
            

    - Parameter tagName: An HTML tag name.
    */
    public init(tagName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_ctor_0__1__String(&__thrown, tagName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.#ctor(Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)
    /**
    
            Creates a copy of the HTML tag passed as .
            

    - Parameter tagBuilder: Tag to copy.
    */
    public init(tagBuilder : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_ctor_0__1__TagBuilder(&__thrown, tagBuilder.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddCssClass(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.AddCssClass(System.String)
    /**
    
            Adds a CSS class to the list of CSS classes in the tag.
            If there are already CSS classes on the tag then a space character and the new class will be appended to
            the existing list.
            

    - Parameter value: The CSS class name to add.
    */
    open func AddCssClass(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__AddCssClass_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String CreateSanitizedId(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.CreateSanitizedId(System.String,System.String)
    /**
    
            Returns a valid HTML 4.01 "id" attribute value for an element with the given .
            

    - Parameter name: 
            The fully-qualified expression name, ignoring the current model. Also the original HTML element name.
            
    - Parameter invalidCharReplacement: 
            The  (normally a single ) to substitute for invalid characters in
            .
            
    - Returns: 
            Valid HTML 4.01 "id" attribute value for an element with the given .
            

    */
    open class func CreateSanitizedId(name : Optional<dotnet.System.String>, invalidCharReplacement : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_String__CreateSanitizedId_0__2__String_String(&__thrown, name?.get_handle() ?? nil, invalidCharReplacement.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void GenerateId(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.GenerateId(System.String,System.String)
    /**
    
            Adds a valid HTML 4.01 "id" attribute for an element with the given . Does
            nothing if  already contains an "id" attribute or the 
            is null or empty.
            

    - Parameter name: 
            The fully-qualified expression name, ignoring the current model. Also the original HTML element name.
            
    - Parameter invalidCharReplacement: 
            The  (normally a single ) to substitute for invalid characters in
            .
            
    */
    open func GenerateId(name : dotnet.System.String, invalidCharReplacement : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__GenerateId_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), invalidCharReplacement.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MergeAttribute(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.MergeAttribute(System.String,System.String)
    /**
    
            Merge an attribute.
            

    - Parameter key: The attribute key.
    - Parameter value: The attribute value.
    */
    open func MergeAttribute(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__MergeAttribute_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MergeAttribute(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.MergeAttribute(System.String,System.String,System.Boolean)
    /**
    
            Merge an attribute.
            

    - Parameter key: The attribute key.
    - Parameter value: The attribute value.
    - Parameter replaceExisting: Whether to replace an existing value.
    */
    open func MergeAttribute(key : dotnet.System.String, value : Optional<dotnet.System.String>, replaceExisting : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__MergeAttribute_0__3__String_String_bool(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil, Swift.Int32(replaceExisting ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MergeAttributes<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1})
    /**
    
            Merge an attribute dictionary.
            

    - Parameter attributes: The attributes.
    */
    open func MergeAttributes<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(attributes : dotnet.System.Collections.Generic.IDictionary_2<UTKey,UTValue>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__MergeAttributes_2__1__System_Collections_Generic_IDictionary_UTKey_UTValue_(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, self.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MergeAttributes<TKey, TValue>(System.Collections.Generic.IDictionary<TKey,TValue>, bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)
    /**
    
            Merge an attribute dictionary.
            

    - Parameter attributes: The attributes.
    - Parameter replaceExisting: Whether to replace existing attributes.
    */
    open func MergeAttributes<UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(attributes : dotnet.System.Collections.Generic.IDictionary_2<UTKey,UTValue>, replaceExisting : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__MergeAttributes_2__2__System_Collections_Generic_IDictionary_UTKey_UTValue__bool(UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, self.get_handle(), attributes.get_handle(), Swift.Int32(replaceExisting ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RenderBody()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.RenderBody
    /**
    
            Returns an  that renders the body.
            

    - Returns: An  that renders the body.

    */
    open func RenderBody() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_IHtmlContent__RenderBody_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RenderStartTag()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.RenderStartTag
    /**
    
            Returns an  that renders the start tag.
            

    - Returns: An  that renders the start tag.

    */
    open func RenderStartTag() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_IHtmlContent__RenderStartTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RenderEndTag()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.RenderEndTag
    /**
    
            Returns an  that renders the end tag.
            

    - Returns: An  that renders the end tag.

    */
    open func RenderEndTag() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_IHtmlContent__RenderEndTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RenderSelfClosingTag()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.RenderSelfClosingTag
    /**
    
            Returns an  that renders the self-closing tag.
            

    - Returns: An  that renders the self-closing tag.

    */
    open func RenderSelfClosingTag() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_IHtmlContent__RenderSelfClosingTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary get_Attributes()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.get_Attributes
    open func get_Attributes() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_AttributeDictionary__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.IHtmlContentBuilder get_InnerHtml()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.get_InnerHtml
    open func get_InnerHtml() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_IHtmlContentBuilder__get_InnerHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasInnerHtml()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.get_HasInnerHtml
    open func get_HasInnerHtml() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_bool__get_HasInnerHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_TagName()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.get_TagName
    open func get_TagName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_String__get_TagName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode get_TagRenderMode()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.get_TagRenderMode
    open func get_TagRenderMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_TagRenderMode__get_TagRenderMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode(val: __return);
        }
    }
    // [IsSpecialName] void set_TagRenderMode(Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.set_TagRenderMode(Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode)
    open func set_TagRenderMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_TagBuilder_void__set_TagRenderMode_0__1__TagRenderMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the set of attributes that will be written to the tag.
            

    */
    open var Attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Gets an indication  is not empty.
            

    */
    open var HasInnerHtml : Bool {
        get {
            return try! get_HasInnerHtml();
        }
    }
    /**
    
            Gets the inner HTML content of the element.
            

    */
    open var InnerHtml : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder {
        get {
            return try! get_InnerHtml();
        }
    }
    /**
    
            Gets the tag name for this tag.
            

    */
    open var TagName : dotnet.System.String {
        get {
            return try! get_TagName();
        }
    }
    /**
    
            The  with which the tag is written.
            

    */
    open var TagRenderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        get {
            return try! get_TagRenderMode();
        }
        set(v) {
            return try! set_TagRenderMode(value: v);
        }
    }
} // TagBuilder


// type: Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode
    /**
    
            Specifies constants for tag rendering modes.
            

    */
public struct TagRenderMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_TagRenderMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode Normal
    /**
    
            Normal mode.
            

    */
    public static var Normal : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_TagRenderMode_get_Normal());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode StartTag
    /**
    
            Start tag mode.
            

    */
    public static var StartTag : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_TagRenderMode_get_StartTag());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode EndTag
    /**
    
            End tag mode.
            

    */
    public static var EndTag : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_TagRenderMode_get_EndTag());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode SelfClosing
    /**
    
            Self closing mode.
            

    */
    public static var SelfClosing : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagRenderMode(val: Microsoft_AspNetCore_Mvc_Rendering_TagRenderMode_get_SelfClosing());
            return __return;
        }
    }
} // TagRenderMode


// type: Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions
public struct ViewComponentHelperExtensions {
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.String)
    /**
    
            Invokes a view component with the specified .
            

    - Parameter helper: The .
    - Parameter name: The name of the view component.
    - Returns: A  that on completion returns the rendered .
            

    */
    public static func InvokeAsync(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentHelper, name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewComponentHelperExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__IViewComponentHelper_String(&__thrown, helper.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.Type)
    /**
    
            Invokes a view component of type .
            

    - Parameter helper: The .
    - Parameter componentType: The view component .
    - Returns: A  that on completion returns the rendered .
            

    */
    public static func InvokeAsync(helper : aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentHelper, componentType : dotnet.System.Type_) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewComponentHelperExtensions_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__IViewComponentHelper_Type(&__thrown, helper.get_handle(), componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.Object)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper)
} // ViewComponentHelperExtensions


// type: Microsoft.AspNetCore.Mvc.Rendering.ViewContext
    /**
    
            Context for view execution.
            

    */
open class ViewContext
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_Rendering_ViewContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.#ctor
    /**
    
            Creates an empty .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary, System.IO.TextWriter, Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary,System.IO.TextWriter,Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions)
    /**
    
            Initializes a new instance of .
            

    - Parameter actionContext: The .
    - Parameter view: The  being rendered.
    - Parameter viewData: The .
    - Parameter tempData: The .
    - Parameter writer: The  to render output to.
    - Parameter htmlHelperOptions: The  to apply to this instance.
    */
    public init(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, view : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView, viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, tempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary, writer : dotnet.System.IO.TextWriter, htmlHelperOptions : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_ctor_0__6__ActionContext_IView_ViewDataDictionary_ITempDataDictionary_TextWriter_HtmlHelperOptions(&__thrown, actionContext.get_handle(), view.get_handle(), viewData.get_handle(), tempData.get_handle(), writer.get_handle(), htmlHelperOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.IO.TextWriter)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.#ctor(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.IO.TextWriter)
    /**
    
            Initializes a new instance of .
            

    - Parameter viewContext: The  to copy values from.
    - Parameter view: The  being rendered.
    - Parameter viewData: The .
    - Parameter writer: The  to render output to.
    */
    public init(viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext, view : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView, viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_ctor_0__4__ViewContext_IView_ViewDataDictionary_TextWriter(&__thrown, viewContext.get_handle(), view.get_handle(), viewData.get_handle(), writer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext GetFormContextForClientValidation()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.GetFormContextForClientValidation
    /**
    
            Gets the  if  is enabled.
            

    - Returns: 

    */
    open func GetFormContextForClientValidation() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_FormContext__GetFormContextForClientValidation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext get_FormContext()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_FormContext
    open func get_FormContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_FormContext__get_FormContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FormContext(Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_FormContext(Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext)
    open func set_FormContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_FormContext_0__1__FormContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ClientValidationEnabled()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ClientValidationEnabled
    open func get_ClientValidationEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_bool__get_ClientValidationEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ClientValidationEnabled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_ClientValidationEnabled(System.Boolean)
    open func set_ClientValidationEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_ClientValidationEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode get_Html5DateRenderingMode()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_Html5DateRenderingMode
    open func get_Html5DateRenderingMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_Html5DateRenderingMode__get_Html5DateRenderingMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
    open func set_Html5DateRenderingMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_Html5DateRenderingMode_0__1__Html5DateRenderingMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ValidationSummaryMessageElement()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ValidationSummaryMessageElement
    open func get_ValidationSummaryMessageElement() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_String__get_ValidationSummaryMessageElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValidationSummaryMessageElement(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_ValidationSummaryMessageElement(System.String)
    open func set_ValidationSummaryMessageElement(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_ValidationSummaryMessageElement_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ValidationMessageElement()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ValidationMessageElement
    open func get_ValidationMessageElement() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_String__get_ValidationMessageElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ValidationMessageElement(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_ValidationMessageElement(System.String)
    open func set_ValidationMessageElement(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_ValidationMessageElement_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode get_CheckBoxHiddenInputRenderMode()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_CheckBoxHiddenInputRenderMode
    open func get_CheckBoxHiddenInputRenderMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_CheckBoxHiddenInputRenderMode__get_CheckBoxHiddenInputRenderMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode(val: __return);
        }
    }
    // [IsSpecialName] void set_CheckBoxHiddenInputRenderMode(Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_CheckBoxHiddenInputRenderMode(Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode)
    open func set_CheckBoxHiddenInputRenderMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_CheckBoxHiddenInputRenderMode_0__1__CheckBoxHiddenInputRenderMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ViewBag
    open func get_ViewBag() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_View
    open func get_View() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __return);
        }
    }
    // [IsSpecialName] void set_View(Microsoft.AspNetCore.Mvc.ViewEngines.IView)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_View(Microsoft.AspNetCore.Mvc.ViewEngines.IView)
    open func set_View(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_View_0__1__IView(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Writer()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_Writer
    open func get_Writer() throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_TextWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Writer(System.IO.TextWriter)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_Writer(System.IO.TextWriter)
    open func set_Writer(value : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_Writer_0__1__TextWriter(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ExecutingFilePath()
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.get_ExecutingFilePath
    open func get_ExecutingFilePath() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_Rendering_ViewContext_String__get_ExecutingFilePath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExecutingFilePath(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.set_ExecutingFilePath(System.String)
    open func set_ExecutingFilePath(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_Rendering_ViewContext_void__set_ExecutingFilePath_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the way hidden inputs are rendered for checkbox tag helpers and html helpers.
            

    */
    open var CheckBoxHiddenInputRenderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        get {
            return try! get_CheckBoxHiddenInputRenderMode();
        }
        set(v) {
            return try! set_CheckBoxHiddenInputRenderMode(value: v);
        }
    }
    /**
    
            Gets or sets a value that indicates whether client-side validation is enabled.
            

    */
    open var ClientValidationEnabled : Bool {
        get {
            return try! get_ClientValidationEnabled();
        }
        set(v) {
            return try! set_ClientValidationEnabled(value: v);
        }
    }
    /**
    
            Gets or sets the path of the view file currently being rendered.
            

    */
    open var ExecutingFilePath : Optional<dotnet.System.String> {
        get {
            return try! get_ExecutingFilePath();
        }
        set(v) {
            return try! set_ExecutingFilePath(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the form element being rendered.
            A default context is returned if no form is currently being rendered.
            

    */
    open var FormContext : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext {
        get {
            return try! get_FormContext();
        }
        set(v) {
            return try! set_FormContext(value: v);
        }
    }
    /**
    
            Set this property to  to have templated helpers such as
             and  render date and time
            values using the current culture. By default, these helpers render dates and times as RFC 3339 compliant strings.
            

    */
    open var Html5DateRenderingMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        get {
            return try! get_Html5DateRenderingMode();
        }
        set(v) {
            return try! set_Html5DateRenderingMode(value: v);
        }
    }
    /**
    
            Gets or sets the  instance.
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Element name used to wrap a top-level message generated by  and
            other overloads.
            

    */
    open var ValidationMessageElement : dotnet.System.String {
        get {
            return try! get_ValidationMessageElement();
        }
        set(v) {
            return try! set_ValidationMessageElement(value: v);
        }
    }
    /**
    
            Element name used to wrap a top-level message generated by  and
            other overloads.
            

    */
    open var ValidationSummaryMessageElement : dotnet.System.String {
        get {
            return try! get_ValidationSummaryMessageElement();
        }
        set(v) {
            return try! set_ValidationSummaryMessageElement(value: v);
        }
    }
    /**
    
            Gets or sets the  currently being rendered, if any.
            

    */
    open var View : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView {
        get {
            return try! get_View();
        }
        set(v) {
            return try! set_View(value: v);
        }
    }
    /**
    
            Gets the dynamic view bag.
            

    */
    open var ViewBag : dotnet.System.Object {
        get {
            return try! get_ViewBag();
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v);
        }
    }
    /**
    
            Gets or sets the  used to write the output.
            

    */
    open var Writer : dotnet.System.IO.TextWriter {
        get {
            return try! get_Writer();
        }
        set(v) {
            return try! set_Writer(value: v);
        }
    }
} // ViewContext


}

// Microsoft.AspNetCore.Mvc.ViewComponents
extension Microsoft.AspNetCore.Mvc.ViewComponents {
// type: Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult
    /**
    
            An  which writes text when executed.
            

    */
open class ContentViewComponentResult
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IViewComponentResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ContentViewComponentResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult.#ctor(System.String)
    /**
    
            Initializes a new .
            

    - Parameter content: Content to write. The content will be HTML encoded when written.
    */
    public init(content : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ContentViewComponentResult_ctor_0__1__String(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult.Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Encodes and writes the .
            

    - Parameter context: The .
    */
    open /* method final */ func Execute(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ContentViewComponentResult_void__Execute_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult.ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Encodes and writes the .
            

    - Parameter context: The .
    - Returns: A completed .

    */
    open /* method final */ func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ContentViewComponentResult_Task__ExecuteAsync_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Content()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ContentViewComponentResult.get_Content
    open func get_Content() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ContentViewComponentResult_String__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            Gets the content.
            

    */
    open var Content : dotnet.System.String {
        get {
            return try! get_Content();
        }
    }
} // ContentViewComponentResult


// type: Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorCollectionProvider
    /**
    
            A default implementation of 
            

    */
open class DefaultViewComponentDescriptorCollectionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorCollectionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorCollectionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorCollectionProvider.#ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorProvider)
    /**
    
            Creates a new instance of .
            

    - Parameter descriptorProvider: The .
    */
    public init(descriptorProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorCollectionProvider_ctor_0__1__IViewComponentDescriptorProvider(&__thrown, descriptorProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection get_ViewComponents()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorCollectionProvider.get_ViewComponents
    open /* method final */ func get_ViewComponents() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorCollectionProvider_ViewComponentDescriptorCollection__get_ViewComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public var ViewComponents : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection> {
        get {
            return try! get_ViewComponents();
        }
    }
} // DefaultViewComponentDescriptorCollectionProvider


// type: Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorProvider
    /**
    
            Default implementation of .
            

    */
open class DefaultViewComponentDescriptorProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorProvider.#ctor(Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager)
    /**
    
            Creates a new .
            

    - Parameter partManager: The .
    */
    public init(partManager : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorProvider_ctor_0__1__ApplicationPartManager(&__thrown, partManager?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor> GetViewComponents()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentDescriptorProvider.GetViewComponents
    /**
    */
    open func GetViewComponents() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentDescriptorProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor___GetViewComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultViewComponentDescriptorProvider


// type: Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentFactory
    /**
    
            Default implementation for .
            

    */
open class DefaultViewComponentFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentFactory.#ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator)
    /**
    
            Creates a new instance of 
            

    - Parameter activator: 
            The  used to create new view component instances.
            
    */
    public init(activator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentFactory_ctor_0__1__IViewComponentActivator(&__thrown, activator?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object CreateViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentFactory.CreateViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    */
    open /* method final */ func CreateViewComponent(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentFactory_Object__CreateViewComponent_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReleaseViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentFactory.ReleaseViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    */
    open /* method final */ func ReleaseViewComponent(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, component : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentFactory_void__ReleaseViewComponent_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask ReleaseViewComponentAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentFactory.ReleaseViewComponentAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    */
    open /* method final */ func ReleaseViewComponentAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, component : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentFactory_ValueTask__ReleaseViewComponentAsync_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // DefaultViewComponentFactory


// type: Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper
    /**
    
            Default implementation for .
            

    */
open class DefaultViewComponentHelper
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IViewComponentHelper,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentSelector, Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvokerFactory, Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentSelector,Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvokerFactory,Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope)
    /**
    
            Initializes a new instance of .
            

    - Parameter descriptorProvider: The 
            used to locate view components.
    - Parameter htmlEncoder: The .
    - Parameter selector: The .
    - Parameter invokerFactory: The .
    - Parameter viewBufferScope: The  that manages the lifetime of
             instances.
    */
    public init(descriptorProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, selector : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentSelector, invokerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvokerFactory, viewBufferScope : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentHelper_ctor_0__5__IViewComponentDescriptorCollectionProvider_HtmlEncoder_IViewComponentSelector_IViewComponentInvokerFactory_IViewBufferScope(&__thrown, descriptorProvider.get_handle(), htmlEncoder.get_handle(), selector.get_handle(), invokerFactory.get_handle(), viewBufferScope.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open /* method final */ func Contextualize(viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentHelper_void__Contextualize_0__1__ViewContext(&__thrown, self.get_handle(), viewContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.InvokeAsync(System.String,System.Object)
    /**
    */
    open /* method final */ func InvokeAsync(name : dotnet.System.String, arguments : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.InvokeAsync(System.Type,System.Object)
    /**
    */
    open /* method final */ func InvokeAsync(componentType : dotnet.System.Type_, arguments : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___InvokeAsync_0__2__Type_Object(&__thrown, self.get_handle(), componentType.get_handle(), arguments?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // DefaultViewComponentHelper


// type: Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentSelector
    /**
    
            Default implementation of .
            

    */
open class DefaultViewComponentSelector
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentSelector
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentSelector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentSelector.#ctor(Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider)
    /**
    
            Creates a new .
            

    - Parameter descriptorProvider: The .
    */
    public init(descriptorProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentSelector_ctor_0__1__IViewComponentDescriptorCollectionProvider(&__thrown, descriptorProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor SelectComponent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentSelector.SelectComponent(System.String)
    /**
    */
    open /* method final */ func SelectComponent(componentName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_DefaultViewComponentSelector_ViewComponentDescriptor__SelectComponent_0__1__String(&__thrown, self.get_handle(), componentName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultViewComponentSelector


// type: Microsoft.AspNetCore.Mvc.ViewComponents.HtmlContentViewComponentResult
    /**
    
            An  which writes an  when executed.
            

    */
open class HtmlContentViewComponentResult
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IViewComponentResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_HtmlContentViewComponentResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.HtmlContentViewComponentResult.#ctor(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Initializes a new .
            

    */
    public init(encodedContent : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_HtmlContentViewComponentResult_ctor_0__1__IHtmlContent(&__thrown, encodedContent.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.HtmlContentViewComponentResult.Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Writes the .
            

    - Parameter context: The .
    */
    open /* method final */ func Execute(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_HtmlContentViewComponentResult_void__Execute_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.HtmlContentViewComponentResult.ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Writes the .
            

    - Parameter context: The .
    - Returns: A completed .

    */
    open /* method final */ func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_HtmlContentViewComponentResult_Task__ExecuteAsync_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Html.IHtmlContent get_EncodedContent()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.HtmlContentViewComponentResult.get_EncodedContent
    open func get_EncodedContent() throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_HtmlContentViewComponentResult_IHtmlContent__get_EncodedContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __return);
        }
    }
    /**
    
            Gets the encoded content.
            

    */
    open var EncodedContent : aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        get {
            return try! get_EncodedContent();
        }
    }
} // HtmlContentViewComponentResult


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator
    /**
    
            Provides methods to instantiate and release a ViewComponent.
            

    */
open class IViewComponentActivator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Create(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator.Create(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Instantiates a ViewComponent.
            

    - Parameter context: 
            The  for the executing .
            
    */
    open func Create(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator_Object__Create_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Release(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator.Release(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    
            Releases a ViewComponent instance.
            

    - Parameter context: 
            The  associated with the .
            
    - Parameter viewComponent: The  to release.
    */
    open func Release(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, viewComponent : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator_void__Release_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, viewComponent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask ReleaseAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentActivator.ReleaseAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    
            Releases a ViewComponent instance.
            

    - Parameter context: 
            The  associated with the .
            
    - Parameter viewComponent: The  to release.
    - Returns: A  that completes when the view component has been disposed.

    */
    open func ReleaseAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, viewComponent : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator_ValueTask__ReleaseAsync_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, viewComponent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // IViewComponentActivator


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider
    /**
    
            Provides the currently cached collection of .
            

    */
open class IViewComponentDescriptorCollectionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorCollectionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorCollectionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection get_ViewComponents()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorCollectionProvider.get_ViewComponents
    open func get_ViewComponents() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorCollectionProvider_ViewComponentDescriptorCollection__get_ViewComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentDescriptorCollectionProvider


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorProvider
    /**
    
            Discovers the view components in the application.
            

    */
open class IViewComponentDescriptorProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor> GetViewComponents()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentDescriptorProvider.GetViewComponents
    /**
    
            Gets the set of .
            

    - Returns: A list of .

    */
    open func GetViewComponents() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorProvider_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor___GetViewComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentDescriptorProvider


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentFactory
    /**
    
            Provides methods for creation and disposal of view components.
            

    */
open class IViewComponentFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object CreateViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentFactory.CreateViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Creates a new controller for the specified .
            

    - Parameter context:  for the view component.
    - Returns: The view component.

    */
    open func CreateViewComponent(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory_Object__CreateViewComponent_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReleaseViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentFactory.ReleaseViewComponent(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    
            Releases a view component instance.
            

    - Parameter context: The context associated with the .
    - Parameter component: The view component.
    */
    open func ReleaseViewComponent(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, component : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory_void__ReleaseViewComponent_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask ReleaseViewComponentAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentFactory.ReleaseViewComponentAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    
            Releases a view component instance asynchronously.
            

    - Parameter context: The context associated with the .
    - Parameter component: The view component.
    - Returns: A  that completes when the view component has been released.

    */
    open func ReleaseViewComponentAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, component : Optional<dotnet.System.Object>) throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory_ValueTask__ReleaseViewComponentAsync_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
} // IViewComponentFactory


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvoker
    /**
    
            Specifies the contract for execution of a view component.
            

    */
open class IViewComponentInvoker
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvoker
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvoker_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvoker.InvokeAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Executes the view component specified by 
            of  and writes the result to .
            

    - Parameter context: The .
    - Returns: A  that represents the asynchronous operation of execution.

    */
    open func InvokeAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvoker_Task__InvokeAsync_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentInvoker


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvokerFactory
    /**
    
            Interface that exposts the ability to create an .
            

    */
open class IViewComponentInvokerFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvokerFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvokerFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvoker CreateInstance(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvokerFactory.CreateInstance(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Creates a .
            

    - Parameter context: The .
    - Returns: The .

    */
    open func CreateInstance(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvoker> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvokerFactory_IViewComponentInvoker__CreateInstance_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentInvoker(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentInvokerFactory


// type: Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentSelector
    /**
    
            Selects a view component based on a view component name.
            

    */
open class IViewComponentSelector
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentSelector
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentSelector_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor SelectComponent(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.IViewComponentSelector.SelectComponent(System.String)
    /**
    
            Selects a view component based on .
            

    - Parameter componentName: The view component name.
    - Returns: A , or null if no match is found.

    */
    open func SelectComponent(componentName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentSelector_ViewComponentDescriptor__SelectComponent_0__1__String(&__thrown, self.get_handle(), componentName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewComponentSelector


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ServiceBasedViewComponentActivator
    /**
    
            A  that retrieves view components as services from the request's
            .
            

    */
open class ServiceBasedViewComponentActivator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ServiceBasedViewComponentActivator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ServiceBasedViewComponentActivator.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ServiceBasedViewComponentActivator_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Create(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ServiceBasedViewComponentActivator.Create(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    */
    open /* method final */ func Create(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ServiceBasedViewComponentActivator_Object__Create_0__1__ViewComponentContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Release(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ServiceBasedViewComponentActivator.Release(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext,System.Object)
    /**
    */
    open func Release(context : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext>, viewComponent : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ServiceBasedViewComponentActivator_void__Release_0__2__ViewComponentContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, viewComponent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ServiceBasedViewComponentActivator


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext
    /**
    
            A context for view components.
            

    */
open class ViewComponentContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor, System.Collections.Generic.IDictionary<System.String,System.Object>, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.IO.TextWriter)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.#ctor(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.IO.TextWriter)
    /**
    
            Creates a new .
            

    - Parameter viewComponentDescriptor: 
            The  for the view component being invoked.
            
    - Parameter arguments: The view component arguments.
    - Parameter htmlEncoder: The  to use.
    - Parameter viewContext: The .
    - Parameter writer: The  for writing output.
    */
    public init(viewComponentDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor, arguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, viewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext, writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ctor_0__5__ViewComponentDescriptor_System_Collections_Generic_IDictionary_string_object__HtmlEncoder_ViewContext_TextWriter(&__thrown, viewComponentDescriptor.get_handle(), arguments.get_handle(), htmlEncoder.get_handle(), viewContext.get_handle(), writer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_Arguments()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_Arguments
    open func get_Arguments() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_System_Collections_Generic_IDictionary_string_object___get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Arguments(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.set_Arguments(System.Collections.Generic.IDictionary{System.String,System.Object})
    open func set_Arguments(value : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_void__set_Arguments_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.HtmlEncoder get_HtmlEncoder()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_HtmlEncoder
    open func get_HtmlEncoder() throws -> dotnet.System.Text.Encodings.Web.HtmlEncoder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_HtmlEncoder__get_HtmlEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encodings.Web.HtmlEncoder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_HtmlEncoder(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.set_HtmlEncoder(System.Text.Encodings.Web.HtmlEncoder)
    open func set_HtmlEncoder(value : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_void__set_HtmlEncoder_0__1__HtmlEncoder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor get_ViewComponentDescriptor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_ViewComponentDescriptor
    open func get_ViewComponentDescriptor() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ViewComponentDescriptor__get_ViewComponentDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewComponentDescriptor(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.set_ViewComponentDescriptor(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor)
    open func set_ViewComponentDescriptor(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_void__set_ViewComponentDescriptor_0__1__ViewComponentDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_ViewContext
    open func get_ViewContext() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.set_ViewContext(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    open func set_ViewContext(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_void__set_ViewContext_0__1__ViewContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_ViewData
    open func get_ViewData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Writer()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext.get_Writer
    open func get_Writer() throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContext_TextWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
    /**
    
            Gets or sets the view component arguments.
            

    */
    open var Arguments : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Arguments();
        }
        set(v) {
            return try! set_Arguments(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var HtmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder {
        get {
            return try! get_HtmlEncoder();
        }
        set(v) {
            return try! set_HtmlEncoder(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
    }
    /**
    
            Gets or sets the  for the view component being invoked.
            

    */
    open var ViewComponentDescriptor : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor {
        get {
            return try! get_ViewComponentDescriptor();
        }
        set(v) {
            return try! set_ViewComponentDescriptor(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewContext : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext {
        get {
            return try! get_ViewContext();
        }
        set(v) {
            return try! set_ViewContext(value: v);
        }
    }
    /**
    
            Gets the .
            

    */
    open var ViewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary {
        get {
            return try! get_ViewData();
        }
    }
    /**
    
            Gets the  for output.
            

    */
    open var Writer : dotnet.System.IO.TextWriter {
        get {
            return try! get_Writer();
        }
    }
} // ViewComponentContext


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContextAttribute
    /**
    
            Specifies that a controller property should be set with the current
             when creating the view component. The property must have a public
            set method.
            

    */
open class ViewComponentContextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContextAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContextAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentContextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ViewComponentContextAttribute


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentConventions
public struct ViewComponentConventions {
    // static field: System.String ViewComponentSuffix
    /**
    
            The suffix for a view component name.
            

    */
    public static var ViewComponentSuffix : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentConventions_get_ViewComponentSuffix();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // System.String GetComponentName(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentConventions.GetComponentName(System.Reflection.TypeInfo)
    /**
    
            Gets the name of a component.
            

    - Parameter componentType: 
    - Returns: 

    */
    public static func GetComponentName(componentType : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentConventions_String__GetComponentName_0__1__TypeInfo(&__thrown, componentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetComponentFullName(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentConventions.GetComponentFullName(System.Reflection.TypeInfo)
    /**
    
            Get the component's full name from a type from the  first.
            If not defined, the full name is the Namespace with the .
            

    - Parameter componentType: The component type.
    - Returns: The full name of the component.

    */
    public static func GetComponentFullName(componentType : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentConventions_String__GetComponentFullName_0__1__TypeInfo(&__thrown, componentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsComponent(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentConventions.IsComponent(System.Reflection.TypeInfo)
    /**
    
            Returns  if the type is a public, non abstract, non generic class which
            defines , but not the 
            and has a name that ends in ViewComponent.
            

    - Parameter typeInfo: The  to inspect.
    - Returns: If the type is a component.

    */
    public static func IsComponent(typeInfo : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentConventions_bool__IsComponent_0__1__TypeInfo(&__thrown, typeInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ViewComponentConventions


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor
    /**
    
            A descriptor for a view component.
            

    */
open class ViewComponentDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_DisplayName
    open func get_DisplayName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_DisplayName(System.String)
    open func set_DisplayName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FullName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_FullName
    open func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FullName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_FullName(System.String)
    open func set_FullName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_FullName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ShortName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_ShortName
    open func get_ShortName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_String__get_ShortName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ShortName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_ShortName(System.String)
    open func set_ShortName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_ShortName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.TypeInfo get_TypeInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_TypeInfo
    open func get_TypeInfo() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_TypeInfo__get_TypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TypeInfo(System.Reflection.TypeInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_TypeInfo(System.Reflection.TypeInfo)
    open func set_TypeInfo(value : Optional<dotnet.System.Reflection.TypeInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_TypeInfo_0__1__TypeInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_MethodInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_MethodInfo
    open func get_MethodInfo() throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_MethodInfo__get_MethodInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MethodInfo(System.Reflection.MethodInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_MethodInfo(System.Reflection.MethodInfo)
    open func set_MethodInfo(value : Optional<dotnet.System.Reflection.MethodInfo>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_MethodInfo_0__1__MethodInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<System.Reflection.ParameterInfo> get_Parameters()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.get_Parameters
    open func get_Parameters() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Reflection.ParameterInfo>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_System_Collections_Generic_IReadOnlyList_System_Reflection_ParameterInfo___get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Parameters(System.Collections.Generic.IReadOnlyList<System.Reflection.ParameterInfo>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor.set_Parameters(System.Collections.Generic.IReadOnlyList{System.Reflection.ParameterInfo})
    open func set_Parameters(value : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Reflection.ParameterInfo>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor_void__set_Parameters_0__1__System_Collections_Generic_IReadOnlyList_System_Reflection_ParameterInfo_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the display name of the view component.
            

    */
    open var DisplayName : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v!);
        }
    }
    /**
    
            Gets or sets the full name.
            

    */
    open var FullName : Optional<dotnet.System.String> {
        get {
            return try! get_FullName();
        }
        set(v) {
            return try! set_FullName(value: v!);
        }
    }
    /**
    
            Gets or set the generated unique identifier for this .
            

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    /**
    
            Gets or sets the  to invoke.
            

    */
    open var MethodInfo : Optional<dotnet.System.Reflection.MethodInfo> {
        get {
            return try! get_MethodInfo();
        }
        set(v) {
            return try! set_MethodInfo(value: v!);
        }
    }
    /**
    
            Gets or sets the parameters associated with the method described by .
            

    */
    open var Parameters : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<dotnet.System.Reflection.ParameterInfo>> {
        get {
            return try! get_Parameters();
        }
        set(v) {
            return try! set_Parameters(value: v!);
        }
    }
    /**
    
            Gets or sets the short name.
            

    */
    open var ShortName : Optional<dotnet.System.String> {
        get {
            return try! get_ShortName();
        }
        set(v) {
            return try! set_ShortName(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var TypeInfo : Optional<dotnet.System.Reflection.TypeInfo> {
        get {
            return try! get_TypeInfo();
        }
        set(v) {
            return try! set_TypeInfo(value: v!);
        }
    }
} // ViewComponentDescriptor


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection
    /**
    
            A cached collection of .
            

    */
open class ViewComponentDescriptorCollection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptorCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>, System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor},System.Int32)
    /**
    
            Initializes a new instance of the .
            

    - Parameter items: The result of view component discovery
    - Parameter version: The unique version of discovered view components.
    */
    public init(items : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>>, version : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptorCollection_ctor_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor__i32(&__thrown, (items?.get_handle()), version);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor> get_Items()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection.get_Items
    open func get_Items() throws -> Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptorCollection_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptor___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Version()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptorCollection.get_Version
    open func get_Version() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentDescriptorCollection_i32__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Returns the cached .
            

    */
    open var Items : Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentDescriptor>> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            Returns the unique version of the currently cached items.
            

    */
    open var Version : Swift.Int32 {
        get {
            return try! get_Version();
        }
    }
} // ViewComponentDescriptorCollection


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature
    /**
    
            The list of view component types in an MVC application.The  can be populated
            using the  that is available during startup at 
            and  or at a later stage by requiring the 
            as a dependency in a component.
            

    */
open class ViewComponentFeature
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Reflection.TypeInfo> get_ViewComponents()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature.get_ViewComponents
    open func get_ViewComponents() throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeature_System_Collections_Generic_IList_System_Reflection_TypeInfo___get_ViewComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the list of view component types in an MVC application.
            

    */
    open var ViewComponents : Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.TypeInfo>> {
        get {
            return try! get_ViewComponents();
        }
    }
} // ViewComponentFeature


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeatureProvider
    /**
    
            Discovers view components from a list of  instances.
            

    */
open class ViewComponentFeatureProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ApplicationParts_IApplicationFeatureProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeatureProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeatureProvider.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeatureProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>, Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeatureProvider.PopulateFeature(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart},Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature)
    /**
    */
    open /* method final */ func PopulateFeature(parts : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart>>, feature : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentFeature>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewComponentFeatureProvider_void__PopulateFeature_0__2__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ApplicationParts_ApplicationPart__ViewComponentFeature(&__thrown, self.get_handle(), (parts?.get_handle()), feature?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ViewComponentFeatureProvider


// type: Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult
    /**
    
            A  that renders a partial view when executed.
            

    */
open class ViewViewComponentResult
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_IViewComponentResult
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.Execute(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Locates and renders a view specified by . If  is null,
            then the view name searched for is"Default".
            

    - Parameter context: The  for the current component execution.
    */
    open /* method final */ func Execute(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_void__Execute_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.ExecuteAsync(Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext)
    /**
    
            Locates and renders a view specified by . If  is null,
            then the view name searched for is"Default".
            

    - Parameter context: The  for the current component execution.
    - Returns: A  which will complete when view rendering is completed.

    */
    open /* method final */ func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponents.ViewComponentContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_Task__ExecuteAsync_0__1__ViewComponentContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.get_ViewName
    open func get_ViewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.set_ViewName(System.String)
    open func set_ViewName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_void__set_ViewName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.get_ViewData
    open func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.set_ViewData(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    open func set_ViewData(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_void__set_ViewData_0__1__ViewDataDictionary(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.get_TempData
    open func get_TempData() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.set_TempData(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary)
    open func set_TempData(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_void__set_TempData_0__1__ITempDataDictionary(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine get_ViewEngine()
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.get_ViewEngine
    open func get_ViewEngine() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_IViewEngine__get_ViewEngine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
// docid: M:Microsoft.AspNetCore.Mvc.ViewComponents.ViewViewComponentResult.set_ViewEngine(Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine)
    open func set_ViewEngine(value : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewComponents_ViewViewComponentResult_void__set_ViewEngine_0__1__IViewEngine(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the  instance.
            

    */
    open var TempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary {
        get {
            return try! get_TempData();
        }
        set(v) {
            return try! set_TempData(value: v);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        get {
            return try! get_ViewData();
        }
        set(v) {
            return try! set_ViewData(value: v!);
        }
    }
    /**
    
            Gets or sets the .
            

    */
    open var ViewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        get {
            return try! get_ViewEngine();
        }
        set(v) {
            return try! set_ViewEngine(value: v!);
        }
    }
    /**
    
            Gets or sets the view name.
            

    */
    open var ViewName : Optional<dotnet.System.String> {
        get {
            return try! get_ViewName();
        }
        set(v) {
            return try! set_ViewName(value: v!);
        }
    }
} // ViewViewComponentResult


}

// Microsoft.AspNetCore.Mvc.ViewEngines
extension Microsoft.AspNetCore.Mvc.ViewEngines {
// type: Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine
    /**
    */
open class CompositeViewEngine
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewEngines_ICompositeViewEngine,
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewEngines_CompositeViewEngine_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions})
    /**
    
            Initializes a new instance of .
            

    - Parameter optionsAccessor: The options accessor for .
    */
    public init(optionsAccessor : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewEngines_CompositeViewEngine_ctor_0__1__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions_(&__thrown, optionsAccessor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(Microsoft.AspNetCore.Mvc.ActionContext, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.Boolean)
    /**
    */
    open /* method final */ func FindView(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewName : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_CompositeViewEngine_ViewEngineResult__FindView_0__3__ActionContext_String_bool(&__thrown, self.get_handle(), context.get_handle(), viewName.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult GetView(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.GetView(System.String,System.String,System.Boolean)
    /**
    */
    open /* method final */ func GetView(executingFilePath : Optional<dotnet.System.String>, viewPath : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_CompositeViewEngine_ViewEngineResult__GetView_0__3__String_String_bool(&__thrown, self.get_handle(), executingFilePath?.get_handle() ?? nil, viewPath.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> get_ViewEngines()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.get_ViewEngines
    open /* method final */ func get_ViewEngines() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_CompositeViewEngine_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine___get_ViewEngines_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
    /**
    */
    public var ViewEngines : dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        get {
            return try! get_ViewEngines();
        }
    }
} // CompositeViewEngine


// type: Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine
    /**
    
            Represents an  that delegates to one of a collection of view engines.
            

    */
open class ICompositeViewEngine
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewEngines_ICompositeViewEngine,
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewEngines_ICompositeViewEngine_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> get_ViewEngines()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine.get_ViewEngines
    open func get_ViewEngines() throws -> dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ICompositeViewEngine_System_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine___get_ViewEngines_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyList_1(hndl : __return);
        }
    }
} // ICompositeViewEngine


// type: Microsoft.AspNetCore.Mvc.ViewEngines.IView
    /**
    
            Specifies the contract for a view.
            

    */
open class IView
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewEngines_IView
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewEngines_IView_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task RenderAsync(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.IView.RenderAsync(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Asynchronously renders the view using the specified .
            

    - Parameter context: The .
    - Returns: A  that on completion renders the view.

    */
    open func RenderAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_IView_Task__RenderAsync_0__1__ViewContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.IView.get_Path
    open func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_IView_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IView


// type: Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine
    /**
    
            Defines the contract for a view engine.
            

    */
open class IViewEngine
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(Microsoft.AspNetCore.Mvc.ActionContext, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine.FindView(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.Boolean)
    /**
    
            Finds the view with the given  using view locations and information from the
            .
            

    - Parameter context: The .
    - Parameter viewName: The name or path of the view that is rendered to the response.
    - Parameter isMainPage: Determines if the page being found is the main page for an action.
    - Returns: The  of locating the view.

    */
    open func FindView(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewName : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine_ViewEngineResult__FindView_0__3__ActionContext_String_bool(&__thrown, self.get_handle(), context.get_handle(), viewName.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult GetView(System.String, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.IViewEngine.GetView(System.String,System.String,System.Boolean)
    /**
    
            Gets the view with the given , relative to 
            unless  is already absolute.
            

    - Parameter executingFilePath: The absolute path to the currently-executing view, if any.
    - Parameter viewPath: The path to the view.
    - Parameter isMainPage: Determines if the page being found is the main page for an action.
    - Returns: The  of locating the view.

    */
    open func GetView(executingFilePath : Optional<dotnet.System.String>, viewPath : dotnet.System.String, isMainPage : Bool) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine_ViewEngineResult__GetView_0__3__String_String_bool(&__thrown, self.get_handle(), executingFilePath?.get_handle() ?? nil, viewPath.get_handle(), Swift.Int32(isMainPage ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
} // IViewEngine


// type: Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult
    /**
    
            Represents the result of a view engine.
            

    */
open class ViewEngineResult
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult NotFound(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.NotFound(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Returns a result that represents when a view is not found.
            

    - Parameter viewName: The name of the view.
    - Parameter searchedLocations: The locations searched.
    - Returns: The not found result.

    */
    open class func NotFound(viewName : dotnet.System.String, searchedLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_ViewEngineResult__NotFound_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, viewName.get_handle(), searchedLocations.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult Found(System.String, Microsoft.AspNetCore.Mvc.ViewEngines.IView)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.Found(System.String,Microsoft.AspNetCore.Mvc.ViewEngines.IView)
    /**
    
            Returns a result when a view is found.
            

    - Parameter viewName: The name of the view.
    - Parameter view: The .
    - Returns: The found result.

    */
    open class func Found(viewName : dotnet.System.String, view : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_ViewEngineResult__Found_0__2__String_IView(&__thrown, viewName.get_handle(), view.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult EnsureSuccessful(System.Collections.Generic.IEnumerable<System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.EnsureSuccessful(System.Collections.Generic.IEnumerable{System.String})
    /**
    
            Ensure this  was successful.
            

    - Parameter originalLocations: 
            Additional  to include in the thrown 
            if  is false.
            
    - Returns: This  if  is true.

    */
    open func EnsureSuccessful(originalLocations : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>>) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_ViewEngineResult__EnsureSuccessful_0__1__System_Collections_Generic_IEnumerable_string_(&__thrown, self.get_handle(), (originalLocations?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_SearchedLocations()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.get_SearchedLocations
    open func get_SearchedLocations() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_System_Collections_Generic_IEnumerable_string___get_SearchedLocations_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewEngines.IView get_View()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.get_View
    open func get_View() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_IView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ViewName()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.get_ViewName
    open func get_ViewName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_String__get_ViewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Success()
// docid: M:Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.get_Success
    open func get_Success() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewEngines_ViewEngineResult_bool__get_Success_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            The list of locations searched.
            

    */
    open var SearchedLocations : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String> {
        get {
            return try! get_SearchedLocations();
        }
    }
    /**
    
            Whether the result was successful
            

    */
    open var Success : Bool {
        get {
            return try! get_Success();
        }
    }
    /**
    
            The .
            

    */
    open var View : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView> {
        get {
            return try! get_View();
        }
    }
    /**
    
            Gets or sets the name of the view.
            

    */
    open var ViewName : dotnet.System.String {
        get {
            return try! get_ViewName();
        }
    }
} // ViewEngineResult


}

// Microsoft.AspNetCore.Mvc.ViewFeatures
extension Microsoft.AspNetCore.Mvc.ViewFeatures {
// type: Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions
public struct AntiforgeryExtensions {
    // Microsoft.AspNetCore.Html.IHtmlContent GetHtml(Microsoft.AspNetCore.Antiforgery.IAntiforgery, Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions.GetHtml(Microsoft.AspNetCore.Antiforgery.IAntiforgery,Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Generates an <input type="hidden"> element for an antiforgery token.
            

    - Parameter antiforgery: The  instance.
    - Parameter httpContext: The  associated with the current request.
    - Returns: 
            A  containing an <input type="hidden"> element. This element should be put
            inside a <form>.
            

    */
    public static func GetHtml(antiforgery : aspnetcore.Microsoft.AspNetCore.Antiforgery.IAntiforgery, httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AntiforgeryExtensions_IHtmlContent__GetHtml_0__2__IAntiforgery_HttpContext(&__thrown, antiforgery.get_handle(), httpContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __return);
        }
    }
} // AntiforgeryExtensions


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary
    /**
    
            A dictionary for HTML attributes.
            

    */
open class AttributeDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
    /**
    */
    open /* method final */ func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_string_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Add(System.String,System.String)
    /**
    */
    open /* method final */ func Add(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_void__Add_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
    /**
    */
    open /* method final */ func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_string_string_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.String,System.String>[], System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_string_string_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.GetEnumerator
    /**
    */
    open func GetEnumerator() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_AttributeDictionary_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary_Enumerator(hndl : __return);
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
    /**
    */
    open /* method final */ func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_string_string_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Remove(System.String)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.TryGetValue(System.String,System.String@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__TryGetValue_0__2__String_outString(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.String(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_System_Collections_Generic_ICollection_string___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_String__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.set_Item(System.String,System.String)
    open /* method final */ func set_Item(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Values();
        }
    }
} // AttributeDictionary


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary+Enumerator
// boxed value type
    /**
    
            An enumerator for .
            

    */
public final class AttributeDictionary_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Current();
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary)
    /**
    
            Creates a new .
            

    - Parameter attributes: The .
    */
    public init(attributes : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_ctor_0__1__AttributeDictionary(&__thrown, attributes.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator.Dispose
    /**
    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator.MoveNext
    /**
    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator.Reset
    /**
    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.String> get_Current()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.AttributeDictionary.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_AttributeDictionary_Enumerator_System_Collections_Generic_KeyValuePair_string_string___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // AttributeDictionary_Enumerator


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider
    /**
    
            Provides data from cookie to the current  object.
            

    */
open class CookieTempDataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_CookieTempDataProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String CookieName
    /**
    
            The name of the cookie.
            

    */
    open class var CookieName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_CookieTempDataProvider_get_CookieName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>, Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions},Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer)
    /**
    
            Initializes a new instance of .
            

    - Parameter dataProtectionProvider: The .
    - Parameter loggerFactory: The .
    - Parameter options: The .
    - Parameter tempDataSerializer: The .
    */
    public init(dataProtectionProvider : Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider>, loggerFactory : Optional<aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory>, options : Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>>, tempDataSerializer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_CookieTempDataProvider_ctor_0__4__IDataProtectionProvider_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions__TempDataSerializer(&__thrown, dataProtectionProvider?.get_handle() ?? nil, loggerFactory?.get_handle() ?? nil, (options?.get_handle()), tempDataSerializer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.Object> LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider.LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Loads the temp data from the request.
            

    - Parameter context: The .
    - Returns: The temp data.

    */
    open /* method final */ func LoadTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_CookieTempDataProvider_System_Collections_Generic_IDictionary_string_object___LoadTempData_0__1__HttpContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SaveTempData(Microsoft.AspNetCore.Http.HttpContext, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider.SaveTempData(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Save the temp data to the request.
            

    - Parameter context: The .
    - Parameter values: The values.
    */
    open /* method final */ func SaveTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, values : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_CookieTempDataProvider_void__SaveTempData_0__2__HttpContext_System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), context?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CookieTempDataProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator
    /**
    
            Default implementation of .
            

    */
open class DefaultHtmlGenerator
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Antiforgery.IAntiforgery, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.#ctor(Microsoft.AspNetCore.Antiforgery.IAntiforgery,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter antiforgery: The  instance which is used to generate antiforgery
            tokens.
    - Parameter optionsAccessor: The accessor for .
    - Parameter metadataProvider: The .
    - Parameter urlHelperFactory: The .
    - Parameter htmlEncoder: The .
    - Parameter validationAttributeProvider: The .
    */
    public init(antiforgery : Optional<aspnetcore.Microsoft.AspNetCore.Antiforgery.IAntiforgery>, optionsAccessor : Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>, metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, urlHelperFactory : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, validationAttributeProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_ctor_0__6__IAntiforgery_Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__IModelMetadataProvider_IUrlHelperFactory_HtmlEncoder_ValidationHtmlAttributeProvider(&__thrown, antiforgery?.get_handle() ?? nil, (optionsAccessor?.get_handle()), metadataProvider?.get_handle() ?? nil, urlHelperFactory?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, validationAttributeProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.Encode(System.String)
    /**
    */
    open /* method final */ func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_String__Encode_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.Encode(System.Object)
    /**
    */
    open /* method final */ func Encode(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_String__Encode_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.FormatValue(System.Object,System.String)
    /**
    */
    open /* method final */ func FormatValue(value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_String__FormatValue_0__2__Object_String(&__thrown, self.get_handle(), value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateActionLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateActionLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    */
    open func GenerateActionLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateActionLink_0__9__ViewContext_String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePageLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GeneratePageLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    */
    open func GeneratePageLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GeneratePageLink_0__9__ViewContext_String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent GenerateAntiforgery(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateAntiforgery(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open func GenerateAntiforgery(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_IHtmlContent__GenerateAntiforgery_0__1__ViewContext(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateCheckBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateCheckBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open func GenerateCheckBox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateCheckBox_0__5__ViewContext_ModelExplorer_String_System_Nullable_bool__Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateHiddenForCheckbox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateHiddenForCheckbox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String)
    /**
    */
    open func GenerateHiddenForCheckbox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateHiddenForCheckbox_0__3__ViewContext_ModelExplorer_String(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.Object,System.String,System.Object)
    /**
    */
    open func GenerateForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateForm_0__6__ViewContext_String_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePageForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.Object, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GeneratePageForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.Object,System.String,System.String,System.Object)
    /**
    */
    open func GeneratePageForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GeneratePageForm_0__7__ViewContext_String_String_Object_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateRouteForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.Object,System.String,System.Object)
    /**
    */
    open /* method final */ func GenerateRouteForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateRouteForm_0__5__ViewContext_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateHidden(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateHidden(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Boolean,System.Object)
    /**
    */
    open func GenerateHidden(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, useViewData : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateHidden_0__6__ViewContext_ModelExplorer_String_Object_bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, Swift.Int32(useViewData ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateLabel(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateLabel(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Object)
    /**
    */
    open func GenerateLabel(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateLabel_0__5__ViewContext_ModelExplorer_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePassword(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GeneratePassword(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Object)
    /**
    */
    open func GeneratePassword(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GeneratePassword_0__5__ViewContext_ModelExplorer_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRadioButton(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateRadioButton(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open func GenerateRadioButton(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateRadioButton_0__6__ViewContext_ModelExplorer_String_Object_System_Nullable_bool__Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateRouteLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    */
    open func GenerateRouteLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateRouteLink_0__8__ViewContext_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostName?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Boolean,System.Object)
    /**
    */
    open /* method final */ func GenerateSelect(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, optionLabel : Optional<dotnet.System.String>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, allowMultiple : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateSelect_0__7__ViewContext_ModelExplorer_String_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, optionLabel?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), Swift.Int32(allowMultiple ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Collections.Generic.ICollection<System.String>, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Collections.Generic.ICollection{System.String},System.Boolean,System.Object)
    /**
    */
    open func GenerateSelect(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, optionLabel : Optional<dotnet.System.String>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, currentValues : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>>, allowMultiple : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateSelect_0__8__ViewContext_ModelExplorer_String_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__System_Collections_Generic_ICollection_string__bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, optionLabel?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), (currentValues?.get_handle()), Swift.Int32(allowMultiple ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateTextArea(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateTextArea(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Int32,System.Int32,System.Object)
    /**
    */
    open func GenerateTextArea(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateTextArea_0__6__ViewContext_ModelExplorer_String_i32_i32_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)
    /**
    */
    open func GenerateTextBox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateTextBox_0__6__ViewContext_ModelExplorer_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.String,System.Object)
    /**
    */
    open func GenerateValidationMessage(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateValidationMessage_0__6__ViewContext_ModelExplorer_String_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, message?.get_handle() ?? nil, tag?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, bool, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Boolean,System.String,System.String,System.Object)
    /**
    */
    open func GenerateValidationSummary(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, headerTag : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_TagBuilder__GenerateValidationSummary_0__5__ViewContext_bool_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, headerTag?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.ICollection<System.String> GetCurrentValues(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GetCurrentValues(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Boolean)
    /**
    */
    open func GetCurrentValues(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, allowMultiple : Bool) throws -> Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_System_Collections_Generic_ICollection_string___GetCurrentValues_0__4__ViewContext_ModelExplorer_String_bool(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, Swift.Int32(allowMultiple ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.ICollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent GenerateGroupsAndOptions(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.GenerateGroupsAndOptions(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    */
    open /* method final */ func GenerateGroupsAndOptions(optionLabel : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_IHtmlContent__GenerateGroupsAndOptions_0__2__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(&__thrown, self.get_handle(), optionLabel?.get_handle() ?? nil, (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_IdAttributeDotReplacement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator.get_IdAttributeDotReplacement
    open /* method final */ func get_IdAttributeDotReplacement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGenerator_String__get_IdAttributeDotReplacement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public var IdAttributeDotReplacement : Optional<dotnet.System.String> {
        get {
            return try! get_IdAttributeDotReplacement();
        }
    }
} // DefaultHtmlGenerator


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions
public struct DefaultHtmlGeneratorExtensions {
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.Object,System.String,System.Object)
    /**
    
            Generates a form.
            

    - Parameter generator: The .
    - Parameter viewContext: The .
    - Parameter actionName: The action name.
    - Parameter controllerName: The name of the controller.
    - Parameter fragment: The fragment.
    - Parameter routeValues: The route values.
    - Parameter method: The form method.
    - Parameter htmlAttributes: The html attributes.
    - Returns: 

    */
    public static func GenerateForm(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>, viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGeneratorExtensions_TagBuilder__GenerateForm_0__8__IHtmlGenerator_ViewContext_String_String_String_Object_String_Object(&__thrown, generator?.get_handle() ?? nil, viewContext?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.Object, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateRouteForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.Object,System.String,System.String,System.Object)
    /**
    
            Generates a form for a route.
            

    - Parameter generator: The .
    - Parameter viewContext: The .
    - Parameter routeName: The nam eof the route.
    - Parameter routeValues: The route values.
    - Parameter fragment: The fragment.
    - Parameter method: The form method.
    - Parameter htmlAttributes: The html attributes.
    - Returns: The .

    */
    public static func GenerateRouteForm(generator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>, viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultHtmlGeneratorExtensions_TagBuilder__GenerateRouteForm_0__7__IHtmlGenerator_ViewContext_String_Object_String_String_Object(&__thrown, generator?.get_handle() ?? nil, viewContext?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DefaultHtmlGeneratorExtensions


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultValidationHtmlAttributeProvider
    /**
    
            Default implementation of .
            

    */
open class DefaultValidationHtmlAttributeProvider
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultValidationHtmlAttributeProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultValidationHtmlAttributeProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache)
    /**
    
            Initializes a new  instance.
            

    - Parameter optionsAccessor: The accessor for .
    - Parameter metadataProvider: The .
    - Parameter clientValidatorCache: The  that provides
            a list of s.
    */
    public init(optionsAccessor : Optional<aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>, metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, clientValidatorCache : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultValidationHtmlAttributeProvider_ctor_0__3__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__IModelMetadataProvider_ClientValidatorCache(&__thrown, (optionsAccessor?.get_handle()), metadataProvider?.get_handle() ?? nil, clientValidatorCache?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultValidationHtmlAttributeProvider.AddValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    */
    open override func AddValidationAttributes(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, attributes : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_DefaultValidationHtmlAttributeProvider_void__AddValidationAttributes_0__3__ViewContext_ModelExplorer_System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DefaultValidationHtmlAttributeProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
    /**
    
            Information about the current <form>.
            

    */
open class FormContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool RenderedField(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String)
    /**
    
            Returns an indication based on  that the given  has
            been rendered in this <form>.
            

    - Parameter fieldName: The full HTML name of a field that may have been rendered.
    - Returns: 
            true if the given  has been rendered; false otherwise.
            

    */
    open func RenderedField(fieldName : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_bool__RenderedField_0__1__String(&__thrown, self.get_handle(), fieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RenderedField(System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String,System.Boolean)
    /**
    
            Updates  to indicate  has been rendered in this
            <form>.
            

    - Parameter fieldName: The full HTML name of a field that may have been rendered.
    - Parameter value: If true, the given  has been rendered.
    */
    open func RenderedField(fieldName : Optional<dotnet.System.String>, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_void__RenderedField_0__2__String_bool(&__thrown, self.get_handle(), fieldName?.get_handle() ?? nil, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.Object> get_FormData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_FormData
    open func get_FormData() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_System_Collections_Generic_IDictionary_string_object___get_FormData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasAntiforgeryToken()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_HasAntiforgeryToken
    open func get_HasAntiforgeryToken() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_bool__get_HasAntiforgeryToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HasAntiforgeryToken(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.set_HasAntiforgeryToken(System.Boolean)
    open func set_HasAntiforgeryToken(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_void__set_HasAntiforgeryToken_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasFormData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_HasFormData
    open func get_HasFormData() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_bool__get_HasFormData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasEndOfFormContent()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_HasEndOfFormContent
    open func get_HasEndOfFormContent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_bool__get_HasEndOfFormContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<Microsoft.AspNetCore.Html.IHtmlContent> get_EndOfFormContent()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_EndOfFormContent
    open func get_EndOfFormContent() throws -> Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_System_Collections_Generic_IList_Microsoft_AspNetCore_Html_IHtmlContent___get_EndOfFormContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_CanRenderAtEndOfForm()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.get_CanRenderAtEndOfForm
    open func get_CanRenderAtEndOfForm() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_bool__get_CanRenderAtEndOfForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CanRenderAtEndOfForm(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.set_CanRenderAtEndOfForm(System.Boolean)
    open func set_CanRenderAtEndOfForm(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_FormContext_void__set_CanRenderAtEndOfForm_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets an indication whether extra content can be rendered at the end of the content of this
            <form> element. That is,  will be rendered just prior to the
            </form> end tag.
            

    */
    open var CanRenderAtEndOfForm : Bool {
        get {
            return try! get_CanRenderAtEndOfForm();
        }
        set(v) {
            return try! set_CanRenderAtEndOfForm(value: v);
        }
    }
    /**
    
            Gets an  collection that should be rendered just prior to the next </form>
            end tag. Do not use unless  is true.
            

    */
    open var EndOfFormContent : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        get {
            return try! get_EndOfFormContent();
        }
    }
    /**
    
            Gets a property bag for any information you wish to associate with a <form/> in an
             implementation or extension method.
            

    */
    open var FormData : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_FormData();
        }
    }
    /**
    
            Gets or sets an indication the current <form> element contains an antiforgery token. Do not use
            unless  is true.
            

    */
    open var HasAntiforgeryToken : Bool {
        get {
            return try! get_HasAntiforgeryToken();
        }
        set(v) {
            return try! set_HasAntiforgeryToken(value: v);
        }
    }
    /**
    
            Gets an indication the  collection has been used and likely contains entries.
            

    */
    open var HasEndOfFormContent : Bool {
        get {
            return try! get_HasEndOfFormContent();
        }
    }
    /**
    
            Gets an indication the  property bag has been used and likely contains entries.
            

    */
    open var HasFormData : Bool {
        get {
            return try! get_HasFormData();
        }
    }
} // FormContext


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper
    /**
    
            Default implementation of .
            

    */
open class HtmlHelper
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String ValidationInputCssClassName
    /**
    
            CSS class name for input validation.
            

    */
    open class var ValidationInputCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationInputCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ValidationInputValidCssClassName
    /**
    
            CSS class name for valid input validation.
            

    */
    open class var ValidationInputValidCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationInputValidCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ValidationMessageCssClassName
    /**
    
            CSS class name for field validation error.
            

    */
    open class var ValidationMessageCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationMessageCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ValidationMessageValidCssClassName
    /**
    
            CSS class name for valid field validation.
            

    */
    open class var ValidationMessageValidCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationMessageValidCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ValidationSummaryCssClassName
    /**
    
            CSS class name for validation summary errors.
            

    */
    open class var ValidationSummaryCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationSummaryCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String ValidationSummaryValidCssClassName
    /**
    
            CSS class name for valid validation summary.
            

    */
    open class var ValidationSummaryValidCssClassName : Optional<dotnet.System.String> {
        get {
        let __h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_get_ValidationSummaryValidCssClassName();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope, System.Text.Encodings.Web.HtmlEncoder, System.Text.Encodings.Web.UrlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope,System.Text.Encodings.Web.HtmlEncoder,System.Text.Encodings.Web.UrlEncoder)
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init(htmlGenerator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>, viewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine>, metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, bufferScope : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, urlEncoder : Optional<dotnet.System.Text.Encodings.Web.UrlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_ctor_0__6__IHtmlGenerator_ICompositeViewEngine_IModelMetadataProvider_IViewBufferScope_HtmlEncoder_UrlEncoder(&__thrown, htmlGenerator?.get_handle() ?? nil, viewEngine?.get_handle() ?? nil, metadataProvider?.get_handle() ?? nil, bufferScope?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, urlEncoder?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.Object> ObjectToDictionary(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ObjectToDictionary(System.Object)
    /**
    
             Creates a dictionary from an object, by adding each public instance property as a key with its associated
             value to the dictionary. It will expose public properties from derived types as well. This is typically
             used with objects of an anonymous type.
            
             If the  is already an  instance, then it
             is returned as-is.
             
             new { data_name="value" } will translate to the entry { "data_name", "value" }
             in the resulting dictionary.
             
             

    - Parameter value: The  to be converted.
    - Returns: The created dictionary of property names and property values.

    */
    open class func ObjectToDictionary(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_System_Collections_Generic_IDictionary_string_object___ObjectToDictionary_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.Object> AnonymousObjectToHtmlAttributes(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)
    /**
    
            Creates a dictionary of HTML attributes from the input object,
            translating underscores to dashes in each public instance property.
            

    - Parameter htmlAttributes: Anonymous object describing HTML attributes.
    - Returns: A dictionary that represents HTML attributes.

    */
    open class func AnonymousObjectToHtmlAttributes(htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_System_Collections_Generic_IDictionary_string_object___AnonymousObjectToHtmlAttributes_0__1__Object(&__thrown, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Sets the .
            

    - Parameter viewContext: The context to use.
    */
    open func Contextualize(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_void__Contextualize_0__1__ViewContext(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ActionLink(System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ActionLink(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    */
    open /* method final */ func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__ActionLink_0__8__String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent AntiForgeryToken()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.AntiForgeryToken
    /**
    */
    open /* method final */ func AntiForgeryToken() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__AntiForgeryToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.BeginForm(System.String,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open /* method final */ func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_MvcForm__BeginForm_0__6__String_String_Object_FormMethod_System_Nullable_bool__Object(&__thrown, self.get_handle(), actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value(), (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.BeginRouteForm(System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open /* method final */ func BeginRouteForm(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_MvcForm__BeginRouteForm_0__5__String_Object_FormMethod_System_Nullable_bool__Object(&__thrown, self.get_handle(), routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method.get_value(), (antiforgery != nil) ? System_Int32_box(Swift.Int32(antiforgery! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndForm()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.EndForm
    /**
    */
    open /* method final */ func EndForm() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_void__EndForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBox(System.String, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.CheckBox(System.String,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open /* method final */ func CheckBox(expression : Optional<dotnet.System.String>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__CheckBox_0__3__String_System_Nullable_bool__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Encode(System.String)
    /**
    */
    open /* method final */ func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__Encode_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Encode(System.Object)
    /**
    */
    open /* method final */ func Encode(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__Encode_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.FormatValue(System.Object,System.String)
    /**
    */
    open /* method final */ func FormatValue(value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__FormatValue_0__2__Object_String(&__thrown, self.get_handle(), value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GenerateIdFromName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GenerateIdFromName(System.String)
    /**
    */
    open /* method final */ func GenerateIdFromName(fullName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__GenerateIdFromName_0__1__String(&__thrown, self.get_handle(), fullName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Display(System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Display(System.String,System.String,System.String,System.Object)
    /**
    */
    open /* method final */ func Display(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Display_0__4__String_String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DisplayName(System.String)
    /**
    */
    open /* method final */ func DisplayName(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__DisplayName_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayText(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DisplayText(System.String)
    /**
    */
    open /* method final */ func DisplayText(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__DisplayText_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownList(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.DropDownList(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String,System.Object)
    /**
    */
    open /* method final */ func DropDownList(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__DropDownList_0__4__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (selectList?.get_handle()), optionLabel?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Editor(System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Editor(System.String,System.String,System.String,System.Object)
    /**
    */
    open /* method final */ func Editor(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Editor_0__4__String_String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEnumSelectList<TEnum>()
    // System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> GetEnumSelectList(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetEnumSelectList(System.Type)
    /**
    */
    open /* method final */ func GetEnumSelectList(enumType : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem___GetEnumSelectList_0__1__Type(&__thrown, self.get_handle(), enumType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Hidden(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Hidden(System.String,System.Object,System.Object)
    /**
    */
    open /* method final */ func Hidden(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Hidden_0__3__String_Object_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Id(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Id(System.String)
    /**
    */
    open /* method final */ func Id(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__Id_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Label(System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Label(System.String,System.String,System.Object)
    /**
    */
    open /* method final */ func Label(expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Label_0__3__String_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBox(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ListBox(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    */
    open /* method final */ func ListBox(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__ListBox_0__3__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Name(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Name(System.String)
    /**
    */
    open /* method final */ func Name(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__Name_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    */
    open /* method final */ func PartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_System_Threading_Tasks_Task_Microsoft_AspNetCore_Html_IHtmlContent___PartialAsync_0__3__String_Object_ViewDataDictionary(&__thrown, self.get_handle(), partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task RenderPartialAsync(System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RenderPartialAsync(System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    */
    open /* method final */ func RenderPartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_Task__RenderPartialAsync_0__3__String_Object_ViewDataDictionary(&__thrown, self.get_handle(), partialViewName?.get_handle() ?? nil, model?.get_handle() ?? nil, viewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Password(System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Password(System.String,System.Object,System.Object)
    /**
    */
    open /* method final */ func Password(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Password_0__3__String_Object_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButton(System.String, System.Object, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RadioButton(System.String,System.Object,System.Nullable{System.Boolean},System.Object)
    /**
    */
    open /* method final */ func RadioButton(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__RadioButton_0__4__String_Object_System_Nullable_bool__Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Raw(System.String)
    /**
    */
    open /* method final */ func Raw(value : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Raw_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent Raw(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Raw(System.Object)
    /**
    */
    open /* method final */ func Raw(value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__Raw_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RouteLink(System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RouteLink(System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    */
    open /* method final */ func RouteLink(linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__RouteLink_0__7__String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostName?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(System.String, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationMessage(System.String,System.String,System.Object,System.String)
    /**
    */
    open /* method final */ func ValidationMessage(expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__ValidationMessage_0__4__String_String_Object_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(bool, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.ValidationSummary(System.Boolean,System.String,System.Object,System.String)
    /**
    */
    open /* method final */ func ValidationSummary(excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__ValidationSummary_0__4__bool_String_Object_String(&__thrown, self.get_handle(), Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetFormMethodString(Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.GetFormMethodString(Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
    /**
    
            Returns the HTTP method that handles form input (GET or POST) as a string.
            

    - Parameter method: The HTTP method that handles the form.
    - Returns: The form method string, either "get" or "post".

    */
    open class func GetFormMethodString(method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__GetFormMethodString_0__1__FormMethod(&__thrown, method.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextArea(System.String, System.String, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.TextArea(System.String,System.String,System.Int32,System.Int32,System.Object)
    /**
    */
    open /* method final */ func TextArea(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__TextArea_0__5__String_String_i32_i32_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBox(System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.TextBox(System.String,System.Object,System.String,System.Object)
    /**
    */
    open /* method final */ func TextBox(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IHtmlContent__TextBox_0__4__String_Object_String_Object(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, value?.get_handle() ?? nil, format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Value(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.Value(System.String,System.String)
    /**
    */
    open /* method final */ func Value(expression : Optional<dotnet.System.String>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__Value_0__2__String_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode get_Html5DateRenderingMode()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_Html5DateRenderingMode
    open /* method final */ func get_Html5DateRenderingMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_Html5DateRenderingMode__get_Html5DateRenderingMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
    open /* method final */ func set_Html5DateRenderingMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_void__set_Html5DateRenderingMode_0__1__Html5DateRenderingMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_IdAttributeDotReplacement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_IdAttributeDotReplacement
    open /* method final */ func get_IdAttributeDotReplacement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_String__get_IdAttributeDotReplacement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.ViewContext get_ViewContext()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_ViewContext
    open /* method final */ func get_ViewContext() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_ViewContext__get_ViewContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_ViewBag()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_ViewBag
    open /* method final */ func get_ViewBag() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_Object__get_ViewBag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_ViewData
    open /* method final */ func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_ViewDataDictionary__get_ViewData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary get_TempData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_TempData
    open /* method final */ func get_TempData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_ITempDataDictionary__get_TempData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.UrlEncoder get_UrlEncoder()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_UrlEncoder
    open /* method final */ func get_UrlEncoder() throws -> Optional<dotnet.System.Text.Encodings.Web.UrlEncoder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_UrlEncoder__get_UrlEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encodings.Web.UrlEncoder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider get_MetadataProvider()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.get_MetadataProvider
    open /* method final */ func get_MetadataProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_IModelMetadataProvider__get_MetadataProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public var Html5DateRenderingMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        get {
            return try! get_Html5DateRenderingMode();
        }
        set(v) {
            return try! set_Html5DateRenderingMode(value: v);
        }
    }
    /**
    */
    public var IdAttributeDotReplacement : Optional<dotnet.System.String> {
        get {
            return try! get_IdAttributeDotReplacement();
        }
    }
    /**
    */
    public var MetadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider> {
        get {
            return try! get_MetadataProvider();
        }
    }
    /**
    */
    public var TempData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary> {
        get {
            return try! get_TempData();
        }
    }
    /**
    */
    public var UrlEncoder : Optional<dotnet.System.Text.Encodings.Web.UrlEncoder> {
        get {
            return try! get_UrlEncoder();
        }
    }
    /**
    */
    public var ViewBag : Optional<dotnet.System.Object> {
        get {
            return try! get_ViewBag();
        }
    }
    /**
    */
    public var ViewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext> {
        get {
            return try! get_ViewContext();
        }
    }
    /**
    */
    public var ViewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary> {
        get {
            return try! get_ViewData();
        }
    }
} // HtmlHelper


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions
    /**
    
            Provides programmatic configuration for the HTML helpers and .
            

    */
open class HtmlHelperOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode get_Html5DateRenderingMode()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_Html5DateRenderingMode
    open func get_Html5DateRenderingMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_Html5DateRenderingMode__get_Html5DateRenderingMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_Html5DateRenderingMode(Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode)
    open func set_Html5DateRenderingMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_Html5DateRenderingMode_0__1__Html5DateRenderingMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_IdAttributeDotReplacement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_IdAttributeDotReplacement
    open func get_IdAttributeDotReplacement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_String__get_IdAttributeDotReplacement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_IdAttributeDotReplacement(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_IdAttributeDotReplacement(System.String)
    open func set_IdAttributeDotReplacement(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_IdAttributeDotReplacement_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ClientValidationEnabled()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_ClientValidationEnabled
    open func get_ClientValidationEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_bool__get_ClientValidationEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ClientValidationEnabled(bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_ClientValidationEnabled(System.Boolean)
    open func set_ClientValidationEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_ClientValidationEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ValidationMessageElement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_ValidationMessageElement
    open func get_ValidationMessageElement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_String__get_ValidationMessageElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ValidationMessageElement(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_ValidationMessageElement(System.String)
    open func set_ValidationMessageElement(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_ValidationMessageElement_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ValidationSummaryMessageElement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_ValidationSummaryMessageElement
    open func get_ValidationSummaryMessageElement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_String__get_ValidationSummaryMessageElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ValidationSummaryMessageElement(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_ValidationSummaryMessageElement(System.String)
    open func set_ValidationSummaryMessageElement(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_ValidationSummaryMessageElement_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode get_CheckBoxHiddenInputRenderMode()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.get_CheckBoxHiddenInputRenderMode
    open func get_CheckBoxHiddenInputRenderMode() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_CheckBoxHiddenInputRenderMode__get_CheckBoxHiddenInputRenderMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode(val: __return);
        }
    }
    // [IsSpecialName] void set_CheckBoxHiddenInputRenderMode(Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelperOptions.set_CheckBoxHiddenInputRenderMode(Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode)
    open func set_CheckBoxHiddenInputRenderMode(value : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelperOptions_void__set_CheckBoxHiddenInputRenderMode_0__1__CheckBoxHiddenInputRenderMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets the way hidden inputs are rendered for checkbox tag helpers and html helpers.
            

    */
    open var CheckBoxHiddenInputRenderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode {
        get {
            return try! get_CheckBoxHiddenInputRenderMode();
        }
        set(v) {
            return try! set_CheckBoxHiddenInputRenderMode(value: v);
        }
    }
    /**
    
            Gets or sets a value that indicates whether client-side validation is enabled.
            

    */
    open var ClientValidationEnabled : Bool {
        get {
            return try! get_ClientValidationEnabled();
        }
        set(v) {
            return try! set_ClientValidationEnabled(value: v);
        }
    }
    /**
    
            Gets or sets the  value.
            

    */
    open var Html5DateRenderingMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.Html5DateRenderingMode {
        get {
            return try! get_Html5DateRenderingMode();
        }
        set(v) {
            return try! set_Html5DateRenderingMode(value: v);
        }
    }
    /**
    
            Gets or sets the  that replaces periods in the ID attribute of an element.
            

    */
    open var IdAttributeDotReplacement : Optional<dotnet.System.String> {
        get {
            return try! get_IdAttributeDotReplacement();
        }
        set(v) {
            return try! set_IdAttributeDotReplacement(value: v!);
        }
    }
    /**
    
            Gets or sets the element name used to wrap a top-level message generated by
             and other overloads.
            

    */
    open var ValidationMessageElement : Optional<dotnet.System.String> {
        get {
            return try! get_ValidationMessageElement();
        }
        set(v) {
            return try! set_ValidationMessageElement(value: v!);
        }
    }
    /**
    
            Gets or sets the element name used to wrap a top-level message generated by
             and other overloads.
            

    */
    open var ValidationSummaryMessageElement : Optional<dotnet.System.String> {
        get {
            return try! get_ValidationSummaryMessageElement();
        }
        set(v) {
            return try! set_ValidationSummaryMessageElement(value: v!);
        }
    }
} // HtmlHelperOptions


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1
    /**
    
            A  for a specific model type.
            

    */
open class HtmlHelper_1<TModel : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_get_type_handle(TModel.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope, System.Text.Encodings.Web.HtmlEncoder, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope,System.Text.Encodings.Web.HtmlEncoder,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider)
    /**
    
            Initializes a new instance of the  class.
            

    */
    public init(htmlGenerator : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator>, viewEngine : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine>, metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, bufferScope : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope>, htmlEncoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>, urlEncoder : Optional<dotnet.System.Text.Encodings.Web.UrlEncoder>, modelExpressionProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_ctor_0__7__IHtmlGenerator_ICompositeViewEngine_IModelMetadataProvider_IViewBufferScope_HtmlEncoder_UrlEncoder_ModelExpressionProvider(TModel.get_type_handle(), &__thrown, htmlGenerator?.get_handle() ?? nil, viewEngine?.get_handle() ?? nil, metadataProvider?.get_handle() ?? nil, bufferScope?.get_handle() ?? nil, htmlEncoder?.get_handle() ?? nil, urlEncoder?.get_handle() ?? nil, modelExpressionProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    */
    open override func Contextualize(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_void__Contextualize_0__1__ViewContext(TModel.get_type_handle(), &__thrown, self.get_handle(), viewContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor(System.Linq.Expressions.Expression<System.Func<TModel,bool>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.CheckBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)
    /**
    */
    open /* method final */ func CheckBoxFor(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,Bool>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__CheckBoxFor_0__2__System_Linq_Expressions_Expression_System_System_Func_TModel_bool___Object(TModel.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String,System.Object)
    /**
    */
    open /* method final */ func DropDownListFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__DropDownListFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), (selectList?.get_handle()), optionLabel?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.DisplayFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)
    /**
    */
    open /* method final */ func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__DisplayFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayNameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.DisplayNameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    */
    open /* method final */ func DisplayNameFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__DisplayNameFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayNameForInnerType<TModelItem, TResult>(System.Linq.Expressions.Expression<System.Func<TModelItem,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.DisplayNameForInnerType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    */
    open /* method final */ func DisplayNameForInnerType<UTModelItem : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModelItem,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__DisplayNameForInnerType_2__1__System_Linq_Expressions_Expression_System_System_Func_UTModelItem_UTResult__(TModel.get_type_handle(), UTModelItem.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String DisplayTextFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.DisplayTextFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    */
    open /* method final */ func DisplayTextFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__DisplayTextFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)
    /**
    */
    open /* method final */ func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__EditorFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), templateName?.get_handle() ?? nil, htmlFieldName?.get_handle() ?? nil, additionalViewData?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent HiddenFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.HiddenFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
    /**
    */
    open /* method final */ func HiddenFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__HiddenFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String IdFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.IdFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    */
    open /* method final */ func IdFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__IdFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.LabelFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)
    /**
    */
    open /* method final */ func LabelFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__LabelFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.ListBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)
    /**
    */
    open /* method final */ func ListBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__ListBoxFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), (selectList?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String NameFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    /**
    */
    open /* method final */ func NameFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__NameFor_1__1__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult__(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent PasswordFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.PasswordFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
    /**
    */
    open /* method final */ func PasswordFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__PasswordFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)
    /**
    */
    open /* method final */ func RadioButtonFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__RadioButtonFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___Object_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)
    /**
    */
    open /* method final */ func TextAreaFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__TextAreaFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___i32_i32_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)
    /**
    */
    open /* method final */ func TextBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__TextBoxFor_1__3__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.ValidationMessageFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object,System.String)
    /**
    */
    open /* method final */ func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_IHtmlContent__ValidationMessageFor_1__4__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String_Object_String(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), message?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil, tag?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ValueFor<TResult>(System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.ValueFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)
    /**
    */
    open /* method final */ func ValueFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_String__ValueFor_1__2__System_Linq_Expressions_Expression_System_System_Func_TModel_UTResult___String(TModel.get_type_handle(), UTResult.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel> get_ViewData()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper`1.get_ViewData
    open /* method final */ override func get_ViewData() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_HtmlHelper_1_Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_TModel___get_ViewData_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    */
    public override var ViewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<TModel>> {
        get {
            return try! get_ViewData();
        }
    }
} // HtmlHelper_1


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IAntiforgeryPolicy
    /**
    
            A marker interface for filters which define a policy for antiforgery token validation.
            

    */
open class IAntiforgeryPolicy
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IAntiforgeryPolicy,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IAntiforgeryPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IAntiforgeryPolicy


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider
    /**
    
            Provides version hash for a specified file.
            

    */
open class IFileVersionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IFileVersionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IFileVersionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String AddFileVersionToPath(Microsoft.AspNetCore.Http.PathString, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IFileVersionProvider.AddFileVersionToPath(Microsoft.AspNetCore.Http.PathString,System.String)
    /**
    
            Adds version query parameter to the specified file path.
            

    - Parameter requestPathBase: The base path for the current HTTP request.
    - Parameter path: The path of the file to which version should be added.
    - Returns: Path containing the version query string.

    */
    open func AddFileVersionToPath(requestPathBase : aspnetcore.Microsoft.AspNetCore.Http.PathString, path : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IFileVersionProvider_String__AddFileVersionToPath_0__2__PathString_String(&__thrown, self.get_handle(), requestPathBase.get_handle(), path?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IFileVersionProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator
    /**
    
            Contract for a service supporting  and ITagHelper implementations.
            

    */
open class IHtmlGenerator
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.Encode(System.String)
    /**
    
            Encodes a value.
            

    - Parameter value: The value to encode.
    - Returns: The encoded value.

    */
    open func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_String__Encode_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Encode(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.Encode(System.Object)
    /**
    
            Encodes a value.
            

    - Parameter value: The value to encode.
    - Returns: The encoded value.

    */
    open func Encode(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_String__Encode_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.FormatValue(System.Object,System.String)
    /**
    
            Format a value.
            

    - Parameter value: The value to format.
    - Parameter format: The format to use.
    - Returns: The formatted value.

    */
    open func FormatValue(value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_String__FormatValue_0__2__Object_String(&__thrown, self.get_handle(), value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateActionLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateActionLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Generate a <a> element for a link to an action.
            

    - Parameter viewContext: The  instance for the current scope.
    - Parameter linkText: The text to insert inside the element.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter protocol: The protocol (scheme) for the generated link.
    - Parameter hostname: The hostname for the generated link.
    - Parameter fragment: The fragment for the generated link.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the <a> element.
            

    */
    open func GenerateActionLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateActionLink_0__9__ViewContext_String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePageLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GeneratePageLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Generate a <a> element for a link to an action.
            

    - Parameter viewContext: The  instance for the current scope.
    - Parameter linkText: The text to insert inside the element.
    - Parameter pageName: The page name.
    - Parameter pageHandler: The page handler.
    - Parameter protocol: The protocol (scheme) for the generated link.
    - Parameter hostname: The hostname for the generated link.
    - Parameter fragment: The fragment for the generated link.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the <a> element.
            

    */
    open func GeneratePageLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostname : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GeneratePageLink_0__9__ViewContext_String_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostname?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent GenerateAntiforgery(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateAntiforgery(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Generate an <input type="hidden".../> element containing an antiforgery token.
            

    - Parameter viewContext: The  instance for the current scope.
    - Returns: 
            An  instance for the <input type="hidden".../> element. Intended to be used
            inside a <form> element.
            

    */
    open func GenerateAntiforgery(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_IHtmlContent__GenerateAntiforgery_0__1__ViewContext(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateCheckBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateCheckBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Nullable{System.Boolean},System.Object)
    /**
    
            Generate a <input type="checkbox".../> element.
            

    - Parameter viewContext: The  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter isChecked: The initial state of the checkbox element.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the <input type="checkbox".../> element.
            

    */
    open func GenerateCheckBox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateCheckBox_0__5__ViewContext_ModelExplorer_String_System_Nullable_bool__Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateHiddenForCheckbox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateHiddenForCheckbox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String)
    /**
    
            Generate an additional <input type="hidden".../> for checkboxes. This addresses scenarios where
            unchecked checkboxes are not sent in the request. Sending a hidden input makes it possible to know that the
            checkbox was present on the page when the request was submitted.
            

    */
    open func GenerateHiddenForCheckbox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateHiddenForCheckbox_0__3__ViewContext_ModelExplorer_String(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.Object,System.String,System.Object)
    /**
    
            Generate a <form> element. When the user submits the form, the action with name
             will process the request.
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter actionName: The name of the action method.
    - Parameter controllerName: The name of the controller.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the </form> element.
            

    */
    open func GenerateForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateForm_0__6__ViewContext_String_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, actionName?.get_handle() ?? nil, controllerName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePageForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.Object, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GeneratePageForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.Object,System.String,System.String,System.Object)
    /**
    
            Generate a <form> element. When the user submits the form, the page with name
             will process the request.
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter pageName: The name of the page.
    - Parameter pageHandler: The page handler to generate a form for.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter fragment: The url fragment.
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the </form> element.
            

    */
    open func GeneratePageForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, pageName : Optional<dotnet.System.String>, pageHandler : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GeneratePageForm_0__7__ViewContext_String_String_Object_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, pageName?.get_handle() ?? nil, pageHandler?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, fragment?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateRouteForm(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.Object,System.String,System.Object)
    /**
    
            Generate a <form> element. The route with name  generates the
            <form>'s action attribute value.
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter routeName: The name of the route.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter method: The HTTP method for processing the form, either GET or POST.
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the </form> element.
            

    */
    open func GenerateRouteForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateRouteForm_0__5__ViewContext_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, routeName?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, method?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateHidden(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateHidden(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Boolean,System.Object)
    /**
    
            Generate a <input type="hidden"> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: The value which is injected into the element
    - Parameter useViewData: Whether to use the ViewData to generate this element
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateHidden(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, useViewData : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateHidden_0__6__ViewContext_ModelExplorer_String_Object_bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, Swift.Int32(useViewData ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateLabel(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateLabel(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Object)
    /**
    
            Generate a <label> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model. Used to set the target of the label.
    - Parameter labelText: Text used to render this label.
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateLabel(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateLabel_0__5__ViewContext_ModelExplorer_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, labelText?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GeneratePassword(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GeneratePassword(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Object)
    /**
    
            Generate a <input type="password"> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: Value used to prefill the checkbox
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GeneratePassword(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GeneratePassword_0__5__ViewContext_ModelExplorer_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRadioButton(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.Nullable<bool>, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateRadioButton(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.Nullable{System.Boolean},System.Object)
    /**
    
            Generate a <input type="radio"> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: value of the given radio button
    - Parameter isChecked: Whether or not the radio button is checked
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateRadioButton(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateRadioButton_0__6__ViewContext_ModelExplorer_String_Object_System_Nullable_bool__Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, (isChecked != nil) ? System_Int32_box(Swift.Int32(isChecked! ? 1 : 0)) : nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.String, System.String, System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateRouteLink(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)
    /**
    
            Generate a <a> element for a link to an action.
            

    - Parameter viewContext: The  instance for the current scope.
    - Parameter linkText: The text to insert inside the element.
    - Parameter routeName: The name of the route to use for link generation.
    - Parameter protocol: The protocol (scheme) for the generated link.
    - Parameter hostName: The hostname for the generated link.
    - Parameter fragment: The fragment for the generated link.
    - Parameter routeValues: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 
            A  instance for the <a> element.
            

    */
    open func GenerateRouteLink(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, protocol_ : Optional<dotnet.System.String>, hostName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateRouteLink_0__8__ViewContext_String_String_String_String_String_Object_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, linkText?.get_handle() ?? nil, routeName?.get_handle() ?? nil, protocol_?.get_handle() ?? nil, hostName?.get_handle() ?? nil, fragment?.get_handle() ?? nil, routeValues?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Boolean,System.Object)
    /**
    
            Generate a <select> element for the .
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: 
             for the . If null, determines validation
            attributes using  and the .
            
    - Parameter optionLabel: Optional text for a default empty <option> element.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, finds this collection at
            ViewContext.ViewData[expression].
            
    - Parameter allowMultiple: 
            If true, includes a multiple attribute in the generated HTML. Otherwise generates a
            single-selection <select> element.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  describing the <select> element.

    */
    open func GenerateSelect(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, optionLabel : Optional<dotnet.System.String>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, allowMultiple : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateSelect_0__7__ViewContext_ModelExplorer_String_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, optionLabel?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), Swift.Int32(allowMultiple ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Collections.Generic.ICollection<System.String>, bool, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateSelect(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Collections.Generic.ICollection{System.String},System.Boolean,System.Object)
    /**
    
            Generate a <select> element for the .
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: 
             for the . If null, determines validation
            attributes using  and the .
            
    - Parameter optionLabel: Optional text for a default empty <option> element.
    - Parameter expression: Expression name, relative to the current model.
    - Parameter selectList: 
            A collection of  objects used to populate the <select> element with
            <optgroup> and <option> elements. If null, finds this collection at
            ViewContext.ViewData[expression].
            
    - Parameter currentValues: 
            An  containing values for <option> elements to select. If
            null, selects <option> elements based on  values in
            .
            
    - Parameter allowMultiple: 
            If true, includes a multiple attribute in the generated HTML. Otherwise generates a
            single-selection <select> element.
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the <select> element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: A new  describing the <select> element.

    */
    open func GenerateSelect(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, optionLabel : Optional<dotnet.System.String>, expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, currentValues : Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>>, allowMultiple : Bool, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateSelect_0__8__ViewContext_ModelExplorer_String_String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem__System_Collections_Generic_ICollection_string__bool_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, optionLabel?.get_handle() ?? nil, expression?.get_handle() ?? nil, (selectList?.get_handle()), (currentValues?.get_handle()), Swift.Int32(allowMultiple ? 1 : 0), htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Html.IHtmlContent GenerateGroupsAndOptions(System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateGroupsAndOptions(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})
    /**
    
            Generates <optgroup> and <option> elements.
            

    - Parameter optionLabel: Optional text for a default empty <option> element.
    - Parameter selectList: 
            A collection of  objects used to generate <optgroup> and <option>
            elements.
            
    - Returns: 
            An  instance for <optgroup> and <option> elements.
            

    */
    open func GenerateGroupsAndOptions(optionLabel : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_IHtmlContent__GenerateGroupsAndOptions_0__2__String_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_Rendering_SelectListItem_(&__thrown, self.get_handle(), optionLabel?.get_handle() ?? nil, (selectList?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateTextArea(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Int32, System.Int32, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextArea(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Int32,System.Int32,System.Object)
    /**
    
            Generates a <textarea> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter rows: 
    - Parameter columns: 
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateTextArea(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, rows : Swift.Int32, columns : Swift.Int32, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateTextArea_0__6__ViewContext_ModelExplorer_String_i32_i32_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, rows, columns, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Object, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)
    /**
    
            Generates a <input type="text"> element
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter value: 
    - Parameter format: 
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateTextBox(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateTextBox_0__6__ViewContext_ModelExplorer_String_Object_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, value?.get_handle() ?? nil, format?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.String,System.String,System.Object)
    /**
    
            Generate a  element if the 's
             contains an error for the .
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter message: 
            The message to be displayed. If null or empty, method extracts an error string from the
             object. Message will always be visible but client-side
            validation may update the associated CSS class.
            
    - Parameter tag: 
            The tag to wrap the  in the generated HTML. Its default value is
            .
            
    - Parameter htmlAttributes: 
            An  that contains the HTML attributes for the element. Alternatively, an
             instance containing the HTML attributes.
            
    - Returns: 

    */
    open func GenerateValidationMessage(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateValidationMessage_0__6__ViewContext_ModelExplorer_String_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, message?.get_handle() ?? nil, tag?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, bool, System.String, System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Boolean,System.String,System.String,System.Object)
    /**
    
            Generates a <div> element which contains a list of validation errors.
            

    - Parameter viewContext: 
    - Parameter excludePropertyErrors: 
    - Parameter message: 
    - Parameter headerTag: 
    - Parameter htmlAttributes: 
            An  that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the . This  is typically
            created using  initializer syntax. Alternatively, an
             instance containing the route parameters.
            
    - Returns: 

    */
    open func GenerateValidationSummary(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, headerTag : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_TagBuilder__GenerateValidationSummary_0__5__ViewContext_bool_String_String_Object(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, Swift.Int32(excludePropertyErrors ? 1 : 0), message?.get_handle() ?? nil, headerTag?.get_handle() ?? nil, htmlAttributes?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.ICollection<System.String> GetCurrentValues(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, bool)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GetCurrentValues(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Boolean)
    /**
    
            Gets the collection of current values for the given .
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: 
             for the . If null, calculates the
             result using .
            
    - Parameter expression: Expression name, relative to the current model.
    - Parameter allowMultiple: 
            If true, require a collection  result. Otherwise, treat result as a
            single value.
            
    - Returns: 
            
            null if no  result is found. Otherwise a
             containing current values for the given
            .
            
            
            Converts the  result to a . If that result is an
             type, instead converts each item in the collection and returns
            them separately.
            
            
            If the  result or the element type is an , returns a
             containing the integer representation of the  value as well
            as all  names for that value. Otherwise returns the default 
            conversion of the value.
            
            

    */
    open func GetCurrentValues(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, allowMultiple : Bool) throws -> Optional<dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_System_Collections_Generic_ICollection_string___GetCurrentValues_0__4__ViewContext_ModelExplorer_String_bool(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, Swift.Int32(allowMultiple ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.ICollection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_IdAttributeDotReplacement()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.get_IdAttributeDotReplacement
    open func get_IdAttributeDotReplacement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator_String__get_IdAttributeDotReplacement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IHtmlGenerator


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider
    /**
    
            Provides  for a Lambda expression.
            

    */
open class IModelExpressionProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IModelExpressionProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IModelExpressionProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression CreateModelExpression<TModel, TValue>(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TValue>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Returns a  instance describing the given .
            

    - Parameter viewData: The  containing the 
            against which  is evaluated. 
    - Parameter expression: An expression to be evaluated against the current model.
    - Returns: A new  instance describing the given .

    */
    open func CreateModelExpression<UTModel : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTValue>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_IModelExpressionProvider_ModelExpression__CreateModelExpression_2__2__Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTValue__(UTModel.get_type_handle(), UTValue.get_type_handle(), &__thrown, self.get_handle(), nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IModelExpressionProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary
    /**
    
            Represents a set of data that persists only from one request to the next.
            

    */
open class ITempDataDictionary
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary
{
    public typealias TKey_IDictionary_2 = dotnet.System.String;
    public typealias TValue_IDictionary_2 = dotnet.System.Object;
    public typealias T_ICollection_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>;
    public typealias T_IEnumerable_1 = dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>;
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Load()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary.Load
    /**
    
            Loads the dictionary by using the registered .
            

    */
    open func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary.Save
    /**
    
            Saves the dictionary by using the registered .
            

    */
    open func Save() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_void__Save_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Keep()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary.Keep
    /**
    
            Marks all keys in the dictionary for retention.
            

    */
    open func Keep() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_void__Keep_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Keep(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary.Keep(System.String)
    /**
    
            Marks the specified key in the dictionary for retention.
            

    - Parameter key: The key to retain in the dictionary.
    */
    open func Keep(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_void__Keep_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Peek(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary.Peek(System.String)
    /**
    
            Returns an object that contains the element that is associated with the specified key,
            without marking the key for deletion.
            

    - Parameter key: The key of the element to return.
    - Returns: An object that contains the element that is associated with the specified key.

    */
    open func Peek(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary_Object__Peek_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ITempDataDictionary


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory
    /**
    
            A factory which provides access to an  instance
            for a request.
            

    */
open class ITempDataDictionaryFactory
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionaryFactory
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionaryFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary GetTempData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory.GetTempData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Gets or creates an  instance for the request associated with the
            given .
            

    - Parameter context: The .
    - Returns: 
            An  instance for the request associated with the given
            .
            

    */
    open func GetTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionaryFactory_ITempDataDictionary__GetTempData_0__1__HttpContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ITempDataDictionaryFactory


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider
    /**
    
            Defines the contract for temporary-data providers that store data that is viewed on the next request.
            

    */
open class ITempDataProvider
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IDictionary<System.String,System.Object> LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider.LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    
            Loads the temporary data.
            

    - Parameter context: The .
    - Returns: The temporary data.

    */
    open func LoadTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider_System_Collections_Generic_IDictionary_string_object___LoadTempData_0__1__HttpContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SaveTempData(Microsoft.AspNetCore.Http.HttpContext, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider.SaveTempData(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Saves the temporary data.
            

    - Parameter context: The .
    - Parameter values: The values to save.
    */
    open func SaveTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, values : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider_void__SaveTempData_0__2__HttpContext_System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), context?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITempDataProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.IViewContextAware
    /**
    
            Contract for contextualizing a property activated by a view with the .
            

    */
open class IViewContextAware
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IViewContextAware.Contextualize(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)
    /**
    
            Contextualizes the instance with the specified .
            

    - Parameter viewContext: The .
    */
    open func Contextualize(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware_void__Contextualize_0__1__ViewContext(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IViewContextAware


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType
    /**
    
            Specifies constants which define an input type.
            

    */
public struct InputType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType CheckBox
    /**
    
            A check box input.
            

    */
    public static var CheckBox : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType(val: Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_CheckBox());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType Hidden
    /**
    
            A hidden input.
            

    */
    public static var Hidden : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType(val: Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_Hidden());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType Password
    /**
    
            A password input.
            

    */
    public static var Password : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType(val: Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_Password());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType Radio
    /**
    
            A radio input.
            

    */
    public static var Radio : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType(val: Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_Radio());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Mvc.ViewFeatures.InputType Text
    /**
    
            A text input.
            

    */
    public static var Text : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.InputType(val: Microsoft_AspNetCore_Mvc_ViewFeatures_InputType_get_Text());
            return __return;
        }
    }
} // InputType


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer
    /**
    
            Associates a model object with it's corresponding .
            

    */
open class ModelExplorer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object)
    /**
    
            Creates a new .
            

    - Parameter metadataProvider: The .
    - Parameter metadata: The .
    - Parameter model: The model object. May be null.
    */
    public init(metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ctor_0__3__IModelMetadataProvider_ModelMetadata_Object(&__thrown, metadataProvider?.get_handle() ?? nil, metadata?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Func<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Func{System.Object,System.Object})
    /**
    
            Creates a new .
            

    - Parameter metadataProvider: The .
    - Parameter container: The container .
    - Parameter metadata: The .
    - Parameter modelAccessor: A model accessor function..
    */
    public init(metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, container : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, modelAccessor : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ctor_0__4__IModelMetadataProvider_ModelExplorer_ModelMetadata_System_Func_object_object_(&__thrown, metadataProvider?.get_handle() ?? nil, container?.get_handle() ?? nil, metadata?.get_handle() ?? nil, (modelAccessor?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object)
    /**
    
            Creates a new .
            

    - Parameter metadataProvider: The .
    - Parameter container: The container .
    - Parameter metadata: The .
    - Parameter model: The model object. May be null.
    */
    public init(metadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, container : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ctor_0__4__IModelMetadataProvider_ModelExplorer_ModelMetadata_Object(&__thrown, metadataProvider?.get_handle() ?? nil, container?.get_handle() ?? nil, metadata?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForModel(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForModel(System.Object)
    /**
    
            Gets a  for the given  value.
            

    - Parameter model: The model value.
    - Returns: A .

    */
    open func GetExplorerForModel(model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForModel_0__1__Object(&__thrown, self.get_handle(), model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForProperty(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForProperty(System.String)
    /**
    
            Gets a  for the property with given , or null if
            the property cannot be found.
            

    - Parameter name: The property name.
    - Returns: A , or null.

    */
    open func GetExplorerForProperty(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForProperty_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForProperty(System.String, System.Func<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForProperty(System.String,System.Func{System.Object,System.Object})
    /**
    
            Gets a  for the property with given , or null if
            the property cannot be found.
            

    - Parameter name: The property name.
    - Parameter modelAccessor: An accessor for the model value.
    - Returns: A , or null.

    */
    open func GetExplorerForProperty(name : Optional<dotnet.System.String>, modelAccessor : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForProperty_0__2__String_System_Func_object_object_(&__thrown, self.get_handle(), name?.get_handle() ?? nil, (modelAccessor?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func GetExplorerForProperty(name : Optional<dotnet.System.String>, modelAccessor : @escaping (Optional<dotnet.System.Object>) throws -> dotnet.System.Object) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        let del_modelAccessor = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>(modelAccessor);
        return try GetExplorerForProperty(name: name, modelAccessor: del_modelAccessor);
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForProperty(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForProperty(System.String,System.Object)
    /**
    
            Gets a  for the property with given , or null if
            the property cannot be found.
            

    - Parameter name: The property name.
    - Parameter model: The model value.
    - Returns: A , or null.

    */
    open func GetExplorerForProperty(name : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForProperty_0__2__String_Object(&__thrown, self.get_handle(), name?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForExpression(System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForExpression(System.Type,System.Object)
    /**
    
            Gets a  for the provided model value and model .
            

    - Parameter modelType: The model .
    - Parameter model: The model value.
    - Returns: A .

    */
    open func GetExplorerForExpression(modelType : Optional<dotnet.System.Type_>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForExpression_0__2__Type_Object(&__thrown, self.get_handle(), modelType?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForExpression(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForExpression(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Object)
    /**
    
            Gets a  for the provided model value and model .
            

    - Parameter metadata: The  associated with the model.
    - Parameter model: The model value.
    - Returns: A .

    */
    open func GetExplorerForExpression(metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForExpression_0__2__ModelMetadata_Object(&__thrown, self.get_handle(), metadata?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForExpression(System.Type, System.Func<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForExpression(System.Type,System.Func{System.Object,System.Object})
    /**
    
            Gets a  for the provided model value and model .
            

    - Parameter modelType: The model .
    - Parameter modelAccessor: A model accessor function.
    - Returns: A .

    */
    open func GetExplorerForExpression(modelType : Optional<dotnet.System.Type_>, modelAccessor : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForExpression_0__2__Type_System_Func_object_object_(&__thrown, self.get_handle(), modelType?.get_handle() ?? nil, (modelAccessor?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func GetExplorerForExpression(modelType : Optional<dotnet.System.Type_>, modelAccessor : @escaping (Optional<dotnet.System.Object>) throws -> dotnet.System.Object) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        let del_modelAccessor = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>(modelAccessor);
        return try GetExplorerForExpression(modelType: modelType, modelAccessor: del_modelAccessor);
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetExplorerForExpression(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, System.Func<System.Object,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.GetExplorerForExpression(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,System.Func{System.Object,System.Object})
    /**
    
            Gets a  for the provided model value and model .
            

    - Parameter metadata: The  associated with the model.
    - Parameter modelAccessor: A model accessor function.
    - Returns: A .

    */
    open func GetExplorerForExpression(metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, modelAccessor : Optional<dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__GetExplorerForExpression_0__2__ModelMetadata_System_Func_object_object_(&__thrown, self.get_handle(), metadata?.get_handle() ?? nil, (modelAccessor?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func GetExplorerForExpression(metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>, modelAccessor : @escaping (Optional<dotnet.System.Object>) throws -> dotnet.System.Object) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        let del_modelAccessor = try dotnet.System.Func_2<dotnet.System.Object,dotnet.System.Object>(modelAccessor);
        return try GetExplorerForExpression(metadata: metadata, modelAccessor: del_modelAccessor);
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer get_Container()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.get_Container
    open func get_Container() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelExplorer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.get_Metadata
    open func get_Metadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ModelType()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.get_ModelType
    open func get_ModelType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_Type__get_ModelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> get_Properties()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.get_Properties
    open func get_Properties() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer_System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorer___get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Gets the container .
            

    */
    open var Container : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        get {
            return try! get_Container();
        }
    }
    /**
    
            Gets the .
            

    */
    open var Metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the model object.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    /**
    */
    open var ModelType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ModelType();
        }
    }
    /**
    
            Gets the properties.
            

    */
    open var Properties : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>> {
        get {
            return try! get_Properties();
        }
    }
} // ModelExplorer


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions
public struct ModelExplorerExtensions {
    // System.String GetSimpleDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions.GetSimpleDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
    /**
    
            Gets a simple display string for the  property
            of .
            

    - Parameter modelExplorer: The .
    - Returns: A simple display string for the model.

    */
    public static func GetSimpleDisplayText(modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExplorerExtensions_String__GetSimpleDisplayText_0__1__ModelExplorer(&__thrown, modelExplorer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ModelExplorerExtensions


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression
    /**
    
            Describes an  passed to a tag helper.
            

    */
public final class ModelExpression
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.#ctor(System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter name: 
            String representation of the  of interest.
            
    - Parameter modelExplorer: 
            Includes the model and metadata about the  of interest.
            
    */
    public init(name : Optional<dotnet.System.String>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_ctor_0__2__String_ModelExplorer(&__thrown, name?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_Metadata()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.get_Metadata
    public func get_Metadata() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_ModelMetadata__get_Metadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.get_Model
    public func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer get_ModelExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.get_ModelExplorer
    public func get_ModelExplorer() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpression_ModelExplorer__get_ModelExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Metadata about the  of interest.
            

    */
    public var Metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata> {
        get {
            return try! get_Metadata();
        }
    }
    /**
    
            Gets the model object for the  of interest.
            

    */
    public var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
    }
    /**
    
            Gets the model explorer for the  of interest.
            

    */
    public var ModelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        get {
            return try! get_ModelExplorer();
        }
    }
    /**
    
            String representation of the  of interest.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // ModelExpression


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider
    /**
    
            Provides  for expressions.
            

    */
open class ModelExpressionProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewFeatures_IModelExpressionProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpressionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Creates a new .
            

    - Parameter modelMetadataProvider: The .
    */
    public init(modelMetadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpressionProvider_ctor_0__1__IModelMetadataProvider(&__thrown, modelMetadataProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetExpressionText<TModel, TValue>(System.Linq.Expressions.Expression<System.Func<TModel,TValue>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider.GetExpressionText``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    
            Gets the name for .
            

    - Parameter expression: The expression.
    - Returns: The expression name.

    */
    open func GetExpressionText<UTModel : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTValue>>>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpressionProvider_String__GetExpressionText_2__1__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTValue__(UTModel.get_type_handle(), UTValue.get_type_handle(), &__thrown, self.get_handle(), (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression CreateModelExpression<TModel, TValue>(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TValue>>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider.CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    */
    open /* method final */ func CreateModelExpression<UTModel : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<UTModel>, expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,UTValue>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpressionProvider_ModelExpression__CreateModelExpression_2__2__Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_UTModel__System_Linq_Expressions_Expression_System_System_Func_UTModel_UTValue__(UTModel.get_type_handle(), UTValue.get_type_handle(), &__thrown, self.get_handle(), nil, (expression?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression CreateModelExpression<TModel>(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpressionProvider.CreateModelExpression``1(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.String)
    /**
    
            Returns a  instance describing the given .
            

    - Parameter viewData: The  containing the 
            against which  is evaluated. 
    - Parameter expression: Expression name, relative to viewData.Model.
    - Returns: A new  instance describing the given .

    */
    open func CreateModelExpression<UTModel : SGBridgeGenericValue>(viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary_1<UTModel>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelExpressionProvider_ModelExpression__CreateModelExpression_1__2__Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_UTModel__String(UTModel.get_type_handle(), &__thrown, self.get_handle(), nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ModelExpressionProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions
public struct ModelMetadataProviderExtensions {
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetModelExplorerForType(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Type, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions.GetModelExplorerForType(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.Object)
    /**
    
            Gets a  for the provided  and
            .
            

    - Parameter provider: The .
    - Parameter modelType: The declared  of the model object.
    - Parameter model: The model object.
    - Returns: 
            A  for the  and .
            

    */
    public static func GetModelExplorerForType(provider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>, modelType : Optional<dotnet.System.Type_>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ModelMetadataProviderExtensions_ModelExplorer__GetModelExplorerForType_0__3__IModelMetadataProvider_Type_Object(&__thrown, provider?.get_handle() ?? nil, modelType?.get_handle() ?? nil, model?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ModelMetadataProviderExtensions


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.PartialViewResultExecutor
    /**
    
            Finds and executes an  for a .
            

    */
open class PartialViewResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_PartialViewResultExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, System.Diagnostics.DiagnosticListener, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.PartialViewResultExecutor.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory,System.Diagnostics.DiagnosticListener,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Creates a new .
            

    - Parameter viewOptions: The .
    - Parameter writerFactory: The .
    - Parameter viewEngine: The .
    - Parameter tempDataFactory: The .
    - Parameter diagnosticListener: The .
    - Parameter loggerFactory: The .
    - Parameter modelMetadataProvider: The .
    */
    public init(viewOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>, writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, viewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, tempDataFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_PartialViewResultExecutor_ctor_0__7__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__IHttpResponseStreamWriterFactory_ICompositeViewEngine_ITempDataDictionaryFactory_DiagnosticListener_ILoggerFactory_IModelMetadataProvider(&__thrown, viewOptions.get_handle(), writerFactory.get_handle(), viewEngine.get_handle(), tempDataFactory.get_handle(), diagnosticListener.get_handle(), loggerFactory.get_handle(), modelMetadataProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.PartialViewResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.PartialViewResultExecutor.FindView(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.PartialViewResult)
    /**
    
            Attempts to find the  associated with .
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter viewResult: The .
    - Returns: A .

    */
    open func FindView(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewResult : aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_PartialViewResultExecutor_ViewEngineResult__FindView_0__2__ActionContext_PartialViewResult(&__thrown, self.get_handle(), actionContext.get_handle(), viewResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.PartialViewResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.PartialViewResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.PartialViewResult)
    /**
    
            Executes the  asynchronously.
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter view: The .
    - Parameter viewResult: The .
    - Returns: A  which will complete when view execution is completed.

    */
    open func ExecuteAsync(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, view : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView, viewResult : aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_PartialViewResultExecutor_Task__ExecuteAsync_0__3__ActionContext_IView_PartialViewResult(&__thrown, self.get_handle(), actionContext.get_handle(), view.get_handle(), viewResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.PartialViewResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.PartialViewResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.PartialViewResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.PartialViewResult) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_PartialViewResultExecutor_Task__ExecuteAsync_0__2__ActionContext_PartialViewResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // PartialViewResultExecutor


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute
    /**
    
            A filter that saves the  for a request.
            

    */
open class SaveTempDataAttribute
    :
    dotnet.System.Attribute,
    Microsoft_AspNetCore_Mvc_Filters_IFilterFactory,
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata,
    Microsoft_AspNetCore_Mvc_Filters_IOrderedFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute.#ctor
    /**
    
            Initialize a new instance of .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(System.IServiceProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute.CreateInstance(System.IServiceProvider)
    /**
    */
    open /* method final */ func CreateInstance(serviceProvider : dotnet.System.IServiceProvider) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_IFilterMetadata__CreateInstance_0__1__IServiceProvider(&__thrown, self.get_handle(), serviceProvider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute.get_Order
    open /* method final */ func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Order(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute.set_Order(System.Int32)
    open func set_Order(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_void__set_Order_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReusable()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SaveTempDataAttribute.get_IsReusable
    open /* method final */ func get_IsReusable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_SaveTempDataAttribute_bool__get_IsReusable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    public var IsReusable : Bool {
        get {
            return try! get_IsReusable();
        }
    }
    /**
    */
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
        set(v) {
            return try! set_Order(value: v);
        }
    }
} // SaveTempDataAttribute


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.SessionStateTempDataProvider
    /**
    
            Provides session-state data to the current  object.
            

    */
open class SessionStateTempDataProvider
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_SessionStateTempDataProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SessionStateTempDataProvider.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer)
    /**
    
            Initializes a new instance of .
            

    - Parameter tempDataSerializer: The .
    */
    public init(tempDataSerializer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_SessionStateTempDataProvider_ctor_0__1__TempDataSerializer(&__thrown, tempDataSerializer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IDictionary<System.String,System.Object> LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SessionStateTempDataProvider.LoadTempData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open func LoadTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_SessionStateTempDataProvider_System_Collections_Generic_IDictionary_string_object___LoadTempData_0__1__HttpContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SaveTempData(Microsoft.AspNetCore.Http.HttpContext, System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.SessionStateTempDataProvider.SaveTempData(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    */
    open func SaveTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>, values : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_SessionStateTempDataProvider_void__SaveTempData_0__2__HttpContext_System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), context?.get_handle() ?? nil, (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SessionStateTempDataProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.StringHtmlContent
    /**
    
            String content which gets encoded when written.
            

    */
open class StringHtmlContent
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_StringHtmlContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.StringHtmlContent.#ctor(System.String)
    /**
    
            Creates a new instance of 
            

    - Parameter input:  to be HTML encoded when  is called.
    */
    public init(input : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_StringHtmlContent_ctor_0__1__String(&__thrown, input.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.StringHtmlContent.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : dotnet.System.IO.TextWriter, encoder : dotnet.System.Text.Encodings.Web.HtmlEncoder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_StringHtmlContent_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer.get_handle(), encoder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // StringHtmlContent


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary
    /**
    */
open class TempDataDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter context: The .
    - Parameter provider: The  used to Load and Save data.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, provider : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_ctor_0__2__HttpContext_ITempDataProvider(&__thrown, context.get_handle(), provider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Keep()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Keep
    /**
    */
    open /* method final */ func Keep() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Keep_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Keep(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Keep(System.String)
    /**
    */
    open /* method final */ func Keep(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Keep_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Load()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Load
    /**
    */
    open /* method final */ func Load() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Load_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Save
    /**
    */
    open /* method final */ func Save() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Save_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Peek(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Peek(System.String)
    /**
    */
    open /* method final */ func Peek(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_Object__Peek_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Add(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Add(System.String,System.Object)
    /**
    */
    open /* method final */ func Add(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Add_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.ContainsValue(System.Object)
    /**
    */
    open func ContainsValue(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_bool__ContainsValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>> GetEnumerator()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.GetEnumerator
    /**
    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.Remove(System.String)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.TryGetValue(System.String,System.Object@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_bool__TryGetValue_0__2__String_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Object(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Object> get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_System_Collections_Generic_ICollection_object___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_Object__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary.set_Item(System.String,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionary_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
    }
} // TempDataDictionary


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionaryFactory
    /**
    
            A default implementation of .
            

    */
open class TempDataDictionaryFactory
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionaryFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionaryFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionaryFactory.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider)
    /**
    
            Creates a new .
            

    - Parameter provider: The .
    */
    public init(provider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionaryFactory_ctor_0__1__ITempDataProvider(&__thrown, provider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary GetTempData(Microsoft.AspNetCore.Http.HttpContext)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionaryFactory.GetTempData(Microsoft.AspNetCore.Http.HttpContext)
    /**
    */
    open /* method final */ func GetTempData(context : Optional<aspnetcore.Microsoft.AspNetCore.Http.HttpContext>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TempDataDictionaryFactory_ITempDataDictionary__GetTempData_0__1__HttpContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TempDataDictionaryFactory


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo
    /**
    
            Represents a template which keeps track of visited objects.
            

    */
open class TemplateInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo)
    /**
    
            Initializes a new instance of .
            

    - Parameter original: The original value to copy.
    */
    public init(original : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_ctor_0__1__TemplateInfo(&__thrown, original?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool AddVisited(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.AddVisited(System.Object)
    /**
    
            Mark a value as visited.
            

    - Parameter value: The object to visit.
    - Returns: If this object is newly visited.

    */
    open func AddVisited(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_bool__AddVisited_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String GetFullHtmlFieldName(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.GetFullHtmlFieldName(System.String)
    /**
    
            Returns the full HTML element name for the specified .
            

    - Parameter partialFieldName: Expression name, relative to the current model.
    - Returns: Fully-qualified expression name for .

    */
    open func GetFullHtmlFieldName(partialFieldName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_String__GetFullHtmlFieldName_0__1__String(&__thrown, self.get_handle(), partialFieldName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool Visited(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.Visited(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
    /**
    
            Checks if a model has been visited already.
            

    - Parameter modelExplorer: The .
    - Returns: Whether the model has been visited.

    */
    open func Visited(modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_bool__Visited_0__1__ModelExplorer(&__thrown, self.get_handle(), modelExplorer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_FormattedModelValue()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.get_FormattedModelValue
    open func get_FormattedModelValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_Object__get_FormattedModelValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FormattedModelValue(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.set_FormattedModelValue(System.Object)
    open func set_FormattedModelValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_void__set_FormattedModelValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HtmlFieldPrefix()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.get_HtmlFieldPrefix
    open func get_HtmlFieldPrefix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_String__get_HtmlFieldPrefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HtmlFieldPrefix(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.set_HtmlFieldPrefix(System.String)
    open func set_HtmlFieldPrefix(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_void__set_HtmlFieldPrefix_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_TemplateDepth()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.get_TemplateDepth
    open func get_TemplateDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TemplateInfo_i32__get_TemplateDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            Gets or sets the formatted model value.
            

    */
    open var FormattedModelValue : Optional<dotnet.System.Object> {
        get {
            return try! get_FormattedModelValue();
        }
        set(v) {
            return try! set_FormattedModelValue(value: v!);
        }
    }
    /**
    
            Gets or sets the HTML field prefix.
            

    */
    open var HtmlFieldPrefix : Optional<dotnet.System.String> {
        get {
            return try! get_HtmlFieldPrefix();
        }
        set(v) {
            return try! set_HtmlFieldPrefix(value: v!);
        }
    }
    /**
    
            Gets how many objects have been visited.
            

    */
    open var TemplateDepth : Swift.Int32 {
        get {
            return try! get_TemplateDepth();
        }
    }
} // TemplateInfo


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueDelegate
    /**
    
            A delegate for .
            

    */
public final class TryGetValueDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_TryGetValueDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // TryGetValueDelegate


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueProvider
public struct TryGetValueProvider {
    // Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueDelegate CreateInstance(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueProvider.CreateInstance(System.Type)
    /**
    
            Returns a  for the specified  type.
            

    - Parameter targetType: The target type that is expected to be a .
    - Returns: The .

    */
    public static func CreateInstance(targetType : Optional<dotnet.System.Type_>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_TryGetValueProvider_TryGetValueDelegate__CreateInstance_0__1__Type(&__thrown, targetType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TryGetValueDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TryGetValueProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider
    /**
    
            Contract for a service providing validation attributes for expressions.
            

    */
open class ValidationHtmlAttributeProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ValidationHtmlAttributeProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider.AddValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Adds validation-related HTML attributes to the  if client validation is
            enabled.
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for an expression.
    - Parameter attributes: 
            The  to receive the validation attributes. Maps the validation
            attribute names to their  values. Values must be HTML encoded before they are written
            to an HTML document or response.
            
    */
    open func AddValidationAttributes(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, attributes : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ValidationHtmlAttributeProvider_void__AddValidationAttributes_0__3__ViewContext_ModelExplorer_System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAndTrackValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext, Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer, System.String, System.Collections.Generic.IDictionary<System.String,System.String>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ValidationHtmlAttributeProvider.AddAndTrackValidationAttributes(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Collections.Generic.IDictionary{System.String,System.String})
    /**
    
            Adds validation-related HTML attributes to the  if client validation is
            enabled and validation attributes have not yet been added for this  in the
            current <form>.
            

    - Parameter viewContext: A  instance for the current scope.
    - Parameter modelExplorer: The  for the .
    - Parameter expression: Expression name, relative to the current model.
    - Parameter attributes: 
            The  to receive the validation attributes. Maps the validation
            attribute names to their  values. Values must be HTML encoded before they are written
            to an HTML document or response.
            
    */
    open func AddAndTrackValidationAttributes(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, modelExplorer : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer>, expression : Optional<dotnet.System.String>, attributes : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ValidationHtmlAttributeProvider_void__AddAndTrackValidationAttributes_0__4__ViewContext_ModelExplorer_String_System_Collections_Generic_IDictionary_string_string_(&__thrown, self.get_handle(), viewContext?.get_handle() ?? nil, modelExplorer?.get_handle() ?? nil, expression?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ValidationHtmlAttributeProvider


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewComponentResultExecutor
    /**
    
            A  for .
            

    */
open class ViewComponentResultExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewComponentResultExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.HtmlEncoder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewComponentResultExecutor.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.HtmlEncoder,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory,Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory)
    /**
    
            Initialize a new instance of 
            

    - Parameter mvcHelperOptions: The .
    - Parameter loggerFactory: The .
    - Parameter htmlEncoder: The .
    - Parameter modelMetadataProvider: The .
    - Parameter tempDataDictionaryFactory: The .
    - Parameter writerFactory: The .
    */
    public init(mvcHelperOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, htmlEncoder : dotnet.System.Text.Encodings.Web.HtmlEncoder, modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, tempDataDictionaryFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewComponentResultExecutor_ctor_0__6__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__ILoggerFactory_HtmlEncoder_IModelMetadataProvider_ITempDataDictionaryFactory_IHttpResponseStreamWriterFactory(&__thrown, mvcHelperOptions.get_handle(), loggerFactory.get_handle(), htmlEncoder.get_handle(), modelMetadataProvider.get_handle(), tempDataDictionaryFactory.get_handle(), writerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewComponentResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewComponentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewComponentResult)
    /**
    */
    open func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.ViewComponentResult) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewComponentResultExecutor_Task__ExecuteAsync_0__2__ActionContext_ViewComponentResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // ViewComponentResultExecutor


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewContextAttribute
    /**
    
            Specifies that a tag helper property should be set with the current
             when creating the tag helper. The property must have a
            public set method.
            

    */
open class ViewContextAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewContextAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewContextAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewContextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ViewContextAttribute


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
    /**
    
            A  for view data.
            

    */
open class ViewDataDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of the  class.
            

    - Parameter metadataProvider: 
             instance used to create 
            instances.
            
    - Parameter modelState:  instance for this scope.
    */
    public init(metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ctor_0__2__IModelMetadataProvider_ModelStateDictionary(&__thrown, metadataProvider.get_handle(), modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Initializes a new instance of the  class based entirely on an existing
            instance.
            

    - Parameter source:  instance to copy initial values from.
    */
    public init(source : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ctor_0__1__ViewDataDictionary(&__thrown, source.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Eval(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String)
    /**
    
            Gets value of named  in this .
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: Value of named  in this .

    */
    open func Eval(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_Object__Eval_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Eval(System.String, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String,System.String)
    /**
    
            Gets value of named  in this , formatted
            using given .
            

    - Parameter expression: Expression name, relative to the current model.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            
    - Returns: 
            Value of named  in this , formatted using
            given .
            

    */
    open func Eval(expression : Optional<dotnet.System.String>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_String__Eval_0__2__String_String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String FormatValue(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.FormatValue(System.Object,System.String)
    /**
    
            Formats the given  using given .
            

    - Parameter value: The value to format.
    - Parameter format: 
            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            
    - Returns: The formatted .

    */
    open class func FormatValue(value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_String__FormatValue_0__2__Object_String(&__thrown, value?.get_handle() ?? nil, format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo GetViewDataInfo(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.GetViewDataInfo(System.String)
    /**
    
            Gets  for named  in this
            .
            

    - Parameter expression: Expression name, relative to the current model.
    - Returns: 
             for named  in this
            .
            

    */
    open func GetViewDataInfo(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ViewDataInfo__GetViewDataInfo_0__1__String(&__thrown, self.get_handle(), expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Add(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.String,System.Object)
    /**
    */
    open /* method final */ func Add(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__Add_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ContainsKey(System.String)
    /**
    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.String)
    /**
    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String,System.Object@)
    /**
    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__TryGetValue_0__2__String_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Object(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    */
    open /* method final */ func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    */
    open /* method final */ func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.String,System.Object>[], System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_string_object_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    */
    open /* method final */ func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_Model
    open func get_Model() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_Object__get_Model_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Model(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.set_Model(System.Object)
    open func set_Model(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__set_Model_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary get_ModelState()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_ModelState
    open func get_ModelState() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ModelStateDictionary__get_ModelState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata get_ModelMetadata()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_ModelMetadata
    open func get_ModelMetadata() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ModelMetadata__get_ModelMetadata_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer get_ModelExplorer()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_ModelExplorer
    open func get_ModelExplorer() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_ModelExplorer__get_ModelExplorer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModelExplorer(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.set_ModelExplorer(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
    open func set_ModelExplorer(value : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__set_ModelExplorer_0__1__ModelExplorer(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo get_TemplateInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_TemplateInfo
    open func get_TemplateInfo() throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_TemplateInfo__get_TemplateInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Object> get_Values()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_System_Collections_Generic_ICollection_object___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(index : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_Object__get_Item_0__1__String(&__thrown, self.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.set_Item(System.String,System.Object)
    open /* method final */ func set_Item(index : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), index.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    
            Gets or sets the current model.
            

    */
    open var Model : Optional<dotnet.System.Object> {
        get {
            return try! get_Model();
        }
        set(v) {
            return try! set_Model(value: v!);
        }
    }
    /**
    
            Gets or sets the  for the .
            

    */
    open var ModelExplorer : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer {
        get {
            return try! get_ModelExplorer();
        }
        set(v) {
            return try! set_ModelExplorer(value: v);
        }
    }
    /**
    
            Gets the  for an expression, the  (if
            non-null), or the declared .
            

    */
    open var ModelMetadata : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata {
        get {
            return try! get_ModelMetadata();
        }
    }
    /**
    
            Gets the .
            

    */
    open var ModelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
        get {
            return try! get_ModelState();
        }
    }
    /**
    
            Gets the .
            

    */
    open var TemplateInfo : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo {
        get {
            return try! get_TemplateInfo();
        }
    }
    /**
    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
    }
} // ViewDataDictionary


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryAttribute
    /**
    
            Specifies that a controller property should be set with the current
             when creating the controller. The property must have a public
            set method.
            

    */
open class ViewDataDictionaryAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ViewDataDictionaryAttribute


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryControllerPropertyActivator
    /**
    
            Represents a  for a view data dictionary controller.
            

    */
open class ViewDataDictionaryControllerPropertyActivator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryControllerPropertyActivator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryControllerPropertyActivator.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter modelMetadataProvider: The  to use.
    */
    public init(modelMetadataProvider : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryControllerPropertyActivator_ctor_0__1__IModelMetadataProvider(&__thrown, modelMetadataProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Activate(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryControllerPropertyActivator.Activate(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object)
    /**
    */
    open /* method final */ func Activate(actionContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext>, controller : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryControllerPropertyActivator_void__Activate_0__2__ControllerContext_Object(&__thrown, self.get_handle(), actionContext?.get_handle() ?? nil, controller?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Action<Microsoft.AspNetCore.Mvc.ControllerContext,System.Object> GetActivatorDelegate(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionaryControllerPropertyActivator.GetActivatorDelegate(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)
    /**
    */
    open /* method final */ func GetActivatorDelegate(actionDescriptor : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor>) throws -> Optional<dotnet.System.Action_2<aspnetcore.Microsoft.AspNetCore.Mvc.ControllerContext,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionaryControllerPropertyActivator_System_Action_Microsoft_AspNetCore_Mvc_ControllerContext_object___GetActivatorDelegate_0__1__ControllerActionDescriptor(&__thrown, self.get_handle(), actionDescriptor?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ViewDataDictionaryControllerPropertyActivator


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    /**
    
            Represents a  for a specific model type.
            

    */
open class ViewDataDictionary_1<TModel : SGBridgeGenericValue>
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_get_type_handle(TModel.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
    /**
    
            Initializes a new instance of the  class.
            

    */
    public override init(metadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, modelState : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_ctor_0__2__IModelMetadataProvider_ModelStateDictionary(TModel.get_type_handle(), &__thrown, metadataProvider.get_handle(), modelState.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
    /**
    
            Initializes a new instance of the  class based in part on an
            existing  instance.
            

    */
    public override init(source : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_ctor_0__1__ViewDataDictionary(TModel.get_type_handle(), &__thrown, source.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object)
    /**
    
            Initializes a new instance of the  class based in part on an
            existing  instance. This constructor is careful to avoid exceptions
             may throw when  is null.
            

    */
    public init(source : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, model : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_ctor_0__2__ViewDataDictionary_Object(TModel.get_type_handle(), &__thrown, source.get_handle(), model?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] TModel get_Model()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.get_Model
    open func get_Model() throws -> TModel {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_TModel__get_Model_0__0(TModel.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TModel(gval: __return);
        }
    }
    // [IsSpecialName] void set_Model(TModel)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.set_Model(`0)
    open func set_Model(value : TModel) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataDictionary_1_void__set_Model_0__1__TModel(TModel.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] TModel get_Model()
} // ViewDataDictionary_1


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataEvaluator
public struct ViewDataEvaluator {
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo Eval(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataEvaluator.Eval(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.String)
    /**
    
            Gets  for named  in given
            .
            

    - Parameter viewData: 
            The  that may contain the  value.
            
    - Parameter expression: Expression name, relative to viewData.Model.
    - Returns: 
             for named  in given .
            

    */
    public static func Eval(viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataEvaluator_ViewDataInfo__Eval_0__2__ViewDataDictionary_String(&__thrown, viewData?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo Eval(System.Object, System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataEvaluator.Eval(System.Object,System.String)
    /**
    
            Gets  for named  in given
            .
            

    - Parameter indexableObject: 
            The  that may contain the  value.
            
    - Parameter expression: Expression name, relative to .
    - Returns: 
             for named  in given
            .
            

    */
    public static func Eval(indexableObject : Optional<dotnet.System.Object>, expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataEvaluator_ViewDataInfo__Eval_0__2__Object_String(&__thrown, indexableObject?.get_handle() ?? nil, expression?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ViewDataEvaluator


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo
    /**
    
            Represents info about a  lookup which is evaluated when  is read.
            

    */
open class ViewDataInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.#ctor(System.Object,System.Object)
    /**
    
            Initializes a new instance of the  class with info about a
             lookup which has already been evaluated.
            

    - Parameter container: The  that  was evaluated from.
    - Parameter value: The evaluated value.
    */
    public init(container : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_ctor_0__2__Object_Object(&__thrown, container?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object, System.Reflection.PropertyInfo)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.#ctor(System.Object,System.Reflection.PropertyInfo)
    /**
    
            Initializes a new instance of the  class with info about a
             lookup which is evaluated when  is read.
            It uses  on 
            passing parameter  to lazily evaluate the value.
            

    - Parameter container: The  that  will be evaluated from.
    - Parameter propertyInfo: The  that will be used to evaluate .
    */
    public init(container : Optional<dotnet.System.Object>, propertyInfo : Optional<dotnet.System.Reflection.PropertyInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_ctor_0__2__Object_PropertyInfo(&__thrown, container?.get_handle() ?? nil, propertyInfo?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object, System.Reflection.PropertyInfo, System.Func<System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.#ctor(System.Object,System.Reflection.PropertyInfo,System.Func{System.Object})
    /**
    
            Initializes a new instance of the  class with info about a
             lookup which is evaluated when  is read.
            It uses  to lazily evaluate the value.
            

    - Parameter container: The  that has the .
    - Parameter propertyInfo: The  that represents 's property.
    - Parameter valueAccessor: A delegate that will return the .
    */
    public init(container : Optional<dotnet.System.Object>, propertyInfo : Optional<dotnet.System.Reflection.PropertyInfo>, valueAccessor : Optional<dotnet.System.Func_1<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_ctor_0__3__Object_PropertyInfo_System_Func_object_(&__thrown, container?.get_handle() ?? nil, propertyInfo?.get_handle() ?? nil, (valueAccessor?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Container()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.get_Container
    open func get_Container() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_Object__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.PropertyInfo get_PropertyInfo()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.get_PropertyInfo
    open func get_PropertyInfo() throws -> Optional<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_PropertyInfo__get_PropertyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.PropertyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_ViewDataInfo_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets the  that has the .
            

    */
    open var Container : Optional<dotnet.System.Object> {
        get {
            return try! get_Container();
        }
    }
    /**
    
            Gets the  that represents 's property.
            

    */
    open var PropertyInfo : Optional<dotnet.System.Reflection.PropertyInfo> {
        get {
            return try! get_PropertyInfo();
        }
    }
    /**
    
            Gets the value of the property.
            

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // ViewDataInfo


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor
    /**
    
            Executes an .
            

    */
open class ViewExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultContentType
    /**
    
            The default content-type header value for views, text/html; charset=utf-8.
            

    */
    open class var DefaultContentType : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Mvc_ViewFeatures_ViewExecutor_get_DefaultContentType());
            return __return;
        }
    }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, System.Diagnostics.DiagnosticListener, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory,System.Diagnostics.DiagnosticListener,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Creates a new .
            

    - Parameter viewOptions: The .
    - Parameter writerFactory: The .
    - Parameter viewEngine: The .
    - Parameter tempDataFactory: The .
    - Parameter diagnosticListener: The .
    - Parameter modelMetadataProvider: The .
    */
    public init(viewOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>, writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, viewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, tempDataFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener, modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewExecutor_ctor_0__6__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__IHttpResponseStreamWriterFactory_ICompositeViewEngine_ITempDataDictionaryFactory_DiagnosticListener_IModelMetadataProvider(&__thrown, viewOptions.get_handle(), writerFactory.get_handle(), viewEngine.get_handle(), tempDataFactory.get_handle(), diagnosticListener.get_handle(), modelMetadataProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewEngines.IView, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary, System.String, System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewEngines.IView,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary,System.String,System.Nullable{System.Int32})
    /**
    
            Executes a view asynchronously.
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter view: The .
    - Parameter viewData: The .
    - Parameter tempData: The .
    - Parameter contentType: 
            The content-type header value to set in the response. If null,
             will be used.
            
    - Parameter statusCode: 
            The HTTP status code to set in the response. May be null.
            
    - Returns: A  which will complete when view execution is completed.

    */
    open func ExecuteAsync(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, view : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.IView, viewData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, tempData : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary, contentType : Optional<dotnet.System.String>, statusCode : Optional<Swift.Int32>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewExecutor_Task__ExecuteAsync_0__6__ActionContext_IView_ViewDataDictionary_ITempDataDictionary_String_System_Nullable_i32_(&__thrown, self.get_handle(), actionContext.get_handle(), view.get_handle(), viewData.get_handle(), tempData.get_handle(), contentType?.get_handle() ?? nil, (statusCode != nil) ? System_Int32_box(statusCode!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // ViewExecutor


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor
    /**
    
            Finds and executes an  for a .
            

    */
open class ViewResultExecutor
    :
    aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_ViewResultExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcViewOptions>, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, System.Diagnostics.DiagnosticListener, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.MvcViewOptions},Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory,Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory,System.Diagnostics.DiagnosticListener,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)
    /**
    
            Creates a new .
            

    - Parameter viewOptions: The .
    - Parameter writerFactory: The .
    - Parameter viewEngine: The .
    - Parameter tempDataFactory: The .
    - Parameter diagnosticListener: The .
    - Parameter loggerFactory: The .
    - Parameter modelMetadataProvider: The .
    */
    public init(viewOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>, writerFactory : aspnetcore.Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory, viewEngine : aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ICompositeViewEngine, tempDataFactory : aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionaryFactory, diagnosticListener : dotnet.System.Diagnostics.DiagnosticListener, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, modelMetadataProvider : aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewResultExecutor_ctor_0__7__Microsoft_Extensions_Options_IOptions_Microsoft_AspNetCore_Mvc_MvcViewOptions__IHttpResponseStreamWriterFactory_ICompositeViewEngine_ITempDataDictionaryFactory_DiagnosticListener_ILoggerFactory_IModelMetadataProvider(&__thrown, viewOptions.get_handle(), writerFactory.get_handle(), viewEngine.get_handle(), tempDataFactory.get_handle(), diagnosticListener.get_handle(), loggerFactory.get_handle(), modelMetadataProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult FindView(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewResult)
    /**
    
            Attempts to find the  associated with .
            

    - Parameter actionContext: The  associated with the current request.
    - Parameter viewResult: The .
    - Returns: A .

    */
    open func FindView(actionContext : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, viewResult : aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult) throws -> aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewResultExecutor_ViewEngineResult__FindView_0__2__ActionContext_ViewResult(&__thrown, self.get_handle(), actionContext.get_handle(), viewResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.ViewResult)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewResult)
    /**
    */
    open /* method final */ func ExecuteAsync(context : aspnetcore.Microsoft.AspNetCore.Mvc.ActionContext, result : aspnetcore.Microsoft.AspNetCore.Mvc.ViewResult) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_ViewResultExecutor_Task__ExecuteAsync_0__2__ActionContext_ViewResult(&__thrown, self.get_handle(), context.get_handle(), result.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // ViewResultExecutor


}
// Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers
extension Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers {
// type: Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope
    /**
    
            Creates and manages the lifetime of  instances.
            

    */
open class IViewBufferScope
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue[] GetPage(System.Int32)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope.GetPage(System.Int32)
    /**
    
            Gets a .
            

    - Parameter pageSize: The minimum size of the segment.
    - Returns: The .

    */
    open func GetPage(pageSize : Swift.Int32) throws -> Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope_ViewBufferValueArray__GetPage_0__1__i32(&__thrown, self.get_handle(), pageSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReturnSegment(Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue[])
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope.ReturnSegment(Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue[])
    /**
    
            Returns a  that can be reused.
            

    - Parameter segment: The .
    */
    open func ReturnSegment(segment : Optional<dotnet.System_Arr<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue>>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope_void__ReturnSegment_0__1__ViewBufferValueArray(&__thrown, self.get_handle(), (segment?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.TextWriter CreateWriter(System.IO.TextWriter)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.IViewBufferScope.CreateWriter(System.IO.TextWriter)
    /**
    
            Creates a  that will delegate to the provided
            .
            

    - Parameter writer: The .
    - Returns: A .

    */
    open func CreateWriter(writer : Optional<dotnet.System.IO.TextWriter>) throws -> Optional<dotnet.System.IO.TextWriter> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope_TextWriter__CreateWriter_0__1__TextWriter(&__thrown, self.get_handle(), writer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.TextWriter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IViewBufferScope


// type: Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue
// boxed value type
    /**
    
            Encapsulates a string or  value.
            

    */
public final class ViewBufferValue
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_ViewBufferValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    
            Gets the value.
            

    */
    public var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue.#ctor(System.String)
    /**
    
            Initializes a new instance of  with a string value.
            

    - Parameter value: The value.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_ViewBufferValue_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue.#ctor(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Initializes a new instance of  with a  value.
            

    - Parameter content: The .
    */
    public init(content : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_ViewBufferValue_ctor_0__1__IHtmlContent(&__thrown, content?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_ViewBufferValue_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Buffers.ViewBufferValue.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_ViewBufferValue_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ViewBufferValue


}

// Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure
extension Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure {
// type: Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer
    /**
    
            Serializes and deserializes the contents of .
            

    */
open class TempDataSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Mvc_ViewFeatures_Infrastructure_TempDataSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.Generic.IDictionary<System.String,System.Object> Deserialize(System.Byte[])
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer.Deserialize(System.Byte[])
    /**
    
            Deserializes  to a 
            used to initialize an instance of .
            

    - Parameter unprotectedData: Serialized representation of .
    - Returns: The deserialized .

    */
    open func Deserialize(unprotectedData : Optional<dotnet.System_Arr<Swift.UInt8>>) throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Infrastructure_TempDataSerializer_System_Collections_Generic_IDictionary_string_object___Deserialize_0__1__u8Array(&__thrown, self.get_handle(), (unprotectedData?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] Serialize(System.Collections.Generic.IDictionary<System.String,System.Object>)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer.Serialize(System.Collections.Generic.IDictionary{System.String,System.Object})
    /**
    
            Serializes the contents of .
            

    - Parameter values: The contents of .
    - Returns: The serialized bytes.

    */
    open func Serialize(values : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.Object>>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Infrastructure_TempDataSerializer_u8Array__Serialize_0__1__System_Collections_Generic_IDictionary_string_object_(&__thrown, self.get_handle(), (values?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool CanSerializeType(System.Type)
// docid: M:Microsoft.AspNetCore.Mvc.ViewFeatures.Infrastructure.TempDataSerializer.CanSerializeType(System.Type)
    /**
    
            Determines if the serializer supports the specified .
            
            Defaults to returning  for all  instances.
            
            

    - Parameter type: The .
    - Returns:  if the serializer supports serializing , otherwise .

    */
    open func CanSerializeType(type : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Mvc_ViewFeatures_Infrastructure_TempDataSerializer_bool__CanSerializeType_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TempDataSerializer


}




// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions
public struct MvcViewFeaturesMvcBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})
    /**
    
            Adds configuration of  for the application.
            

    - Parameter builder: The .
    - Parameter setupAction: 
            An  to configure the provided .
            
    - Returns: The .

    */
    public static func AddViewOptions(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcBuilderExtensions_IMvcBuilder__AddViewOptions_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_MvcViewOptions_(&__thrown, builder?.get_handle() ?? nil, (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddViewOptions(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try AddViewOptions(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewComponentsAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewComponentsAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Registers discovered view components as services in the .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddViewComponentsAsServices(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcBuilderExtensions_IMvcBuilder__AddViewComponentsAsServices_0__1__IMvcBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddSessionStateTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddSessionStateTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Registers  as the default 
            in the .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddSessionStateTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcBuilderExtensions_IMvcBuilder__AddSessionStateTempDataProvider_0__1__IMvcBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
    /**
    
            Registers  as the default  in the
            .
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcBuilderExtensions_IMvcBuilder__AddCookieTempDataProvider_0__1__IMvcBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})
    /**
    
            Registers  as the default  in the
            .
            

    - Parameter builder: The .
    - Parameter setupAction: 
            An  to configure the provided
            .
            
    - Returns: The .

    */
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcBuilderExtensions_IMvcBuilder__AddCookieTempDataProvider_0__2__IMvcBuilder_System_Action_Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_(&__thrown, builder?.get_handle() ?? nil, (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder>, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>(setupAction);
        return try AddCookieTempDataProvider(builder: builder, setupAction: del_setupAction);
    }
} // MvcViewFeaturesMvcBuilderExtensions


// type: Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions
public struct MvcViewFeaturesMvcCoreBuilderExtensions {
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Add view related services.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddViews(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViews_0__1__IMvcCoreBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
    /**
    
            Registers  as the default  in the
            . Also registers the default view services.
            

    - Parameter builder: The .
    - Returns: The .

    */
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddCookieTempDataProvider_0__1__IMvcCoreBuilder(&__thrown, builder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})
    /**
    
            Add view related services.
            

    - Parameter builder: The .
    - Parameter setupAction: The setup action for .
    - Returns: The .

    */
    public static func AddViews(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddViews_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_MvcViewOptions_(&__thrown, builder?.get_handle() ?? nil, (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddViews(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try AddViews(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})
    /**
    
            Registers  as the default  in the
            . Also registers the default view services.
            

    - Parameter builder: The .
    - Parameter setupAction: 
            An  to configure the provided
            .
            
    - Returns: The .

    */
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcCoreBuilderExtensions_IMvcCoreBuilder__AddCookieTempDataProvider_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_CookieTempDataProviderOptions_(&__thrown, builder?.get_handle() ?? nil, (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func AddCookieTempDataProvider(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>(setupAction);
        return try AddCookieTempDataProvider(builder: builder, setupAction: del_setupAction);
    }
    // Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.ConfigureViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})
    /**
    
            Configures .
            

    - Parameter builder: The .
    - Parameter setupAction: The setup action.
    - Returns: The .

    */
    public static func ConfigureViews(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_MvcViewFeaturesMvcCoreBuilderExtensions_IMvcCoreBuilder__ConfigureViews_0__2__IMvcCoreBuilder_System_Action_Microsoft_AspNetCore_Mvc_MvcViewOptions_(&__thrown, builder?.get_handle() ?? nil, (setupAction?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    public static func ConfigureViews(builder : Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder>, setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try ConfigureViews(builder: builder, setupAction: del_setupAction);
    }
} // MvcViewFeaturesMvcCoreBuilderExtensions


}



public protocol Microsoft_AspNetCore_Mvc_IViewComponentHelper
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_IViewComponentResult
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper_1
    :
    Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper
{
    associatedtype TModel_IHtmlHelper_1 : SGBridgeGenericValue;
}

public protocol Microsoft_AspNetCore_Mvc_Rendering_IJsonHelper
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentActivator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorCollectionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentDescriptorProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvoker
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentInvokerFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewComponents_IViewComponentSelector
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewEngines_ICompositeViewEngine
    :
    Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewEngines_IView
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewEngines_IViewEngine
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_Buffers_IViewBufferScope
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IAntiforgeryPolicy
    :
    Microsoft_AspNetCore_Mvc_Filters_IFilterMetadata
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IFileVersionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IModelExpressionProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionary
    :
    System_Collections_Generic_IDictionary_2
    where
        TKey_IDictionary_2 == dotnet.System.String,
        TValue_IDictionary_2 == dotnet.System.Object
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataDictionaryFactory
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_ITempDataProvider
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Mvc_ViewFeatures_IViewContextAware
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD void AddModelError<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
    public func AddModelError<UTModel : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, errorMessage : Optional<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError(modelState: self, expression: expression, errorMessage: errorMessage);
    }
}

// EXTENSION METHOD void TryAddModelException<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.Exception)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
    public func TryAddModelException<UTModel : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, exception : Optional<dotnet.System.Exception>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.TryAddModelException(modelState: self, expression: expression, exception: exception);
    }
}

// EXTENSION METHOD void AddModelError<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>, System.Exception, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
    public func AddModelError<UTModel : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>, exception : Optional<dotnet.System.Exception>, metadata : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError(modelState: self, expression: expression, exception: exception, metadata: metadata);
    }
}

// EXTENSION METHOD bool Remove<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
    public func Remove<UTModel : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws -> Bool {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.Remove(modelState: self, expression: expression);
    }
}

// EXTENSION METHOD void RemoveAll<TModel>(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Linq.Expressions.Expression<System.Func<TModel,System.Object>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary {
    public func RemoveAll<UTModel : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModel,dotnet.System.Object>>>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.RemoveAll(modelState: self, expression: expression);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode)

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode, System.Object)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync<TComponent>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.RenderMode, System.Object)

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> RenderComponentAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Type, Microsoft.AspNetCore.Mvc.Rendering.RenderMode, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderComponentAsync(componentType : Optional<dotnet.System.Type_>, renderMode : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.RenderMode, parameters : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperComponentExtensions.RenderComponentAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), componentType: componentType, renderMode: renderMode, parameters: parameters);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Display(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Display(expression : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Display(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Display(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Display(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor(htmlHelper: self, expression: expression, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor(htmlHelper: self, expression: expression, templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor(htmlHelper: self, expression: expression, templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor(htmlHelper: self, expression: expression, templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel(additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel(templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel(templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel(templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayForModel(templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, htmlFieldName: htmlFieldName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD System.String DisplayNameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DisplayNameForModel() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.String DisplayNameFor<TModelItem, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<System.Collections.Generic.IEnumerable<TModelItem>>, System.Linq.Expressions.Expression<System.Func<TModelItem,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DisplayNameFor<UTModelItem : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTModelItem,UTResult>>>) throws -> Optional<dotnet.System.String> where TModel == dotnet.System.Collections.Generic.IEnumerable_1<UTModelItem> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Editor(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Editor(expression : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Editor(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Editor(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Editor(expression : Optional<dotnet.System.String>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor(htmlHelper: self, expression: expression, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor(htmlHelper: self, expression: expression, templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor(htmlHelper: self, expression: expression, templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func EditorFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor(htmlHelper: self, expression: expression, templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel(additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel(templateName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel(templateName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel(templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, htmlFieldName: htmlFieldName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func EditorForModel(templateName : Optional<dotnet.System.String>, htmlFieldName : Optional<dotnet.System.String>, additionalViewData : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), templateName: templateName, htmlFieldName: htmlFieldName, additionalViewData: additionalViewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Nullable<bool>)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), antiforgery: antiforgery);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), method: method);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), method: method, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Nullable<bool>, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, antiforgery : Optional<Bool>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), method: method, antiforgery: antiforgery, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), actionName: actionName, controllerName: controllerName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), actionName: actionName, controllerName: controllerName, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), actionName: actionName, controllerName: controllerName, method: method);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), actionName: actionName, controllerName: controllerName, routeValues: routeValues, method: method);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginForm(actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), actionName: actionName, controllerName: controllerName, method: method, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object, System.Nullable<bool>)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeValues : Optional<dotnet.System.Object>, antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeValues: routeValues, antiforgery: antiforgery);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Nullable<bool>)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>, antiforgery : Optional<Bool>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, antiforgery: antiforgery);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, method: method);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.Rendering.FormMethod)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, routeValues: routeValues, method: method);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.Rendering.FormMethod, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func BeginRouteForm(routeName : Optional<dotnet.System.String>, method : aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.FormMethod, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.MvcForm> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), routeName: routeName, method: method, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func CheckBox(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, bool)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func CheckBox(expression : Optional<dotnet.System.String>, isChecked : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, isChecked: isChecked);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func CheckBox(expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor<TModel>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,bool>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func CheckBoxFor(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,Bool>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBoxFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Hidden(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Hidden(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent HiddenFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func HiddenFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.HiddenFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Password(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Password(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent PasswordFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func PasswordFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.PasswordFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RadioButton(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RadioButton(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, bool)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RadioButton(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, isChecked : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value, isChecked: isChecked);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func RadioButtonFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButtonFor(htmlHelper: self, expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextBox(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextBox(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextBox(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, format : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value, format: format);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextBox(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func TextBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func TextBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, format : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor(htmlHelper: self, expression: expression, format: format);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func TextBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor(htmlHelper: self, expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextArea(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextArea(expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextArea(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func TextArea(expression : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, value: value, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func TextAreaFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func TextAreaFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor(htmlHelper: self, expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Label(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Label(expression : Optional<dotnet.System.String>, labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, labelText: labelText);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func LabelFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func LabelFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor(htmlHelper: self, expression: expression, labelText: labelText);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func LabelFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor(htmlHelper: self, expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func LabelForModel() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func LabelForModel(labelText : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), labelText: labelText);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func LabelForModel(htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func LabelForModel(labelText : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), labelText: labelText, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName, routeValues: routeValues, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName, controllerName: controllerName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName, controllerName: controllerName, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ActionLink(linkText : Optional<dotnet.System.String>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(helper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, actionName: actionName, controllerName: controllerName, routeValues: routeValues, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RouteLink(linkText : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RouteLink(linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, routeName: routeName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RouteLink(linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, routeName: routeName, routeValues: routeValues);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RouteLink(linkText : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, routeValues: routeValues, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RouteLink(linkText : Optional<dotnet.System.String>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), linkText: linkText, routeName: routeName, routeValues: routeValues, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD System.String NameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func NameForModel() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.NameForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.String IdForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func IdForModel() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.IdForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func PartialAsync(partialViewName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func PartialAsync(partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, viewData: viewData);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func PartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Partial(partialViewName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Partial(partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, viewData: viewData);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Partial(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Partial(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model, viewData: viewData);
    }
}

// EXTENSION METHOD void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartial(partialViewName : Optional<dotnet.System.String>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName);
    }
}

// EXTENSION METHOD void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartial(partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, viewData: viewData);
    }
}

// EXTENSION METHOD void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartial(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model);
    }
}

// EXTENSION METHOD void RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartial(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws {
        try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model, viewData: viewData);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartialAsync(partialViewName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartialAsync(partialViewName : Optional<dotnet.System.String>, viewData : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, viewData: viewData);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func RenderPartialAsync(partialViewName : Optional<dotnet.System.String>, model : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), partialViewName: partialViewName, model: model);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DropDownList(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DropDownList(expression : Optional<dotnet.System.String>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, optionLabel: optionLabel);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DropDownList(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, selectList: selectList);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DropDownList(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, selectList: selectList, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func DropDownList(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, selectList: selectList, optionLabel: optionLabel);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DropDownListFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor(htmlHelper: self, expression: expression, selectList: selectList);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DropDownListFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor(htmlHelper: self, expression: expression, selectList: selectList, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func DropDownListFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>, optionLabel : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor(htmlHelper: self, expression: expression, selectList: selectList, optionLabel: optionLabel);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ListBox(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ListBox(expression : Optional<dotnet.System.String>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, selectList: selectList);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ListBoxFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, selectList : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBoxFor(htmlHelper: self, expression: expression, selectList: selectList);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationMessage(expression : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationMessage(expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, message: message);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationMessage(expression : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationMessage(expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, message: message, tag: tag);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationMessage(expression : Optional<dotnet.System.String>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression, message: message, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor(htmlHelper: self, expression: expression, message: message);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.Object)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor(htmlHelper: self, expression: expression, message: message, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>, System.String, System.String)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ValidationMessageFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor(htmlHelper: self, expression: expression, message: message, tag: tag);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(excludePropertyErrors : Bool) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), excludePropertyErrors: excludePropertyErrors);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), message: message);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), message: message, tag: tag);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(excludePropertyErrors : Bool, message : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), excludePropertyErrors: excludePropertyErrors, message: message);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), message: message, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String, System.Object, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), message: message, htmlAttributes: htmlAttributes, tag: tag);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, tag : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), excludePropertyErrors: excludePropertyErrors, message: message, tag: tag);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, bool, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValidationSummary(excludePropertyErrors : Bool, message : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), excludePropertyErrors: excludePropertyErrors, message: message, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD System.String Value(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func Value(expression : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.Value(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), expression: expression);
    }
}

// EXTENSION METHOD System.String ValueFor<TModel, TResult>(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TModel>, System.Linq.Expressions.Expression<System.Func<TModel,TResult>>)
extension aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper_1 {
    public func ValueFor<UTResult : SGBridgeGenericValue>(expression : Optional<dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<TModel,UTResult>>>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueFor(htmlHelper: self, expression: expression);
    }
}

// EXTENSION METHOD System.String ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValueForModel() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.String ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper, System.String)
extension Microsoft_AspNetCore_Mvc_Rendering_IHtmlHelper {
    public func ValueForModel(format : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(htmlHelper: aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper(hndl: __copy_handle(self.get_handle())), format: format);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.String)
extension Microsoft_AspNetCore_Mvc_IViewComponentHelper {
    public func InvokeAsync(name : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentHelper(hndl: __copy_handle(self.get_handle())), name: name);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.Type)
extension Microsoft_AspNetCore_Mvc_IViewComponentHelper {
    public func InvokeAsync(componentType : dotnet.System.Type_) throws -> dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(helper: aspnetcore.Microsoft.AspNetCore.Mvc.IViewComponentHelper(hndl: __copy_handle(self.get_handle())), componentType: componentType);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.Object)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper, System.Object)

// EXTENSION METHOD System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<Microsoft.AspNetCore.Html.IHtmlContent> InvokeAsync<TComponent>(Microsoft.AspNetCore.Mvc.IViewComponentHelper)

// EXTENSION METHOD Microsoft.AspNetCore.Html.IHtmlContent GetHtml(Microsoft.AspNetCore.Antiforgery.IAntiforgery, Microsoft.AspNetCore.Http.HttpContext)
extension Microsoft_AspNetCore_Antiforgery_IAntiforgery {
    public func GetHtml(httpContext : aspnetcore.Microsoft.AspNetCore.Http.HttpContext) throws -> aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions.GetHtml(antiforgery: aspnetcore.Microsoft.AspNetCore.Antiforgery.IAntiforgery(hndl: __copy_handle(self.get_handle())), httpContext: httpContext);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.String, System.String, System.Object, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator {
    public func GenerateForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, actionName : Optional<dotnet.System.String>, controllerName : Optional<dotnet.System.String>, fragment : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateForm(generator: aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator(hndl: __copy_handle(self.get_handle())), viewContext: viewContext, actionName: actionName, controllerName: controllerName, fragment: fragment, routeValues: routeValues, method: method, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext, System.String, System.Object, System.String, System.String, System.Object)
extension Microsoft_AspNetCore_Mvc_ViewFeatures_IHtmlGenerator {
    public func GenerateRouteForm(viewContext : Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.ViewContext>, routeName : Optional<dotnet.System.String>, routeValues : Optional<dotnet.System.Object>, fragment : Optional<dotnet.System.String>, method : Optional<dotnet.System.String>, htmlAttributes : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.Rendering.TagBuilder> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateRouteForm(generator: aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator(hndl: __copy_handle(self.get_handle())), viewContext: viewContext, routeName: routeName, routeValues: routeValues, fragment: fragment, method: method, htmlAttributes: htmlAttributes);
    }
}

// EXTENSION METHOD System.String GetSimpleDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)
extension aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer {
    public func GetSimpleDisplayText() throws -> Optional<dotnet.System.String> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions.GetSimpleDisplayText(modelExplorer: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetModelExplorerForType(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Type, System.Object)
extension Microsoft_AspNetCore_Mvc_ModelBinding_IModelMetadataProvider {
    public func GetModelExplorerForType(modelType : Optional<dotnet.System.Type_>, model : Optional<dotnet.System.Object>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer> {
        return try aspnetcore.Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions.GetModelExplorerForType(provider: aspnetcore.Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider(hndl: __copy_handle(self.get_handle())), modelType: modelType, model: model);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewOptions(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViewOptions(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewOptions(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewComponentsAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddViewComponentsAsServices() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewComponentsAsServices(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddSessionStateTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddSessionStateTempDataProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddSessionStateTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddCookieTempDataProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder, System.Action<Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcBuilder {
    public func AddCookieTempDataProvider(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddCookieTempDataProvider(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViews() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCookieTempDataProvider() throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddViews(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddViews(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func AddCookieTempDataProvider(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddCookieTempDataProvider(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder, System.Action<Microsoft.AspNetCore.Mvc.MvcViewOptions>)
extension Microsoft_Extensions_DependencyInjection_IMvcCoreBuilder {
    public func ConfigureViews(setupAction : Optional<dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>>) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.ConfigureViews(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func ConfigureViews(setupAction : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>) throws -> Void) throws -> Optional<aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder> {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Mvc.MvcViewOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.ConfigureViews(builder: aspnetcore.Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

