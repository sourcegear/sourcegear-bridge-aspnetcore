// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions
public struct LocalizationServiceCollectionExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
// docid: M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
    /**
    
            Adds services required for application localization.
            

    - Parameter services: The  to add the services to.
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddLocalization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_LocalizationServiceCollectionExtensions_IServiceCollection__AddLocalization_0__1__IServiceCollection(&__thrown, services.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})
    /**
    
            Adds services required for application localization.
            

    - Parameter services: The  to add the services to.
    - Parameter setupAction: 
            An  to configure the .
            
    - Returns: The  so that additional calls can be chained.

    */
    public static func AddLocalization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_LocalizationServiceCollectionExtensions_IServiceCollection__AddLocalization_0__2__IServiceCollection_System_Action_Microsoft_Extensions_Localization_LocalizationOptions_(&__thrown, services.get_handle(), setupAction.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddLocalization(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, setupAction : @escaping (aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try AddLocalization(services: services, setupAction: del_setupAction);
    }
} // LocalizationServiceCollectionExtensions


}

// Microsoft.Extensions.Localization
extension Microsoft.Extensions.Localization {
// type: Microsoft.Extensions.Localization.IResourceNamesCache
    /**
    
            Represents a cache of string names in resources.
            

    */
open class IResourceNamesCache
    :
    SGBridgeGenericValue,
    Microsoft_Extensions_Localization_IResourceNamesCache
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_IResourceNamesCache_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.Generic.IList<System.String> GetOrAdd(System.String, System.Func<System.String,System.Collections.Generic.IList<System.String>>)
// docid: M:Microsoft.Extensions.Localization.IResourceNamesCache.GetOrAdd(System.String,System.Func{System.String,System.Collections.Generic.IList{System.String}})
    /**
    
            Adds a set of resource names to the cache by using the specified function, if the name does not already exist.
            

    - Parameter name: The resource name to add string names for.
    - Parameter valueFactory: The function used to generate the string names for the resource.
    - Returns: The string names for the resource.

    */
    open func GetOrAdd(name : dotnet.System.String, valueFactory : dotnet.System.Func_2<dotnet.System.String,dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_IResourceNamesCache_System_Collections_Generic_IList_string___GetOrAdd_0__2__String_System_Func_string_System_Collections_Generic_System_Collections_Generic_IList_string__(&__thrown, self.get_handle(), name.get_handle(), valueFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open func GetOrAdd(name : dotnet.System.String, valueFactory : @escaping (dotnet.System.String) throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        let del_valueFactory = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>(valueFactory);
        return try GetOrAdd(name: name, valueFactory: del_valueFactory);
    }
} // IResourceNamesCache


// type: Microsoft.Extensions.Localization.LocalizationOptions
    /**
    
            Provides programmatic configuration for localization.
            

    */
open class LocalizationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_LocalizationOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Localization.LocalizationOptions.#ctor
    /**
    
            Creates a new .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_LocalizationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ResourcesPath()
// docid: M:Microsoft.Extensions.Localization.LocalizationOptions.get_ResourcesPath
    open func get_ResourcesPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_LocalizationOptions_String__get_ResourcesPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ResourcesPath(System.String)
// docid: M:Microsoft.Extensions.Localization.LocalizationOptions.set_ResourcesPath(System.String)
    open func set_ResourcesPath(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Extensions_Localization_LocalizationOptions_void__set_ResourcesPath_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The relative path under application root where resource files are located.
            

    */
    open var ResourcesPath : dotnet.System.String {
        get {
            return try! get_ResourcesPath();
        }
        set(v) {
            return try! set_ResourcesPath(value: v);
        }
    }
} // LocalizationOptions


// type: Microsoft.Extensions.Localization.ResourceLocationAttribute
    /**
    
            Provides the location of resources for an Assembly.
            

    */
open class ResourceLocationAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_ResourceLocationAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Localization.ResourceLocationAttribute.#ctor(System.String)
    /**
    
            Creates a new .
            

    - Parameter resourceLocation: The location of resources for this Assembly.
    */
    public init(resourceLocation : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_ResourceLocationAttribute_ctor_0__1__String(&__thrown, resourceLocation.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ResourceLocation()
// docid: M:Microsoft.Extensions.Localization.ResourceLocationAttribute.get_ResourceLocation
    open func get_ResourceLocation() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceLocationAttribute_String__get_ResourceLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The location of resources for this Assembly.
            

    */
    open var ResourceLocation : dotnet.System.String {
        get {
            return try! get_ResourceLocation();
        }
    }
} // ResourceLocationAttribute


// type: Microsoft.Extensions.Localization.ResourceManagerStringLocalizer
    /**
    
            An  that uses the  and
             to provide localized strings.
            

    */
open class ResourceManagerStringLocalizer
    :
    dotnet.System.Object,
    Microsoft_Extensions_Localization_IStringLocalizer
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_ResourceManagerStringLocalizer_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Resources.ResourceManager, System.Reflection.Assembly, System.String, Microsoft.Extensions.Localization.IResourceNamesCache, Microsoft.Extensions.Logging.ILogger)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizer.#ctor(System.Resources.ResourceManager,System.Reflection.Assembly,System.String,Microsoft.Extensions.Localization.IResourceNamesCache,Microsoft.Extensions.Logging.ILogger)
    /**
    
            Creates a new .
            

    - Parameter resourceManager: The  to read strings from.
    - Parameter resourceAssembly: The  that contains the strings as embedded resources.
    - Parameter baseName: The base name of the embedded resource that contains the strings.
    - Parameter resourceNamesCache: Cache of the list of strings for a given resource assembly name.
    - Parameter logger: The .
    */
    public init(resourceManager : dotnet.System.Resources.ResourceManager, resourceAssembly : dotnet.System.Reflection.Assembly, baseName : dotnet.System.String, resourceNamesCache : aspnetcore.Microsoft.Extensions.Localization.IResourceNamesCache, logger : aspnetcore.Microsoft.Extensions.Logging.ILogger) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_ResourceManagerStringLocalizer_ctor_0__5__ResourceManager_Assembly_String_IResourceNamesCache_ILogger(&__thrown, resourceManager.get_handle(), resourceAssembly.get_handle(), baseName.get_handle(), resourceNamesCache.get_handle(), logger.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<Microsoft.Extensions.Localization.LocalizedString> GetAllStrings(bool)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizer.GetAllStrings(System.Boolean)
    /**
    */
    open func GetAllStrings(includeParentCultures : Bool) throws -> dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.Extensions.Localization.LocalizedString> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceManagerStringLocalizer_System_Collections_Generic_IEnumerable_Microsoft_Extensions_Localization_LocalizedString___GetAllStrings_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(includeParentCultures ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Localization.LocalizedString get_Item(System.String)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizer.get_Item(System.String)
    open func get_Item(name : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceManagerStringLocalizer_LocalizedString__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Extensions.Localization.LocalizedString get_Item(System.String, System.Object[])
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizer.get_Item(System.String,System.Object[])
    open func get_Item(name : dotnet.System.String, arguments : dotnet.System_Arr<dotnet.System.Object>) throws -> aspnetcore.Microsoft.Extensions.Localization.LocalizedString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceManagerStringLocalizer_LocalizedString__get_Item_0__2__String_ObjectArray(&__thrown, self.get_handle(), name.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.LocalizedString(hndl : __return);
        }
    }
} // ResourceManagerStringLocalizer


// type: Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory
    /**
    
            An  that creates instances of .
            

    */
open class ResourceManagerStringLocalizerFactory
    :
    dotnet.System.Object,
    Microsoft_Extensions_Localization_IStringLocalizerFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_ResourceManagerStringLocalizerFactory_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Localization.LocalizationOptions>, Microsoft.Extensions.Logging.ILoggerFactory)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Localization.LocalizationOptions},Microsoft.Extensions.Logging.ILoggerFactory)
    /**
    
            Creates a new .
            

    - Parameter localizationOptions: The .
    - Parameter loggerFactory: The .
    */
    public init(localizationOptions : aspnetcore.Microsoft.Extensions.Options.IOptions_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>, loggerFactory : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_ResourceManagerStringLocalizerFactory_ctor_0__2__Microsoft_Extensions_Options_IOptions_Microsoft_Extensions_Localization_LocalizationOptions__ILoggerFactory(&__thrown, localizationOptions.get_handle(), loggerFactory.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.Extensions.Localization.IStringLocalizer Create(System.Type)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory.Create(System.Type)
    /**
    
            Creates a  using the  and
             of the specified .
            

    - Parameter resourceSource: The .
    - Returns: The .

    */
    open /* method final */ func Create(resourceSource : dotnet.System.Type_) throws -> aspnetcore.Microsoft.Extensions.Localization.IStringLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceManagerStringLocalizerFactory_IStringLocalizer__Create_0__1__Type(&__thrown, self.get_handle(), resourceSource.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.IStringLocalizer(hndl : __return);
        }
    }
    // Microsoft.Extensions.Localization.IStringLocalizer Create(System.String, System.String)
// docid: M:Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory.Create(System.String,System.String)
    /**
    
            Creates a .
            

    - Parameter baseName: The base name of the resource to load strings from.
    - Parameter location: The location to load resources from.
    - Returns: The .

    */
    open /* method final */ func Create(baseName : dotnet.System.String, location : dotnet.System.String) throws -> aspnetcore.Microsoft.Extensions.Localization.IStringLocalizer {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceManagerStringLocalizerFactory_IStringLocalizer__Create_0__2__String_String(&__thrown, self.get_handle(), baseName.get_handle(), location.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.Localization.IStringLocalizer(hndl : __return);
        }
    }
} // ResourceManagerStringLocalizerFactory


// type: Microsoft.Extensions.Localization.ResourceNamesCache
    /**
    
            An implementation of  backed by a .
            

    */
open class ResourceNamesCache
    :
    dotnet.System.Object,
    Microsoft_Extensions_Localization_IResourceNamesCache
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_ResourceNamesCache_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Extensions.Localization.ResourceNamesCache.#ctor
    /**
    
            Creates a new 
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_ResourceNamesCache_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IList<System.String> GetOrAdd(System.String, System.Func<System.String,System.Collections.Generic.IList<System.String>>)
// docid: M:Microsoft.Extensions.Localization.ResourceNamesCache.GetOrAdd(System.String,System.Func{System.String,System.Collections.Generic.IList{System.String}})
    /**
    */
    open /* method final */ func GetOrAdd(name : dotnet.System.String, valueFactory : dotnet.System.Func_2<dotnet.System.String,dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>) throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_ResourceNamesCache_System_Collections_Generic_IList_string___GetOrAdd_0__2__String_System_Func_string_System_Collections_Generic_System_Collections_Generic_IList_string__(&__thrown, self.get_handle(), name.get_handle(), valueFactory.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IList_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // delegate closure overload
    open /* method final */ func GetOrAdd(name : dotnet.System.String, valueFactory : @escaping (dotnet.System.String) throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.String>) throws -> Optional<dotnet.System.Collections.Generic.IList_1<dotnet.System.String>> {
        let del_valueFactory = try dotnet.System.Func_2<dotnet.System.String,dotnet.System.Collections.Generic.IList_1<dotnet.System.String>>(valueFactory);
        return try GetOrAdd(name: name, valueFactory: del_valueFactory);
    }
} // ResourceNamesCache


// type: Microsoft.Extensions.Localization.RootNamespaceAttribute
    /**
    
            Provides the RootNamespace of an Assembly. The RootNamespace of the assembly is used by Localization to
            determine the resource name to look for when RootNamespace differs from the AssemblyName.
            

    */
open class RootNamespaceAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_Extensions_Localization_RootNamespaceAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:Microsoft.Extensions.Localization.RootNamespaceAttribute.#ctor(System.String)
    /**
    
            Creates a new .
            

    - Parameter rootNamespace: The RootNamespace for this Assembly.
    */
    public init(rootNamespace : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Extensions_Localization_RootNamespaceAttribute_ctor_0__1__String(&__thrown, rootNamespace.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_RootNamespace()
// docid: M:Microsoft.Extensions.Localization.RootNamespaceAttribute.get_RootNamespace
    open func get_RootNamespace() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_Localization_RootNamespaceAttribute_String__get_RootNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    
            The RootNamespace of this Assembly. The RootNamespace of the assembly is used by Localization to
            determine the resource name to look for when RootNamespace differs from the AssemblyName.
            

    */
    open var RootNamespace : dotnet.System.String {
        get {
            return try! get_RootNamespace();
        }
    }
} // RootNamespaceAttribute


}



public protocol Microsoft_Extensions_Localization_IResourceNamesCache
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddLocalization() throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.Extensions.Localization.LocalizationOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddLocalization(setupAction : dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: setupAction);
    }
    // delegate closure overload
    public func AddLocalization(setupAction : @escaping (aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_setupAction = try dotnet.System.Action_1<aspnetcore.Microsoft.Extensions.Localization.LocalizationOptions>(setupAction);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), setupAction: del_setupAction);
    }
}

