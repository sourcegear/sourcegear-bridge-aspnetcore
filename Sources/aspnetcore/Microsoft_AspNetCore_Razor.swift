// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Razor
// Microsoft.AspNetCore.Razor.TagHelpers
extension Microsoft.AspNetCore.Razor.TagHelpers {
// type: Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent
    /**
    
            Default concrete .
            

    */
open class DefaultTagHelperContent
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent Append(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.Append(System.String)
    /**
    */
    open override func Append(unencoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_TagHelperContent__Append_0__1__String(&__thrown, self.get_handle(), unencoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    */
    open override func AppendHtml(htmlContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_TagHelperContent__AppendHtml_0__1__IHtmlContent(&__thrown, self.get_handle(), htmlContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendHtml(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.AppendHtml(System.String)
    /**
    */
    open override func AppendHtml(encoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_TagHelperContent__AppendHtml_0__1__String(&__thrown, self.get_handle(), encoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open override func CopyTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_void__CopyTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open override func MoveTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_void__MoveTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent Clear()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.Clear
    /**
    */
    open override func Clear() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_TagHelperContent__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Reinitialize()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.Reinitialize
    /**
    */
    open override func Reinitialize() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_void__Reinitialize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetContent()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.GetContent
    /**
    */
    open override func GetContent() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_String__GetContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetContent(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.GetContent(System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open override func GetContent(encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_String__GetContent_0__1__HtmlEncoder(&__thrown, self.get_handle(), encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open override func WriteTo(writer : Optional<dotnet.System.IO.TextWriter>, encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsModified()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.get_IsModified
    open override func get_IsModified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_bool__get_IsModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyOrWhiteSpace()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.DefaultTagHelperContent.get_IsEmptyOrWhiteSpace
    open override func get_IsEmptyOrWhiteSpace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_DefaultTagHelperContent_bool__get_IsEmptyOrWhiteSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    */
    open override var IsEmptyOrWhiteSpace : Bool {
        get {
            return try! get_IsEmptyOrWhiteSpace();
        }
    }
    /**
    */
    open override var IsModified : Bool {
        get {
            return try! get_IsModified();
        }
    }
} // DefaultTagHelperContent


// type: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute
    /**
    
            Used to override an  property's HTML attribute name.
            

    */
public final class HtmlAttributeNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.#ctor
    /**
    
            Instantiates a new instance of the  class with 
            equal to null.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.#ctor(System.String)
    /**
    
            Instantiates a new instance of the  class.
            

    - Parameter name: 
            HTML attribute name for the associated property. Must be null or empty if associated property does
            not have a public setter and is compatible with
             where TKey is
            . Otherwise must not be null or empty.
            
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DictionaryAttributePrefix()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.get_DictionaryAttributePrefix
    public func get_DictionaryAttributePrefix() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_String__get_DictionaryAttributePrefix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DictionaryAttributePrefix(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.set_DictionaryAttributePrefix(System.String)
    public func set_DictionaryAttributePrefix(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_void__set_DictionaryAttributePrefix_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_DictionaryAttributePrefixSet()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute.get_DictionaryAttributePrefixSet
    public func get_DictionaryAttributePrefixSet() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNameAttribute_bool__get_DictionaryAttributePrefixSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets or sets the prefix used to match HTML attribute names. Matching attributes are added to the
            associated property (an ).
            

    */
    public var DictionaryAttributePrefix : Optional<dotnet.System.String> {
        get {
            return try! get_DictionaryAttributePrefix();
        }
        set(v) {
            return try! set_DictionaryAttributePrefix(value: v!);
        }
    }
    /**
    
            Gets an indication whether  has been set. Used to distinguish an
            uninitialized  value from an explicit null setting.
            

    */
    public var DictionaryAttributePrefixSet : Bool {
        get {
            return try! get_DictionaryAttributePrefixSet();
        }
    }
    /**
    
            HTML attribute name of the associated property.
            

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // HtmlAttributeNameAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNotBoundAttribute
    /**
    
            Indicates the associated  property should not be bound to HTML attributes.
            

    */
public final class HtmlAttributeNotBoundAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNotBoundAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNotBoundAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNotBoundAttribute.#ctor
    /**
    
            Instantiates a new instance of the  class.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeNotBoundAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // HtmlAttributeNotBoundAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle
public struct HtmlAttributeValueStyle : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeValueStyle_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle DoubleQuotes
    public static var DoubleQuotes : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle(val: Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeValueStyle_get_DoubleQuotes());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle SingleQuotes
    public static var SingleQuotes : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle(val: Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeValueStyle_get_SingleQuotes());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle NoQuotes
    public static var NoQuotes : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle(val: Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeValueStyle_get_NoQuotes());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle Minimized
    public static var Minimized : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle(val: Microsoft_AspNetCore_Razor_TagHelpers_HtmlAttributeValueStyle_get_Minimized());
            return __return;
        }
    }
} // HtmlAttributeValueStyle


// type: Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute
    /**
    
            Provides an 's target.
            

    */
public final class HtmlTargetElementAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // static field: System.String ElementCatchAllTarget
    public class var ElementCatchAllTarget : Optional<dotnet.System.String> {
        get {
        let __h___return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_get_ElementCatchAllTarget();
        let __return = (__h___return != nil) ? dotnet.System.String(hndl: __h___return!) : nil;
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.#ctor
    /**
    
            Instantiates a new instance of the  class that targets all HTML
            elements with the required .
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.#ctor(System.String)
    /**
    
            Instantiates a new instance of the  class with the given
             as its  value.
            

    - Parameter tag: 
            The HTML tag the  targets.
            
    */
    public init(tag : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_ctor_0__1__String(&__thrown, tag?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Tag()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.get_Tag
    public func get_Tag() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_String__get_Tag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Attributes()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.get_Attributes
    public func get_Attributes() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_String__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Attributes(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.set_Attributes(System.String)
    public func set_Attributes(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_void__set_Attributes_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagStructure get_TagStructure()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.get_TagStructure
    public func get_TagStructure() throws -> aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_TagStructure__get_TagStructure_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure(val: __return);
        }
    }
    // [IsSpecialName] void set_TagStructure(Microsoft.AspNetCore.Razor.TagHelpers.TagStructure)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.set_TagStructure(Microsoft.AspNetCore.Razor.TagHelpers.TagStructure)
    public func set_TagStructure(value : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_void__set_TagStructure_0__1__TagStructure(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ParentTag()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.get_ParentTag
    public func get_ParentTag() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_String__get_ParentTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ParentTag(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute.set_ParentTag(System.String)
    public func set_ParentTag(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_HtmlTargetElementAttribute_void__set_ParentTag_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            A comma-separated  of attribute selectors the HTML element must match for the
             to run. (ASTERISK) at the end of an attribute name acts as a prefix match. A value
            surrounded by square brackets is handled as a CSS attribute value selector. Operators ^=, $= and
            = are supported e.g. "name", "[name]", "[name=value]", "[ name ^= 'value' ]".
            

    */
    public var Attributes : Optional<dotnet.System.String> {
        get {
            return try! get_Attributes();
        }
        set(v) {
            return try! set_Attributes(value: v!);
        }
    }
    /**
    
            The required HTML element name of the direct parent. A null value indicates any HTML element name is
            allowed.
            

    */
    public var ParentTag : Optional<dotnet.System.String> {
        get {
            return try! get_ParentTag();
        }
        set(v) {
            return try! set_ParentTag(value: v!);
        }
    }
    /**
    
            The HTML tag the  targets. A (ASTERISK) value indicates this 
            targets all HTML elements with the required .
            

    */
    public var Tag : Optional<dotnet.System.String> {
        get {
            return try! get_Tag();
        }
    }
    /**
    
            The expected tag structure. Defaults to .
            

    */
    public var TagStructure : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure {
        get {
            return try! get_TagStructure();
        }
        set(v) {
            return try! set_TagStructure(value: v);
        }
    }
} // HtmlTargetElementAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
    /**
    
            Contract used to filter matching HTML elements.
            Marker interface for s.
            

    */
open class ITagHelper
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
} // ITagHelper


// type: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent
    /**
    
            Contract used to modify an HTML element.
            

    */
open class ITagHelperComponent
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    
            Initializes the  with the given . Additions to
             should be done within this method to ensure they're added prior to
            executing the children.
            

    - Parameter context: Contains information associated with the current HTML tag.
    */
    open func Init(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    
            Asynchronously executes the  with the given  and
            .
            

    - Parameter context: Contains information associated with the current HTML tag.
    - Parameter output: A stateful HTML element used to generate an HTML tag.
    - Returns: A  that on completion updates the .

    */
    open func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelperComponent.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // ITagHelperComponent


// type: Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder
    /**
    
            A  that does not encode. Should not be used when writing directly to a response
            expected to contain valid HTML.
            

    */
public final class NullHtmlEncoder
    :
    dotnet.System.Text.Encodings.Web.HtmlEncoder
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // System.String Encode(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.Encode(System.String)
    /**
    */
    public func Encode(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_String__Encode_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Encode(System.IO.TextWriter, System.Char[], System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.Encode(System.IO.TextWriter,System.Char[],System.Int32,System.Int32)
    /**
    */
    public override func Encode(output : Optional<dotnet.System.IO.TextWriter>, value : Optional<dotnet.System_Arr<dotnet.System.Char>>, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_void__Encode_0__4__TextWriter_CharArray_i32_i32(&__thrown, self.get_handle(), output?.get_handle() ?? nil, (value?.get_handle()), startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Encode(System.IO.TextWriter, System.String, System.Int32, System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.Encode(System.IO.TextWriter,System.String,System.Int32,System.Int32)
    public override func Encode(output : Optional<dotnet.System.IO.TextWriter>, value : Optional<dotnet.System.String>, startIndex : Swift.Int32, characterCount : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_void__Encode_0__4__TextWriter_String_i32_i32(&__thrown, self.get_handle(), output?.get_handle() ?? nil, value?.get_handle() ?? nil, startIndex, characterCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 FindFirstCharacterToEncode(System.Char*, System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.FindFirstCharacterToEncode(System.Char*,System.Int32)
    /**
    */
    public override func FindFirstCharacterToEncode(text : UnsafeMutablePointer<Swift.Int16>?, textLength : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_i32__FindFirstCharacterToEncode_0__2__pchar_i32(&__thrown, self.get_handle(), text, textLength);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryEncodeUnicodeScalar(System.Int32, System.Char*, System.Int32, ref System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.TryEncodeUnicodeScalar(System.Int32,System.Char*,System.Int32,System.Int32@)
    /**
    */
    public override func TryEncodeUnicodeScalar(unicodeScalar : Swift.Int32, buffer : UnsafeMutablePointer<Swift.Int16>?, bufferLength : Swift.Int32, numberOfCharactersWritten : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_numberOfCharactersWritten = numberOfCharactersWritten;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_bool__TryEncodeUnicodeScalar_0__4__i32_pchar_i32_outi32(&__thrown, self.get_handle(), unicodeScalar, buffer, bufferLength, &_tmp_out_numberOfCharactersWritten);
        let _tmp2_numberOfCharactersWritten = _tmp_out_numberOfCharactersWritten;
            numberOfCharactersWritten = _tmp2_numberOfCharactersWritten;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool WillEncode(System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.WillEncode(System.Int32)
    /**
    */
    public override func WillEncode(unicodeScalar : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_bool__WillEncode_0__1__i32(&__thrown, self.get_handle(), unicodeScalar);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder get_Default()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.get_Default
    public class func get_Default() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_NullHtmlEncoder__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_MaxOutputCharactersPerInputCharacter()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder.get_MaxOutputCharactersPerInputCharacter
    public override func get_MaxOutputCharactersPerInputCharacter() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_NullHtmlEncoder_i32__get_MaxOutputCharactersPerInputCharacter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (static prop override) [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.NullHtmlEncoder get_Default()
    /**
    */
    public override var MaxOutputCharactersPerInputCharacter : Swift.Int32 {
        get {
            return try! get_MaxOutputCharactersPerInputCharacter();
        }
    }
} // NullHtmlEncoder


// type: Microsoft.AspNetCore.Razor.TagHelpers.OutputElementHintAttribute
    /**
    
            Provides a hint of the 's output element.
            

    */
public final class OutputElementHintAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_OutputElementHintAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_OutputElementHintAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.OutputElementHintAttribute.#ctor(System.String)
    /**
    
            Instantiates a new instance of the  class.
            

    - Parameter outputElement: 
            The HTML element the  may output.
            
    */
    public init(outputElement : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_OutputElementHintAttribute_ctor_0__1__String(&__thrown, outputElement?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_OutputElement()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.OutputElementHintAttribute.get_OutputElement
    public func get_OutputElement() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_OutputElementHintAttribute_String__get_OutputElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The HTML element the  may output.
            

    */
    public var OutputElement : Optional<dotnet.System.String> {
        get {
            return try! get_OutputElement();
        }
    }
} // OutputElementHintAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
    /**
    
            A read-only collection of s.
            

    */
open class ReadOnlyTagHelperAttributeList
    :
    dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.Collections.Generic.IList<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.#ctor(System.Collections.Generic.IList{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})
    /**
    
            Instantiates a new instance of  with the specified
            .
            

    - Parameter attributes: The collection to wrap.
    */
    public init(attributes : Optional<dotnet.System.Collections.Generic.IList_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_ctor_0__1__System_Collections_Generic_IList_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_(&__thrown, (attributes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsName(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.ContainsName(System.String)
    /**
    
            Determines whether a  with 
            matching  exists in the collection.
            

    - Parameter name: The  of the
             to get.
    - Returns: 
            true if a  with the same
             exists in the collection; otherwise, false.
            

    */
    open func ContainsName(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_bool__ContainsName_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetAttribute(System.String, ref Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.TryGetAttribute(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute@)
    /**
    
            Retrieves the first  with 
            matching .
            

    - Parameter name: The  of the
             to get.
    - Parameter attribute: When this method returns, the first  with
             matching , if found; otherwise,
            null.
    - Returns: true if a  with the same
             exists in the collection; otherwise, false.

    */
    open func TryGetAttribute(name : Optional<dotnet.System.String>, attribute : inout Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_attribute = (attribute != nil) ? (attribute!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_bool__TryGetAttribute_0__2__String_outTagHelperAttribute(&__thrown, self.get_handle(), name?.get_handle() ?? nil, &_tmp_out_attribute);
        let __h__tmp2_attribute = _tmp_out_attribute;
        let _tmp2_attribute = (__h__tmp2_attribute != nil) ? aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(hndl: __h__tmp2_attribute!) : nil;
            attribute = _tmp2_attribute;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetAttributes(System.String, ref System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.TryGetAttributes(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute}@)
    /**
    
            Retrieves s in the collection with
             matching .
            

    - Parameter name: The  of the
            s to get.
    - Parameter attributes: When this method returns, the s with
             matching .
    - Returns: true if at least one  with the same
             exists in the collection; otherwise, false.

    */
    open func TryGetAttributes(name : Optional<dotnet.System.String>, attributes : inout Optional<dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_attributes = (attributes != nil) ? (attributes!.get_handle()) : nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_bool__TryGetAttributes_0__2__String_outSystem_Collections_Generic_IReadOnlyList_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_(&__thrown, self.get_handle(), name?.get_handle() ?? nil, &_tmp_out_attributes);
        let __h__tmp2_attributes = _tmp_out_attributes;
        let _tmp2_attributes = (__h__tmp2_attributes != nil) ? dotnet.System.Collections.Generic.IReadOnlyList_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>(hndl: __h__tmp2_attributes!) : nil;
            attributes = _tmp2_attributes;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 IndexOfName(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.IndexOfName(System.String)
    /**
    
            Searches for a  who's 
            case-insensitively matches  and returns the zero-based index of the first
            occurrence.
            

    - Parameter name: The  to locate in the collection.
    - Returns: The zero-based index of the first matching  within the collection,
            if found; otherwise, -1.

    */
    open func IndexOfName(name : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_i32__IndexOfName_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute get_Item(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList.get_Item(System.String)
    open func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_ReadOnlyTagHelperAttributeList_TagHelperAttribute__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ReadOnlyTagHelperAttributeList


// type: Microsoft.AspNetCore.Razor.TagHelpers.RestrictChildrenAttribute
    /**
    
            Restricts children of the 's element.
            

    */
public final class RestrictChildrenAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_RestrictChildrenAttribute_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_RestrictChildrenAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, System.String[])
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.RestrictChildrenAttribute.#ctor(System.String,System.String[])
    /**
    
            Instantiates a new instance of the  class.
            

    - Parameter childTag: 
            The tag name of an element allowed as a child.
            
    - Parameter childTags: 
            Additional names of elements allowed as children.
            
    */
    public init(childTag : Optional<dotnet.System.String>, childTags : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_RestrictChildrenAttribute_ctor_0__2__String_StringArray(&__thrown, childTag?.get_handle() ?? nil, (childTags?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.String> get_ChildTags()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.RestrictChildrenAttribute.get_ChildTags
    public func get_ChildTags() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_RestrictChildrenAttribute_System_Collections_Generic_IEnumerable_string___get_ChildTags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Get the names of elements allowed as children.
            

    */
    public var ChildTags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>> {
        get {
            return try! get_ChildTags();
        }
    }
} // RestrictChildrenAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelper
    /**
    
            An abstract base class for .
            

    */
open class TagHelper
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    
            Initializes the  with the given . Additions to
             should be done within this method to ensure they're added prior to
            executing the children.
            

    - Parameter context: Contains information associated with the current HTML tag.
    */
    open func Init(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    
            Synchronously executes the  with the given  and
            .
            

    - Parameter context: Contains information associated with the current HTML tag.
    - Parameter output: A stateful HTML element used to generate an HTML tag.
    */
    open func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    
            Asynchronously executes the  with the given  and
            .
            

    - Parameter context: Contains information associated with the current HTML tag.
    - Parameter output: A stateful HTML element used to generate an HTML tag.
    - Returns: A  that on completion updates the .

    */
    open func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelper_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    
            When a set of s are executed, their 's
            are first invoked in the specified ; then their
            's are invoked in the specified
            . Lower values are executed first.
            

    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // TagHelper


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute
    /**
    
            An HTML tag helper attribute.
            

    */
open class TagHelperAttribute
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContentContainer,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.#ctor(System.String)
    /**
    
            Instantiates a new instance of  with the specified .
             is set to  and  to
            null.
            

    - Parameter name: The  of the attribute.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.#ctor(System.String,System.Object)
    /**
    
            Instantiates a new instance of  with the specified 
            and .  is set to .
            

    - Parameter name: The  of the attribute.
    - Parameter value: The  of the attribute.
    */
    public init(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_ctor_0__2__String_Object(&__thrown, name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Object, Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.#ctor(System.String,System.Object,Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle)
    /**
    
            Instantiates a new instance of  with the specified ,
             and .
            

    - Parameter name: The  of the new instance.
    - Parameter value: The  of the new instance.
    - Parameter valueStyle: The  of the new instance.
    */
    public init(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>, valueStyle : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_ctor_0__3__String_Object_HtmlAttributeValueStyle(&__thrown, name?.get_handle() ?? nil, value?.get_handle() ?? nil, valueStyle.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.Equals(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    */
    open func Equals(other : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_bool__Equals_0__1__TagHelperAttribute(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open /* method final */ func WriteTo(writer : Optional<dotnet.System.IO.TextWriter>, encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open /* method final */ func CopyTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_void__CopyTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open /* method final */ func MoveTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_void__MoveTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Object)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.Equals(System.Object)
    /**
    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.GetHashCode
    /**
    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle get_ValueStyle()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute.get_ValueStyle
    open func get_ValueStyle() throws -> aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_HtmlAttributeValueStyle__get_ValueStyle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle(val: __return);
        }
    }
    /**
    
            Gets the name of the attribute.
            

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    
            Gets the value of the attribute.
            

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
    /**
    
            Gets the value style of the attribute.
            

    */
    open var ValueStyle : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle {
        get {
            return try! get_ValueStyle();
        }
    }
} // TagHelperAttribute


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList
    /**
    
            A collection of s.
            

    */
open class TagHelperAttributeList
    :
    aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.#ctor
    /**
    
            Instantiates a new instance of  with an empty collection.
            

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})
    /**
    
            Instantiates a new instance of  with the specified
            .
            

    - Parameter attributes: The collection to wrap.
    */
    public init(attributes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_ctor_0__1__System_Collections_Generic_IEnumerable_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_(&__thrown, (attributes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.List<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.#ctor(System.Collections.Generic.List{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})
    /**
    
            Instantiates a new instance of  with the specified
            .
            

    - Parameter attributes: The collection to wrap.
    */
    public init(attributes : Optional<dotnet.System.Collections.Generic.List_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_ctor_0__1__System_Collections_Generic_List_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttribute_(&__thrown, (attributes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetAttribute(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.SetAttribute(System.String,System.Object)
    /**
    
            Replaces the first  with  matching
             and removes any additional matching s. If a
            matching  is not found, adds a  with
             and  to the end of the collection.

    - Parameter name: 
            The  of the  to set.
            
    - Parameter value: 
            The  to set.
            
    */
    open func SetAttribute(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__SetAttribute_0__2__String_Object(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.SetAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    
            Replaces the first  with  matching
            's  and removes any additional matching
            s. If a matching  is not found, adds the
            specified  to the end of the collection.
            

    - Parameter attribute: 
            The  to set.
            
    */
    open func SetAttribute(attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__SetAttribute_0__1__TagHelperAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.Object)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.Add(System.String,System.Object)
    /**
    
            Adds a  to the end of the collection with the specified
             and .
            

    - Parameter name: The  of the attribute to add.
    - Parameter value: The  of the attribute to add.
    */
    open func Add(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__Add_0__2__String_Object(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.Add(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    */
    open /* method final */ func Add(attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__Add_0__1__TagHelperAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.Insert(System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    */
    open /* method final */ func Insert(index : Swift.Int32, attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__Insert_0__2__i32_TagHelperAttribute(&__thrown, self.get_handle(), index, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.Remove(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    /**
    */
    open /* method final */ func Remove(attribute : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_bool__Remove_0__1__TagHelperAttribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.RemoveAt(System.Int32)
    /**
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAll(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.RemoveAll(System.String)
    /**
    
            Removes all s with  matching
            .
            

    - Parameter name: 
            The  of s to remove.
            
    - Returns: 
            true if at least 1  was removed; otherwise, false.
            

    */
    open func RemoveAll(name : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_bool__RemoveAll_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.Clear
    /**
    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute get_Item(System.Int32)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.get_Item(System.Int32)
// TODO hackish check for this method
    open /* method final */ func get_Item(index : Swift.Int32) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_TagHelperAttribute__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList.set_Item(System.Int32,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute)
    open /* method final */ func set_Item(index : Swift.Int32, value : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperAttributeList_void__set_Item_0__2__i32_TagHelperAttribute(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TagHelperAttributeList


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperComponent
    /**
    
            An abstract base class for .
            

    */
open class TagHelperComponent
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // void Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperComponent.Init(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)
    /**
    */
    open func Init(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_void__Init_0__1__TagHelperContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperComponent.Process(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    
            Synchronously executes the  with the given  and
            .
            

    - Parameter context: Contains information associated with the current HTML tag.
    - Parameter output: A stateful HTML element used to generate an HTML tag.
    */
    open func Process(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_void__Process_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperComponent.ProcessAsync(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput)
    /**
    */
    open func ProcessAsync(context : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext>, output : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput>) throws -> Optional<dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_Task__ProcessAsync_0__2__TagHelperContext_TagHelperOutput(&__thrown, self.get_handle(), context?.get_handle() ?? nil, output?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperComponent.get_Order
    open func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperComponent_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    */
    open var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // TagHelperComponent


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent
    /**
    
            Abstract class used to buffer content returned by s.
            

    */
open class TagHelperContent
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContentBuilder,
    Microsoft_AspNetCore_Html_IHtmlContentContainer,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Sets the content.
            

    - Parameter htmlContent: The  that replaces the content.
    - Returns: A reference to this instance after the set operation has completed.

    */
    open func SetHtmlContent(htmlContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__SetHtmlContent_0__1__IHtmlContent(&__thrown, self.get_handle(), htmlContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent SetContent(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.SetContent(System.String)
    /**
    
            Sets the content.
            

    - Parameter unencoded: 
            The  that replaces the content. The value is assume to be unencoded
            as-provided and will be HTML encoded before being written.
            
    - Returns: A reference to this instance after the set operation has completed.

    */
    open func SetContent(unencoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__SetContent_0__1__String(&__thrown, self.get_handle(), unencoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent SetHtmlContent(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.SetHtmlContent(System.String)
    /**
    
            Sets the content.
            

    - Parameter encoded: 
            The  that replaces the content. The value is assume to be HTML encoded
            as-provided and no further encoding will be performed.
            
    - Returns: A reference to this instance after the set operation has completed.

    */
    open func SetHtmlContent(encoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__SetHtmlContent_0__1__String(&__thrown, self.get_handle(), encoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent Append(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.Append(System.String)
    /**
    
            Appends  to the existing content.
            

    - Parameter unencoded: The  to be appended.
    - Returns: A reference to this instance after the append operation has completed.

    */
    open func Append(unencoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__Append_0__1__String(&__thrown, self.get_handle(), unencoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)
    /**
    
            Appends  to the existing content.
            

    - Parameter htmlContent: The  to be appended.
    - Returns: A reference to this instance after the append operation has completed.

    */
    open func AppendHtml(htmlContent : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContent>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__AppendHtml_0__1__IHtmlContent(&__thrown, self.get_handle(), htmlContent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendHtml(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.AppendHtml(System.String)
    /**
    
            Appends  to the existing content.  is assumed
            to be an HTML encoded  and no further encoding will be performed.
            

    - Parameter encoded: The  to be appended.
    - Returns: A reference to this instance after the append operation has completed.

    */
    open func AppendHtml(encoded : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__AppendHtml_0__1__String(&__thrown, self.get_handle(), encoded?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendFormat(System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.AppendFormat(System.String,System.Object[])
    /**
    
            Appends the specified  to the existing content after
            replacing each format item with the HTML encoded  representation of the
            corresponding item in the  array.
            

    - Parameter format: 
            The composite format  (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            
    - Parameter args: The object array to format.
    - Returns: A reference to this instance after the append operation has completed.

    */
    open func AppendFormat(format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__AppendFormat_0__2__String_ObjectArray(&__thrown, self.get_handle(), format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent AppendFormat(System.IFormatProvider, System.String, System.Object[])
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.AppendFormat(System.IFormatProvider,System.String,System.Object[])
    /**
    
            Appends the specified  to the existing content with information from the
             after replacing each format item with the HTML encoded 
            representation of the corresponding item in the  array.
            

    - Parameter provider: An object that supplies culture-specific formatting information.
    - Parameter format: 
            The composite format  (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            
    - Parameter args: The object array to format.
    - Returns: A reference to this instance after the append operation has completed.

    */
    open func AppendFormat(provider : Optional<dotnet.System.IFormatProvider>, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__AppendFormat_0__3__IFormatProvider_String_ObjectArray(&__thrown, self.get_handle(), provider?.get_handle() ?? nil, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent Clear()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.Clear
    /**
    
            Clears the content.
            

    - Returns: A reference to this instance after the clear operation has completed.

    */
    open func Clear() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_TagHelperContent__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Reinitialize()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.Reinitialize
    /**
    
            Clears the ,  so it can be reused.
            

    */
    open func Reinitialize() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_void__Reinitialize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open func CopyTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_void__CopyTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)
    /**
    */
    open func MoveTo(destination : Optional<aspnetcore.Microsoft.AspNetCore.Html.IHtmlContentBuilder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_void__MoveTo_0__1__IHtmlContentBuilder(&__thrown, self.get_handle(), destination?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetContent()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.GetContent
    /**
    
            Gets the content.
            

    - Returns: A  containing the content.

    */
    open func GetContent() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_String__GetContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetContent(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.GetContent(System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Gets the content.
            

    - Parameter encoder: The .
    - Returns: A  containing the content.

    */
    open func GetContent(encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_String__GetContent_0__1__HtmlEncoder(&__thrown, self.get_handle(), encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    /**
    */
    open func WriteTo(writer : Optional<dotnet.System.IO.TextWriter>, encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsModified()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.get_IsModified
    open func get_IsModified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_bool__get_IsModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmptyOrWhiteSpace()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent.get_IsEmptyOrWhiteSpace
    open func get_IsEmptyOrWhiteSpace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent_bool__get_IsEmptyOrWhiteSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    
            Gets a value indicating whether the content is empty or whitespace.
            

    */
    open var IsEmptyOrWhiteSpace : Bool {
        get {
            return try! get_IsEmptyOrWhiteSpace();
        }
    }
    /**
    
            Gets a value indicating whether the content was modified.
            

    */
    open var IsModified : Bool {
        get {
            return try! get_IsModified();
        }
    }
} // TagHelperContent


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
    /**
    
            Contains information related to the execution of s.
            

    */
open class TagHelperContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList, System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.#ctor(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
    /**
    
            Instantiates a new .
            

    - Parameter tagName: The parsed HTML tag name of the element.
    - Parameter allAttributes: Every attribute associated with the current HTML element.
    - Parameter items: Collection of items used to communicate with other s.
    - Parameter uniqueId: The unique identifier for the source element this 
            applies to.
    */
    public init(tagName : Optional<dotnet.System.String>, allAttributes : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList>, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_ctor_0__4__String_TagHelperAttributeList_System_Collections_Generic_IDictionary_object_object__String(&__thrown, tagName?.get_handle() ?? nil, allAttributes?.get_handle() ?? nil, (items?.get_handle()), uniqueId?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList, System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.#ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
    /**
    
            Instantiates a new .
            

    - Parameter allAttributes: Every attribute associated with the current HTML element.
    - Parameter items: Collection of items used to communicate with other s.
    - Parameter uniqueId: The unique identifier for the source element this 
            applies to.
    */
    public init(allAttributes : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList>, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_ctor_0__3__TagHelperAttributeList_System_Collections_Generic_IDictionary_object_object__String(&__thrown, allAttributes?.get_handle() ?? nil, (items?.get_handle()), uniqueId?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Reinitialize(System.String, System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.String,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
    /**
    
            Clears the  and updates its state with the provided values.
            

    - Parameter tagName: The HTML tag name to use.
    - Parameter items: The  to use.
    - Parameter uniqueId: The unique id to use.
    */
    open func Reinitialize(tagName : Optional<dotnet.System.String>, items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_void__Reinitialize_0__3__String_System_Collections_Generic_IDictionary_object_object__String(&__thrown, self.get_handle(), tagName?.get_handle() ?? nil, (items?.get_handle()), uniqueId?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reinitialize(System.Collections.Generic.IDictionary<System.Object,System.Object>, System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
    /**
    
            Clears the  and updates its state with the provided values.
            

    - Parameter items: The  to use.
    - Parameter uniqueId: The unique id to use.
    */
    open func Reinitialize(items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>>, uniqueId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_void__Reinitialize_0__2__System_Collections_Generic_IDictionary_object_object__String(&__thrown, self.get_handle(), (items?.get_handle()), uniqueId?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TagName()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.get_TagName
    open func get_TagName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_String__get_TagName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList get_AllAttributes()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.get_AllAttributes
    open func get_AllAttributes() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_ReadOnlyTagHelperAttributeList__get_AllAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.Object,System.Object> get_Items()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.get_Items
    open func get_Items() throws -> Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_System_Collections_Generic_IDictionary_object_object___get_Items_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IDictionary_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_UniqueId()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.get_UniqueId
    open func get_UniqueId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContext_String__get_UniqueId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            Every attribute associated with the current HTML element.
            

    */
    open var AllAttributes : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList> {
        get {
            return try! get_AllAttributes();
        }
    }
    /**
    
            Gets the collection of items used to communicate with other s.
            

    */
    open var Items : Optional<dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.Object,dotnet.System.Object>> {
        get {
            return try! get_Items();
        }
    }
    /**
    
            The parsed HTML tag name of the element.
            

    */
    open var TagName : Optional<dotnet.System.String> {
        get {
            return try! get_TagName();
        }
    }
    /**
    
            An identifier unique to the HTML element this context is for.
            

    */
    open var UniqueId : Optional<dotnet.System.String> {
        get {
            return try! get_UniqueId();
        }
    }
} // TagHelperContext


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput
    /**
    
            Class used to represent the output of an .
            

    */
open class TagHelperOutput
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Html_IHtmlContentContainer,
    Microsoft_AspNetCore_Html_IHtmlContent
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public convenience init (cast h_cast: NonnullHandle) throws {
        var __thrown : NullableHandle = nil;
        let h_res = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_cast(&__thrown,h_cast);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            self.init(hndl: h_res);
        }
    }
    // .ctor(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList, System.Func<bool,System.Text.Encodings.Web.HtmlEncoder,System.Threading.Tasks.Task<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>>)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.#ctor(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Func{System.Boolean,System.Text.Encodings.Web.HtmlEncoder,System.Threading.Tasks.Task{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent}})
    /**
    
            Instantiates a new instance of .
            

    - Parameter tagName: The HTML element's tag name.
    - Parameter attributes: The HTML attributes.
    - Parameter getChildContentAsync: 
            A delegate used to execute children asynchronously with the given  in scope and
            return their rendered content.
            
    */
    public init(tagName : Optional<dotnet.System.String>, attributes : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList>, getChildContentAsync : Optional<dotnet.System.Func_3<Bool,dotnet.System.Text.Encodings.Web.HtmlEncoder,dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_ctor_0__3__String_TagHelperAttributeList_System_Func_bool_System_Text_Encodings_Web_HtmlEncoder_System_Threading_Tasks_System_Threading_Tasks_Task_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent__(&__thrown, tagName?.get_handle() ?? nil, attributes?.get_handle() ?? nil, (getChildContentAsync?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Reinitialize(System.String, Microsoft.AspNetCore.Razor.TagHelpers.TagMode)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.Reinitialize(System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagMode)
    /**
    
            Clears the  and updates its state with the provided values.
            

    - Parameter tagName: The tag name to use.
    - Parameter tagMode: The  to use.
    */
    open func Reinitialize(tagName : Optional<dotnet.System.String>, tagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__Reinitialize_0__2__String_TagMode(&__thrown, self.get_handle(), tagName?.get_handle() ?? nil, tagMode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SuppressOutput()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.SuppressOutput
    /**
    
            Changes  to generate nothing.
            

    */
    open func SuppressOutput() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__SuppressOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> GetChildContentAsync()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.GetChildContentAsync
    /**
    
            Executes children asynchronously and returns their rendered content.
            

    - Returns: A  that on completion returns content rendered by children.

    */
    open func GetChildContentAsync() throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_System_Threading_Tasks_Task_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent___GetChildContentAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> GetChildContentAsync(bool)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.GetChildContentAsync(System.Boolean)
    /**
    
            Executes children asynchronously and returns their rendered content.
            

    - Parameter useCachedResult: 
            If true, multiple calls will not cause children to re-execute with the page's original
            ; returns cached content.
            
    - Returns: A  that on completion returns content rendered by children.

    */
    open func GetChildContentAsync(useCachedResult : Bool) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_System_Threading_Tasks_Task_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent___GetChildContentAsync_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(useCachedResult ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> GetChildContentAsync(System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.GetChildContentAsync(System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Executes children asynchronously with the given  in scope and returns their
            rendered content.
            

    - Parameter encoder: 
            The  to use when the page handles non- C# expressions.
            If null, executes children with the page's current .
            
    - Returns: A  that on completion returns content rendered by children.

    */
    open func GetChildContentAsync(encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_System_Threading_Tasks_Task_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent___GetChildContentAsync_0__1__HtmlEncoder(&__thrown, self.get_handle(), encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> GetChildContentAsync(bool, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.GetChildContentAsync(System.Boolean,System.Text.Encodings.Web.HtmlEncoder)
    /**
    
            Executes children asynchronously with the given  in scope and returns their
            rendered content.
            

    - Parameter useCachedResult: 
            If true, multiple calls with the same  will not cause children to
            re-execute; returns cached content.
            
    - Parameter encoder: 
            The  to use when the page handles non- C# expressions.
            If null, executes children with the page's current .
            
    - Returns: A  that on completion returns content rendered by children.

    */
    open func GetChildContentAsync(useCachedResult : Bool, encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws -> Optional<dotnet.System.Threading.Tasks.Task_1<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_System_Threading_Tasks_Task_Microsoft_AspNetCore_Razor_TagHelpers_TagHelperContent___GetChildContentAsync_0__2__bool_HtmlEncoder(&__thrown, self.get_handle(), Swift.Int32(useCachedResult ? 1 : 0), encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.Task_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteTo(System.IO.TextWriter, System.Text.Encodings.Web.HtmlEncoder)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)
    open /* method final */ func WriteTo(writer : Optional<dotnet.System.IO.TextWriter>, encoder : Optional<dotnet.System.Text.Encodings.Web.HtmlEncoder>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__WriteTo_0__2__TextWriter_HtmlEncoder(&__thrown, self.get_handle(), writer?.get_handle() ?? nil, encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TagName()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_TagName
    open func get_TagName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_String__get_TagName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TagName(System.String)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.set_TagName(System.String)
    open func set_TagName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__set_TagName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent get_PreElement()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_PreElement
    open func get_PreElement() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperContent__get_PreElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent get_PreContent()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_PreContent
    open func get_PreContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperContent__get_PreContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent get_Content()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_Content
    open func get_Content() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperContent__get_Content_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Content(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.set_Content(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent)
    open func set_Content(value : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__set_Content_0__1__TagHelperContent(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent get_PostContent()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_PostContent
    open func get_PostContent() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperContent__get_PostContent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent get_PostElement()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_PostElement
    open func get_PostElement() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperContent__get_PostElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsContentModified()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_IsContentModified
    open func get_IsContentModified() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_bool__get_IsContentModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagMode get_TagMode()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_TagMode
    open func get_TagMode() throws -> aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagMode__get_TagMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode(val: __return);
        }
    }
    // [IsSpecialName] void set_TagMode(Microsoft.AspNetCore.Razor.TagHelpers.TagMode)
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.set_TagMode(Microsoft.AspNetCore.Razor.TagHelpers.TagMode)
    open func set_TagMode(value : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_void__set_TagMode_0__1__TagMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList get_Attributes()
// docid: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.get_Attributes
    open func get_Attributes() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Razor_TagHelpers_TagHelperOutput_TagHelperAttributeList__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    
            The HTML element's attributes.
            

    */
    open var Attributes : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList> {
        get {
            return try! get_Attributes();
        }
    }
    /**
    
            Get or set the HTML element's main content.
            

    */
    open var Content : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        get {
            return try! get_Content();
        }
        set(v) {
            return try! set_Content(value: v!);
        }
    }
    /**
    
            true if  has been set, false otherwise.
            

    */
    open var IsContentModified : Bool {
        get {
            return try! get_IsContentModified();
        }
    }
    /**
    
            The HTML element's post content.
            

    */
    open var PostContent : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        get {
            return try! get_PostContent();
        }
    }
    /**
    
            Content that follows the HTML element.
            

    */
    open var PostElement : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        get {
            return try! get_PostElement();
        }
    }
    /**
    
            The HTML element's pre content.
            

    */
    open var PreContent : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        get {
            return try! get_PreContent();
        }
    }
    /**
    
            Content that precedes the HTML element.
            

    */
    open var PreElement : Optional<aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContent> {
        get {
            return try! get_PreElement();
        }
    }
    /**
    
            Syntax of the element in the generated HTML.
            

    */
    open var TagMode : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode {
        get {
            return try! get_TagMode();
        }
        set(v) {
            return try! set_TagMode(value: v);
        }
    }
    /**
    
            The HTML element's tag name.
            

    */
    open var TagName : Optional<dotnet.System.String> {
        get {
            return try! get_TagName();
        }
        set(v) {
            return try! set_TagName(value: v!);
        }
    }
} // TagHelperOutput


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagMode
    /**
    
            The mode in which an element should render.
            

    */
public struct TagMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagMode StartTagAndEndTag
    /**
    
            Include both start and end tags.
            

    */
    public static var StartTagAndEndTag : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode(val: Microsoft_AspNetCore_Razor_TagHelpers_TagMode_get_StartTagAndEndTag());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagMode SelfClosing
    /**
    
            A self-closed tag.
            

    */
    public static var SelfClosing : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode(val: Microsoft_AspNetCore_Razor_TagHelpers_TagMode_get_SelfClosing());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagMode StartTagOnly
    /**
    
            Only a start tag.
            

    */
    public static var StartTagOnly : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagMode(val: Microsoft_AspNetCore_Razor_TagHelpers_TagMode_get_StartTagOnly());
            return __return;
        }
    }
} // TagMode


// type: Microsoft.AspNetCore.Razor.TagHelpers.TagStructure
    /**
    
            The structure the element should be written in.
            

    */
public struct TagStructure : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Razor_TagHelpers_TagStructure_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagStructure Unspecified
    /**
    
            If no other tag helper applies to the same element and specifies a ,
             will be used.
            

    */
    public static var Unspecified : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure(val: Microsoft_AspNetCore_Razor_TagHelpers_TagStructure_get_Unspecified());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagStructure NormalOrSelfClosing
    /**
    
            Element can be written as <my-tag-helper></my-tag-helper> or <my-tag-helper />.
            

    */
    public static var NormalOrSelfClosing : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure(val: Microsoft_AspNetCore_Razor_TagHelpers_TagStructure_get_NormalOrSelfClosing());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Razor.TagHelpers.TagStructure WithoutEndTag
    /**
    
            Element can be written as <my-tag-helper> or <my-tag-helper />.
            

    */
    public static var WithoutEndTag : aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Razor.TagHelpers.TagStructure(val: Microsoft_AspNetCore_Razor_TagHelpers_TagStructure_get_WithoutEndTag());
            return __return;
        }
    }
} // TagStructure


}




public protocol Microsoft_AspNetCore_Razor_TagHelpers_ITagHelper
    :
    Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
{
}

public protocol Microsoft_AspNetCore_Razor_TagHelpers_ITagHelperComponent
    :
    SGBridgeGetHandle
{
}

