// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Builder
extension Microsoft.AspNetCore.Builder {
// type: Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions
public struct HttpLoggingBuilderExtensions {
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions.UseHttpLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a middleware that can log HTTP requests and responses.
            

    - Parameter app: The  instance this method extends.
    - Returns: The .

    */
    public static func UseHttpLogging(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpLoggingBuilderExtensions_IApplicationBuilder__UseHttpLogging_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Builder.IApplicationBuilder UseW3CLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
// docid: M:Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions.UseW3CLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
    /**
    
            Adds a middleware that can log HTTP requests and responses for server logs in W3C format.
            

    - Parameter app: The  instance this method extends.
    - Returns: The .

    */
    public static func UseW3CLogging(app : aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Builder_HttpLoggingBuilderExtensions_IApplicationBuilder__UseW3CLogging_0__1__IApplicationBuilder(&__thrown, app.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl : __return);
        }
    }
} // HttpLoggingBuilderExtensions


}

// Microsoft.AspNetCore.HttpLogging
extension Microsoft.AspNetCore.HttpLogging {
// type: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields
    /**
    
            Flags used to control which parts of the
            request and response are logged.
            

    */
public struct HttpLoggingFields : SGBridgeGenericValue {
    let v : Swift.Int64;
    public init(val: Swift.Int64) { self.v = val; }
    public func get_value() -> Swift.Int64 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int64(gval); }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields None
    /**
    
            No logging.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestPath
    /**
    
            Flag for logging the HTTP Request Path, which includes both the 
            and .
            
            For example:
            Path: /index
            PathBase: /app
            
            

    */
    public static var RequestPath : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestPath());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestQuery
    /**
    
            Flag for logging the HTTP Request .
            
            For example:
            Query: ?index=1
            
            RequestQuery contents can contain private information
            which may have regulatory concerns under GDPR
            and other laws. RequestQuery should not be logged
            unless logs are secure and access controlled
            and the privacy impact assessed.
            

    */
    public static var RequestQuery : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestQuery());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestProtocol
    /**
    
            Flag for logging the HTTP Request .
            
            For example:
            Protocol: HTTP/1.1
            
            

    */
    public static var RequestProtocol : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestProtocol());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestMethod
    /**
    
            Flag for logging the HTTP Request .
            
            For example:
            Method: GET
            
            

    */
    public static var RequestMethod : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestMethod());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestScheme
    /**
    
            Flag for logging the HTTP Request .
            
            For example:
            Scheme: https
            
            

    */
    public static var RequestScheme : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestScheme());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields ResponseStatusCode
    /**
    
            Flag for logging the HTTP Response .
            
            For example:
            StatusCode: 200
            
            

    */
    public static var ResponseStatusCode : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_ResponseStatusCode());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestHeaders
    /**
    
            Flag for logging the HTTP Request .
            Request Headers are logged as soon as the middleware is invoked.
            Headers are redacted by default with the character '[Redacted]' unless specified in
            the .
            
            For example:
            Connection: keep-alive
            My-Custom-Request-Header: [Redacted]
            
            

    */
    public static var RequestHeaders : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestHeaders());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields ResponseHeaders
    /**
    
            Flag for logging the HTTP Response .
            Response Headers are logged when the  is written to
            or when 
            is called.
            Headers are redacted by default with the character '[Redacted]' unless specified in
            the .
            
            For example:
            Content-Length: 16
            My-Custom-Response-Header: [Redacted]
            
            

    */
    public static var ResponseHeaders : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_ResponseHeaders());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestTrailers
    /**
    
            Flag for logging the HTTP Request .
            Request Trailers are currently not logged.
            

    */
    public static var RequestTrailers : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestTrailers());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields ResponseTrailers
    /**
    
            Flag for logging the HTTP Response .
            Response Trailers are currently not logged.
            

    */
    public static var ResponseTrailers : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_ResponseTrailers());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestBody
    /**
    
            Flag for logging the HTTP Request .
            Logging the request body has performance implications, as it requires buffering
            the entire request body up to .
            

    */
    public static var RequestBody : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestBody());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields ResponseBody
    /**
    
            Flag for logging the HTTP Response .
            Logging the response body has performance implications, as it requires buffering
            the entire response body up to .
            

    */
    public static var ResponseBody : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_ResponseBody());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestProperties
    /**
    
            Flag for logging a collection of HTTP Request properties,
            including , ,
            , and .
            

    */
    public static var RequestProperties : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestProperties());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields RequestPropertiesAndHeaders
    /**
    
            Flag for logging HTTP Request properties and headers.
            Includes  and 
            

    */
    public static var RequestPropertiesAndHeaders : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_RequestPropertiesAndHeaders());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields ResponsePropertiesAndHeaders
    /**
    
            Flag for logging HTTP Response properties and headers.
            Includes  and 
            

    */
    public static var ResponsePropertiesAndHeaders : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_ResponsePropertiesAndHeaders());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields Request
    /**
    
            Flag for logging the entire HTTP Request.
            Includes  and .
            Logging the request body has performance implications, as it requires buffering
            the entire request body up to .
            

    */
    public static var Request : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_Request());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields Response
    /**
    
            Flag for logging the entire HTTP Response.
            Includes  and .
            Logging the response body has performance implications, as it requires buffering
            the entire response body up to .
            

    */
    public static var Response : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_Response());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.HttpLoggingFields All
    /**
    
            Flag for logging both the HTTP Request and Response.
            Includes  and .
            Logging the request and response body has performance implications, as it requires buffering
            the entire request and response body up to the 
            and .
            

    */
    public static var All : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: Microsoft_AspNetCore_HttpLogging_HttpLoggingFields_get_All());
            return __return;
        }
    }
} // HttpLoggingFields


// type: Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions
    /**
    
            Options for the .
            

    */
public final class HttpLoggingOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.HttpLogging.HttpLoggingFields get_LoggingFields()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_LoggingFields
    public func get_LoggingFields() throws -> aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_HttpLoggingFields__get_LoggingFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields(val: __return);
        }
    }
    // [IsSpecialName] void set_LoggingFields(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.set_LoggingFields(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)
    public func set_LoggingFields(value : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_void__set_LoggingFields_0__1__HttpLoggingFields(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.ISet<System.String> get_RequestHeaders()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_RequestHeaders
    public func get_RequestHeaders() throws -> dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_System_Collections_Generic_ISet_string___get_RequestHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ISet_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ISet<System.String> get_ResponseHeaders()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_ResponseHeaders
    public func get_ResponseHeaders() throws -> dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_System_Collections_Generic_ISet_string___get_ResponseHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ISet_1(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.HttpLogging.MediaTypeOptions get_MediaTypeOptions()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_MediaTypeOptions
    public func get_MediaTypeOptions() throws -> aspnetcore.Microsoft.AspNetCore.HttpLogging.MediaTypeOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_MediaTypeOptions__get_MediaTypeOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.HttpLogging.MediaTypeOptions(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_RequestBodyLogLimit()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_RequestBodyLogLimit
    public func get_RequestBodyLogLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_i32__get_RequestBodyLogLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_RequestBodyLogLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.set_RequestBodyLogLimit(System.Int32)
    public func set_RequestBodyLogLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_void__set_RequestBodyLogLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ResponseBodyLogLimit()
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.get_ResponseBodyLogLimit
    public func get_ResponseBodyLogLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_i32__get_ResponseBodyLogLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ResponseBodyLogLimit(System.Int32)
// docid: M:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.set_ResponseBodyLogLimit(System.Int32)
    public func set_ResponseBodyLogLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_void__set_ResponseBodyLogLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Fields to log for the Request and Response. Defaults to logging request and response properties and headers.
            

    */
    public var LoggingFields : aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingFields {
        get {
            return try! get_LoggingFields();
        }
        set(v) {
            return try! set_LoggingFields(value: v);
        }
    }
    /**
    
            Options for configuring encodings for a specific media type.
            
            If the request or response do not match the supported media type,
            the response body will not be logged.
            
            

    */
    public var MediaTypeOptions : aspnetcore.Microsoft.AspNetCore.HttpLogging.MediaTypeOptions {
        get {
            return try! get_MediaTypeOptions();
        }
    }
    /**
    
            Maximum request body size to log (in bytes). Defaults to 32 KB.
            

    */
    public var RequestBodyLogLimit : Swift.Int32 {
        get {
            return try! get_RequestBodyLogLimit();
        }
        set(v) {
            return try! set_RequestBodyLogLimit(value: v);
        }
    }
    /**
    
            Request header values that are allowed to be logged.
            
            If a request header is not present in the ,
            the header name will be logged with a redacted value.
            
            

    */
    public var RequestHeaders : dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        get {
            return try! get_RequestHeaders();
        }
    }
    /**
    
            Maximum response body size to log (in bytes). Defaults to 32 KB.
            

    */
    public var ResponseBodyLogLimit : Swift.Int32 {
        get {
            return try! get_ResponseBodyLogLimit();
        }
        set(v) {
            return try! set_ResponseBodyLogLimit(value: v);
        }
    }
    /**
    
            Response header values that are allowed to be logged.
            
            If a response header is not present in the ,
            the header name will be logged with a redacted value.
            
            

    */
    public var ResponseHeaders : dotnet.System.Collections.Generic.ISet_1<dotnet.System.String> {
        get {
            return try! get_ResponseHeaders();
        }
    }
} // HttpLoggingOptions


// type: Microsoft.AspNetCore.HttpLogging.MediaTypeOptions
    /**
    
            Options for HttpLogging to configure which encoding to use for each media type.
            

    */
public final class MediaTypeOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddText(System.String)
// docid: M:Microsoft.AspNetCore.HttpLogging.MediaTypeOptions.AddText(System.String)
    /**
    
            Adds a contentType to be used for logging as text.
            

    - Parameter contentType: The content type to add.
    */
    public func AddText(contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_void__AddText_0__1__String(&__thrown, self.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddText(System.String, System.Text.Encoding)
// docid: M:Microsoft.AspNetCore.HttpLogging.MediaTypeOptions.AddText(System.String,System.Text.Encoding)
    /**
    
            Adds a contentType to be used for logging as text.
            

    - Parameter contentType: The content type to add.
    - Parameter encoding: The encoding to use.
    */
    public func AddText(contentType : dotnet.System.String, encoding : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_void__AddText_0__2__String_Encoding(&__thrown, self.get_handle(), contentType.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddBinary(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
// docid: M:Microsoft.AspNetCore.HttpLogging.MediaTypeOptions.AddBinary(Microsoft.Net.Http.Headers.MediaTypeHeaderValue)
    /**
    
            Adds a  to be used for logging as binary.
            

    - Parameter mediaType: The MediaType to add.
    */
    public func AddBinary(mediaType : aspnetcore.Microsoft.Net.Http.Headers.MediaTypeHeaderValue) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_void__AddBinary_0__1__MediaTypeHeaderValue(&__thrown, self.get_handle(), mediaType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddBinary(System.String)
// docid: M:Microsoft.AspNetCore.HttpLogging.MediaTypeOptions.AddBinary(System.String)
    /**
    
            Adds a content to be used for logging as text.
            

    - Parameter contentType: The content type to add.
    */
    public func AddBinary(contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_void__AddBinary_0__1__String(&__thrown, self.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:Microsoft.AspNetCore.HttpLogging.MediaTypeOptions.Clear
    /**
    
            Clears all MediaTypes.
            

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_MediaTypeOptions_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MediaTypeOptions


// type: Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions
    /**
    
            Options for the .
            

    */
public final class W3CLoggerOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_FileSizeLimit()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_FileSizeLimit
    public func get_FileSizeLimit() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_System_Nullable_i32___get_FileSizeLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_FileSizeLimit(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_FileSizeLimit(System.Nullable{System.Int32})
    public func set_FileSizeLimit(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_FileSizeLimit_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_RetainedFileCountLimit()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_RetainedFileCountLimit
    public func get_RetainedFileCountLimit() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_System_Nullable_i32___get_RetainedFileCountLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_RetainedFileCountLimit(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_RetainedFileCountLimit(System.Nullable{System.Int32})
    public func set_RetainedFileCountLimit(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_RetainedFileCountLimit_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_FileName
    public func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_FileName(System.String)
    public func set_FileName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogDirectory()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_LogDirectory
    public func get_LogDirectory() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_String__get_LogDirectory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_LogDirectory(System.String)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_LogDirectory(System.String)
    public func set_LogDirectory(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_LogDirectory_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_FlushInterval()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_FlushInterval
    public func get_FlushInterval() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_TimeSpan__get_FlushInterval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FlushInterval(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_FlushInterval(System.TimeSpan)
    public func set_FlushInterval(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_FlushInterval_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.HttpLogging.W3CLoggingFields get_LoggingFields()
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.get_LoggingFields
    public func get_LoggingFields() throws -> aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_W3CLoggingFields__get_LoggingFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: __return);
        }
    }
    // [IsSpecialName] void set_LoggingFields(Microsoft.AspNetCore.HttpLogging.W3CLoggingFields)
// docid: M:Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions.set_LoggingFields(Microsoft.AspNetCore.HttpLogging.W3CLoggingFields)
    public func set_LoggingFields(value : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_void__set_LoggingFields_0__1__W3CLoggingFields(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            Gets or sets a string representing the prefix of the file name used to store the logging information.
            The current date plus a file number (in the format {YYYYMMDD.X} will be appended to the given value.
            Defaults to w3clog-.
            

    */
    public var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v);
        }
    }
    /**
    
            Gets or sets a strictly positive value representing the maximum log size in bytes or null for no limit.
            Once the log is full, no more messages will be appended.
            Defaults to 10MiB.
            

    */
    public var FileSizeLimit : Optional<Swift.Int32> {
        get {
            return try! get_FileSizeLimit();
        }
        set(v) {
            return try! set_FileSizeLimit(value: v!);
        }
    }
    /**
    
            Gets or sets the period after which logs will be flushed to the store.
            Defaults to 1 second.
            

    */
    public var FlushInterval : dotnet.System.TimeSpan {
        get {
            return try! get_FlushInterval();
        }
        set(v) {
            return try! set_FlushInterval(value: v);
        }
    }
    /**
    
            Gets or sets a string representing the directory where the log file will be written to
            Defaults to ./logs/ relative to the app directory (ContentRoot).
            If a full path is given, that full path will be used. If a relative path is given,
            the full path will be that path relative to ContentRoot.
            

    */
    public var LogDirectory : dotnet.System.String {
        get {
            return try! get_LogDirectory();
        }
        set(v) {
            return try! set_LogDirectory(value: v);
        }
    }
    /**
    
            Fields to log. Defaults to logging request and response properties and headers,
            plus date/time info and server name.
            

    */
    public var LoggingFields : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
            return try! get_LoggingFields();
        }
        set(v) {
            return try! set_LoggingFields(value: v);
        }
    }
    /**
    
            Gets or sets a strictly positive value representing the maximum retained file count.
            Defaults to 4.
            Must be between 1 and 10,000, inclusive.
            

    */
    public var RetainedFileCountLimit : Optional<Swift.Int32> {
        get {
            return try! get_RetainedFileCountLimit();
        }
        set(v) {
            return try! set_RetainedFileCountLimit(value: v!);
        }
    }
} // W3CLoggerOptions


// type: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields
    /**
    
            Flags used to control which parts of the
            request and response are logged in W3C format.
            

    */
public struct W3CLoggingFields : SGBridgeGenericValue {
    let v : Swift.Int64;
    public init(val: Swift.Int64) { self.v = val; }
    public func get_value() -> Swift.Int64 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int64(gval); }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields None
    /**
    
            No logging.
            

    */
    public static var None : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_None());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Date
    /**
    
            Flag for logging the date
            that the activity occurred.
            

    */
    public static var Date : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Date());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Time
    /**
    
            Flag for logging the time
            that the activity occurred.
            

    */
    public static var Time : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Time());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ClientIpAddress
    /**
    
            Flag for logging the IP address
            of the client that accessed the server.
            

    */
    public static var ClientIpAddress : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ClientIpAddress());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields UserName
    /**
    
            Flag for logging the name of the
            authenticated user that accessed the server.
            UserName contents can contain private information
            which may have regulatory concerns under GDPR
            and other laws. UserName should not be logged
            unless logs are secure and access controlled
            and the privacy impact assessed.
            

    */
    public static var UserName : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_UserName());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ServerName
    /**
    
            Flag for logging the name of the
            server on which the log entry was generated.
            

    */
    public static var ServerName : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ServerName());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ServerIpAddress
    /**
    
            Flag for logging the IP address of the
            server on which the log entry was generated.
            

    */
    public static var ServerIpAddress : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ServerIpAddress());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ServerPort
    /**
    
            Flag for logging the port number
            the client is connected to.
            

    */
    public static var ServerPort : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ServerPort());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Method
    /**
    
            Flag for logging the action
            the client was trying to perform.
            

    */
    public static var Method : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Method());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields UriStem
    /**
    
            Flag for logging the resource accessed.
            

    */
    public static var UriStem : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_UriStem());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields UriQuery
    /**
    
            Flag for logging the query, if any,
            the client was trying to perform.
            

    */
    public static var UriQuery : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_UriQuery());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ProtocolStatus
    /**
    
            Flag for logging the HTTP response status code.
            

    */
    public static var ProtocolStatus : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ProtocolStatus());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields TimeTaken
    /**
    
            Flag for logging the duration of time,
            in milliseconds, that the action consumed.
            

    */
    public static var TimeTaken : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_TimeTaken());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ProtocolVersion
    /**
    
            Flag for logging the protocol (HTTP, FTP) version
            used by the client. For HTTP this will be either
            HTTP 1.0 or HTTP 1.1.
            

    */
    public static var ProtocolVersion : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ProtocolVersion());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Host
    /**
    
            Flag for logging the content of the host header.
            

    */
    public static var Host : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Host());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields UserAgent
    /**
    
            Flag for logging the requesting user agent.
            

    */
    public static var UserAgent : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_UserAgent());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Cookie
    /**
    
            Flag for logging the content of the cookie
            sent by the client, if any.
            Cookie contents can contain authentication tokens,
            or private information which may have regulatory concerns
            under GDPR and other laws. Cookies should not be logged
            unless logs are secure and access controlled
            and the privacy impact assessed.
            

    */
    public static var Cookie : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Cookie());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Referer
    /**
    
            Flag for logging the previous site visited by the user,
            which provided a link to the current site, if any.
            

    */
    public static var Referer : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Referer());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields ConnectionInfoFields
    /**
    
            Flag for logging properties that are part of the 
            Includes ,  and .
            

    */
    public static var ConnectionInfoFields : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_ConnectionInfoFields());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields RequestHeaders
    /**
    
            Flag for logging properties that are part of the 
            Includes , , and .
            

    */
    public static var RequestHeaders : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_RequestHeaders());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields Request
    /**
    
            Flag for logging properties that are part of the 
            Includes , , ,
            , , ,
            and .
            

    */
    public static var Request : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_Request());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.HttpLogging.W3CLoggingFields All
    /**
    
            Flag for logging all possible fields.
            Includes , , ,
            , , ,
            , , ,
            , , ,
            , , ,
            , and .
            

    */
    public static var All : aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggingFields(val: Microsoft_AspNetCore_HttpLogging_W3CLoggingFields_get_All());
            return __return;
        }
    }
} // W3CLoggingFields


}


// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions
public struct HttpLoggingServicesExtensions {
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddHttpLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions})
    /**
    
            Adds HTTP Logging services.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddHttpLogging(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpLoggingServicesExtensions_IServiceCollection__AddHttpLogging_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HttpLogging_HttpLoggingOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddHttpLogging(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>(configureOptions);
        return try AddHttpLogging(services: services, configureOptions: del_configureOptions);
    }
    // Microsoft.Extensions.DependencyInjection.IServiceCollection AddW3CLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddW3CLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions})
    /**
    
            Adds W3C Logging services.
            

    - Parameter services: The  for adding services.
    - Parameter configureOptions: A delegate to configure the .
    - Returns: 

    */
    public static func AddW3CLogging(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_HttpLoggingServicesExtensions_IServiceCollection__AddW3CLogging_0__2__IServiceCollection_System_Action_Microsoft_AspNetCore_HttpLogging_W3CLoggerOptions_(&__thrown, services.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddW3CLogging(services : aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>(configureOptions);
        return try AddW3CLogging(services: services, configureOptions: del_configureOptions);
    }
} // HttpLoggingServicesExtensions


}



// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseHttpLogging() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions.UseHttpLogging(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Builder.IApplicationBuilder UseW3CLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)
extension Microsoft_AspNetCore_Builder_IApplicationBuilder {
    public func UseW3CLogging() throws -> aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Builder.HttpLoggingBuilderExtensions.UseW3CLogging(app: aspnetcore.Microsoft.AspNetCore.Builder.IApplicationBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddHttpLogging(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddHttpLogging(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddHttpLogging(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddHttpLogging(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.Extensions.DependencyInjection.IServiceCollection AddW3CLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>)
extension Microsoft_Extensions_DependencyInjection_IServiceCollection {
    public func AddW3CLogging(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddW3CLogging(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddW3CLogging(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions) throws -> Void) throws -> aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.HttpLogging.W3CLoggerOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.HttpLoggingServicesExtensions.AddW3CLogging(services: aspnetcore.Microsoft.Extensions.DependencyInjection.IServiceCollection(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

