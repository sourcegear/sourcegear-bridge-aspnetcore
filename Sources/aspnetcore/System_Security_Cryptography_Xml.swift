// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// System
// System.Security
// System.Security.Cryptography
// System.Security.Cryptography.Xml
extension System.Security.Cryptography.Xml {
// type: System.Security.Cryptography.Xml.CipherData
public final class CipherData
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_CipherData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.CipherData.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherData_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.CipherData.#ctor(System.Byte[])
    public init(cipherValue : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherData_ctor_0__1__u8Array(&__thrown, (cipherValue?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.Xml.CipherReference)
// docid: M:System.Security.Cryptography.Xml.CipherData.#ctor(System.Security.Cryptography.Xml.CipherReference)
    public init(cipherReference : Optional<aspnetcore.System.Security.Cryptography.Xml.CipherReference>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherData_ctor_0__1__CipherReference(&__thrown, cipherReference?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.CipherData.GetXml
    public func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_CipherData_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.CipherData.LoadXml(System.Xml.XmlElement)
    public func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_CipherData_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.CipherReference get_CipherReference()
// docid: M:System.Security.Cryptography.Xml.CipherData.get_CipherReference
    public func get_CipherReference() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.CipherReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_CipherData_CipherReference__get_CipherReference_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.CipherReference(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CipherReference(System.Security.Cryptography.Xml.CipherReference)
// docid: M:System.Security.Cryptography.Xml.CipherData.set_CipherReference(System.Security.Cryptography.Xml.CipherReference)
    public func set_CipherReference(value : Optional<aspnetcore.System.Security.Cryptography.Xml.CipherReference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_CipherData_void__set_CipherReference_0__1__CipherReference(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_CipherValue()
// docid: M:System.Security.Cryptography.Xml.CipherData.get_CipherValue
    public func get_CipherValue() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_CipherData_u8Array__get_CipherValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CipherValue(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.CipherData.set_CipherValue(System.Byte[])
    public func set_CipherValue(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_CipherData_void__set_CipherValue_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var CipherReference : Optional<aspnetcore.System.Security.Cryptography.Xml.CipherReference> {
        get {
            return try! get_CipherReference();
        }
        set(v) {
            return try! set_CipherReference(value: v!);
        }
    }
    public var CipherValue : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_CipherValue();
        }
        set(v) {
            return try! set_CipherValue(value: v!);
        }
    }
} // CipherData


// type: System.Security.Cryptography.Xml.CipherReference
public final class CipherReference
    :
    aspnetcore.System.Security.Cryptography.Xml.EncryptedReference
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_CipherReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.CipherReference.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherReference_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.CipherReference.#ctor(System.String)
    public init(uri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherReference_ctor_0__1__String(&__thrown, uri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.Cryptography.Xml.TransformChain)
// docid: M:System.Security.Cryptography.Xml.CipherReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)
    public init(uri : Optional<dotnet.System.String>, transformChain : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_CipherReference_ctor_0__2__String_TransformChain(&__thrown, uri?.get_handle() ?? nil, transformChain?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.CipherReference.GetXml
    public override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_CipherReference_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.CipherReference.LoadXml(System.Xml.XmlElement)
    public override func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_CipherReference_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CipherReference


// type: System.Security.Cryptography.Xml.DSAKeyValue
open class DSAKeyValue
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_DSAKeyValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DSAKeyValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.DSA)
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.#ctor(System.Security.Cryptography.DSA)
    public init(key : Optional<dotnet.System.Security.Cryptography.DSA>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DSAKeyValue_ctor_0__1__DSA(&__thrown, key?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.GetXml
    /**
    
            Create an XML representation.
            

    - Returns: 
            An  containing the XML representation.
            

    */
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DSAKeyValue_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.LoadXml(System.Xml.XmlElement)
    /**
    
            Deserialize from the XML representation.
            

    - Parameter value: 
            An  containing the XML representation. This cannot be null.
            
    */
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DSAKeyValue_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.DSA get_Key()
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.get_Key
    open func get_Key() throws -> Optional<dotnet.System.Security.Cryptography.DSA> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DSAKeyValue_DSA__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.DSA(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Key(System.Security.Cryptography.DSA)
// docid: M:System.Security.Cryptography.Xml.DSAKeyValue.set_Key(System.Security.Cryptography.DSA)
    open func set_Key(value : Optional<dotnet.System.Security.Cryptography.DSA>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DSAKeyValue_void__set_Key_0__1__DSA(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Key : Optional<dotnet.System.Security.Cryptography.DSA> {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v!);
        }
    }
} // DSAKeyValue


// type: System.Security.Cryptography.Xml.DataObject
open class DataObject
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_DataObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.DataObject.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DataObject_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.DataObject.#ctor(System.String,System.String,System.String,System.Xml.XmlElement)
    public init(id : Optional<dotnet.System.String>, mimeType : Optional<dotnet.System.String>, encoding : Optional<dotnet.System.String>, data : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DataObject_ctor_0__4__String_String_String_XmlElement(&__thrown, id?.get_handle() ?? nil, mimeType?.get_handle() ?? nil, encoding?.get_handle() ?? nil, data?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.DataObject.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DataObject_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.DataObject.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DataObject_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeList get_Data()
// docid: M:System.Security.Cryptography.Xml.DataObject.get_Data
    open func get_Data() throws -> Optional<dotnet.System.Xml.XmlNodeList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DataObject_XmlNodeList__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlNodeList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Data(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.DataObject.set_Data(System.Xml.XmlNodeList)
    open func set_Data(value : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DataObject_void__set_Data_0__1__XmlNodeList(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Encoding()
// docid: M:System.Security.Cryptography.Xml.DataObject.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DataObject_String__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.String)
// docid: M:System.Security.Cryptography.Xml.DataObject.set_Encoding(System.String)
    open func set_Encoding(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DataObject_void__set_Encoding_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.DataObject.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DataObject_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.DataObject.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DataObject_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MimeType()
// docid: M:System.Security.Cryptography.Xml.DataObject.get_MimeType
    open func get_MimeType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_DataObject_String__get_MimeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MimeType(System.String)
// docid: M:System.Security.Cryptography.Xml.DataObject.set_MimeType(System.String)
    open func set_MimeType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_DataObject_void__set_MimeType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Data : Optional<dotnet.System.Xml.XmlNodeList> {
        get {
            return try! get_Data();
        }
        set(v) {
            return try! set_Data(value: v!);
        }
    }
    open var Encoding : Optional<dotnet.System.String> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    open var MimeType : Optional<dotnet.System.String> {
        get {
            return try! get_MimeType();
        }
        set(v) {
            return try! set_MimeType(value: v!);
        }
    }
} // DataObject


// type: System.Security.Cryptography.Xml.DataReference
public final class DataReference
    :
    aspnetcore.System.Security.Cryptography.Xml.EncryptedReference
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_DataReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.DataReference.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DataReference_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.DataReference.#ctor(System.String)
    public init(uri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DataReference_ctor_0__1__String(&__thrown, uri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.Cryptography.Xml.TransformChain)
// docid: M:System.Security.Cryptography.Xml.DataReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)
    public init(uri : Optional<dotnet.System.String>, transformChain : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_DataReference_ctor_0__2__String_TransformChain(&__thrown, uri?.get_handle() ?? nil, transformChain?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DataReference


// type: System.Security.Cryptography.Xml.EncryptedData
public final class EncryptedData
    :
    aspnetcore.System.Security.Cryptography.Xml.EncryptedType
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptedData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptedData.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptedData_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptedData.GetXml
    public override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedData_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptedData.LoadXml(System.Xml.XmlElement)
    public override func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedData_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EncryptedData


// type: System.Security.Cryptography.Xml.EncryptedKey
public final class EncryptedKey
    :
    aspnetcore.System.Security.Cryptography.Xml.EncryptedType
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptedKey_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptedKey_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddReference(System.Security.Cryptography.Xml.DataReference)
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.DataReference)
    public func AddReference(dataReference : Optional<aspnetcore.System.Security.Cryptography.Xml.DataReference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedKey_void__AddReference_0__1__DataReference(&__thrown, self.get_handle(), dataReference?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddReference(System.Security.Cryptography.Xml.KeyReference)
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.KeyReference)
    public func AddReference(keyReference : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyReference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedKey_void__AddReference_0__1__KeyReference(&__thrown, self.get_handle(), keyReference?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.GetXml
    public override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedKey_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.LoadXml(System.Xml.XmlElement)
    public override func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedKey_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CarriedKeyName()
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.get_CarriedKeyName
    public func get_CarriedKeyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedKey_String__get_CarriedKeyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CarriedKeyName(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.set_CarriedKeyName(System.String)
    public func set_CarriedKeyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedKey_void__set_CarriedKeyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Recipient()
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.get_Recipient
    public func get_Recipient() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedKey_String__get_Recipient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Recipient(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.set_Recipient(System.String)
    public func set_Recipient(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedKey_void__set_Recipient_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.ReferenceList get_ReferenceList()
// docid: M:System.Security.Cryptography.Xml.EncryptedKey.get_ReferenceList
    public func get_ReferenceList() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.ReferenceList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedKey_ReferenceList__get_ReferenceList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.ReferenceList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var CarriedKeyName : Optional<dotnet.System.String> {
        get {
            return try! get_CarriedKeyName();
        }
        set(v) {
            return try! set_CarriedKeyName(value: v!);
        }
    }
    public var Recipient : Optional<dotnet.System.String> {
        get {
            return try! get_Recipient();
        }
        set(v) {
            return try! set_Recipient(value: v!);
        }
    }
    public var ReferenceList : Optional<aspnetcore.System.Security.Cryptography.Xml.ReferenceList> {
        get {
            return try! get_ReferenceList();
        }
    }
} // EncryptedKey


// type: System.Security.Cryptography.Xml.EncryptedReference
open class EncryptedReference
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptedReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddTransform(System.Security.Cryptography.Xml.Transform)
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.AddTransform(System.Security.Cryptography.Xml.Transform)
    open func AddTransform(transform : Optional<aspnetcore.System.Security.Cryptography.Xml.Transform>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedReference_void__AddTransform_0__1__Transform(&__thrown, self.get_handle(), transform?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedReference_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedReference_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.TransformChain get_TransformChain()
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.get_TransformChain
    open func get_TransformChain() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedReference_TransformChain__get_TransformChain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.TransformChain(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TransformChain(System.Security.Cryptography.Xml.TransformChain)
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.set_TransformChain(System.Security.Cryptography.Xml.TransformChain)
    open func set_TransformChain(value : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedReference_void__set_TransformChain_0__1__TransformChain(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Uri()
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.get_Uri
    open func get_Uri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedReference_String__get_Uri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Uri(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedReference.set_Uri(System.String)
    open func set_Uri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedReference_void__set_Uri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var TransformChain : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain> {
        get {
            return try! get_TransformChain();
        }
        set(v) {
            return try! set_TransformChain(value: v!);
        }
    }
    open var Uri : Optional<dotnet.System.String> {
        get {
            return try! get_Uri();
        }
        set(v) {
            return try! set_Uri(value: v!);
        }
    }
} // EncryptedReference


// type: System.Security.Cryptography.Xml.EncryptedType
open class EncryptedType
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptedType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddProperty(System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.AddProperty(System.Security.Cryptography.Xml.EncryptionProperty)
    open func AddProperty(ep : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__AddProperty_0__1__EncryptionProperty(&__thrown, self.get_handle(), ep?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.CipherData get_CipherData()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_CipherData
    open func get_CipherData() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.CipherData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_CipherData__get_CipherData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.CipherData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CipherData(System.Security.Cryptography.Xml.CipherData)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_CipherData(System.Security.Cryptography.Xml.CipherData)
    open func set_CipherData(value : Optional<aspnetcore.System.Security.Cryptography.Xml.CipherData>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_CipherData_0__1__CipherData(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Encoding()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_String__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_Encoding(System.String)
    open func set_Encoding(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_Encoding_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptionMethod get_EncryptionMethod()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_EncryptionMethod
    open func get_EncryptionMethod() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionMethod> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_EncryptionMethod__get_EncryptionMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptionMethod(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EncryptionMethod(System.Security.Cryptography.Xml.EncryptionMethod)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_EncryptionMethod(System.Security.Cryptography.Xml.EncryptionMethod)
    open func set_EncryptionMethod(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionMethod>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_EncryptionMethod_0__1__EncryptionMethod(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptionPropertyCollection get_EncryptionProperties()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_EncryptionProperties
    open func get_EncryptionProperties() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionPropertyCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_EncryptionPropertyCollection__get_EncryptionProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptionPropertyCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.KeyInfo get_KeyInfo()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_KeyInfo
    open func get_KeyInfo() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_KeyInfo__get_KeyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.KeyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
    open func set_KeyInfo(value : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_KeyInfo_0__1__KeyInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MimeType()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_MimeType
    open func get_MimeType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_String__get_MimeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MimeType(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_MimeType(System.String)
    open func set_MimeType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_MimeType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:System.Security.Cryptography.Xml.EncryptedType.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedType_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedType.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedType_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var CipherData : Optional<aspnetcore.System.Security.Cryptography.Xml.CipherData> {
        get {
            return try! get_CipherData();
        }
        set(v) {
            return try! set_CipherData(value: v!);
        }
    }
    open var Encoding : Optional<dotnet.System.String> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    open var EncryptionMethod : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionMethod> {
        get {
            return try! get_EncryptionMethod();
        }
        set(v) {
            return try! set_EncryptionMethod(value: v!);
        }
    }
    open var EncryptionProperties : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionPropertyCollection> {
        get {
            return try! get_EncryptionProperties();
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    open var KeyInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        get {
            return try! get_KeyInfo();
        }
        set(v) {
            return try! set_KeyInfo(value: v!);
        }
    }
    open var MimeType : Optional<dotnet.System.String> {
        get {
            return try! get_MimeType();
        }
        set(v) {
            return try! set_MimeType(value: v!);
        }
    }
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
} // EncryptedType


// type: System.Security.Cryptography.Xml.EncryptedXml
open class EncryptedXml
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptedXml_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String XmlEncAES128KeyWrapUrl
    open class var XmlEncAES128KeyWrapUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES128KeyWrapUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncAES128Url
    open class var XmlEncAES128Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES128Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncAES192KeyWrapUrl
    open class var XmlEncAES192KeyWrapUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES192KeyWrapUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncAES192Url
    open class var XmlEncAES192Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES192Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncAES256KeyWrapUrl
    open class var XmlEncAES256KeyWrapUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES256KeyWrapUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncAES256Url
    open class var XmlEncAES256Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncAES256Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncDESUrl
    open class var XmlEncDESUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncDESUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncElementContentUrl
    open class var XmlEncElementContentUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncElementContentUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncElementUrl
    open class var XmlEncElementUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncElementUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncEncryptedKeyUrl
    open class var XmlEncEncryptedKeyUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncEncryptedKeyUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncNamespaceUrl
    open class var XmlEncNamespaceUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncNamespaceUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncRSA15Url
    open class var XmlEncRSA15Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncRSA15Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncRSAOAEPUrl
    open class var XmlEncRSAOAEPUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncRSAOAEPUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncSHA256Url
    open class var XmlEncSHA256Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncSHA256Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncSHA512Url
    open class var XmlEncSHA512Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncSHA512Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncTripleDESKeyWrapUrl
    open class var XmlEncTripleDESKeyWrapUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncTripleDESKeyWrapUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlEncTripleDESUrl
    open class var XmlEncTripleDESUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_EncryptedXml_get_XmlEncTripleDESUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptedXml_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlDocument)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument)
    public init(document : Optional<dotnet.System.Xml.XmlDocument>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptedXml_ctor_0__1__XmlDocument(&__thrown, document?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlDocument, System.Security.Policy.Evidence)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument,System.Security.Policy.Evidence)
    public init(document : Optional<dotnet.System.Xml.XmlDocument>, evidence : Optional<dotnet.System.Security.Policy.Evidence>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptedXml_ctor_0__2__XmlDocument_Evidence(&__thrown, document?.get_handle() ?? nil, evidence?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddKeyNameMapping(System.String, System.Object)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.AddKeyNameMapping(System.String,System.Object)
    open func AddKeyNameMapping(keyName : Optional<dotnet.System.String>, keyObject : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__AddKeyNameMapping_0__2__String_Object(&__thrown, self.get_handle(), keyName?.get_handle() ?? nil, keyObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearKeyNameMappings()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.ClearKeyNameMappings
    open func ClearKeyNameMappings() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__ClearKeyNameMappings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] DecryptData(System.Security.Cryptography.Xml.EncryptedData, System.Security.Cryptography.SymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.DecryptData(System.Security.Cryptography.Xml.EncryptedData,System.Security.Cryptography.SymmetricAlgorithm)
    open func DecryptData(encryptedData : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData>, symmetricAlgorithm : Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__DecryptData_0__2__EncryptedData_SymmetricAlgorithm(&__thrown, self.get_handle(), encryptedData?.get_handle() ?? nil, symmetricAlgorithm?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void DecryptDocument()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument
    open func DecryptDocument() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__DecryptDocument_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] DecryptEncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)
    open func DecryptEncryptedKey(encryptedKey : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedKey>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__DecryptEncryptedKey_0__1__EncryptedKey(&__thrown, self.get_handle(), encryptedKey?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] DecryptKey(System.Byte[], System.Security.Cryptography.RSA, bool)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)
    open class func DecryptKey(keyData : Optional<dotnet.System_Arr<Swift.UInt8>>, rsa : Optional<dotnet.System.Security.Cryptography.RSA>, useOAEP : Bool) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__DecryptKey_0__3__u8Array_RSA_bool(&__thrown, (keyData?.get_handle()), rsa?.get_handle() ?? nil, Swift.Int32(useOAEP ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] DecryptKey(System.Byte[], System.Security.Cryptography.SymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)
    open class func DecryptKey(keyData : Optional<dotnet.System_Arr<Swift.UInt8>>, symmetricAlgorithm : Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__DecryptKey_0__2__u8Array_SymmetricAlgorithm(&__thrown, (keyData?.get_handle()), symmetricAlgorithm?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Cryptography.Xml.EncryptedData Encrypt(System.Xml.XmlElement, System.Security.Cryptography.X509Certificates.X509Certificate2)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)
    open func Encrypt(inputElement : Optional<dotnet.System.Xml.XmlElement>, certificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_EncryptedData__Encrypt_0__2__XmlElement_X509Certificate2(&__thrown, self.get_handle(), inputElement?.get_handle() ?? nil, certificate?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Cryptography.Xml.EncryptedData Encrypt(System.Xml.XmlElement, System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.String)
    open func Encrypt(inputElement : Optional<dotnet.System.Xml.XmlElement>, keyName : Optional<dotnet.System.String>) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_EncryptedData__Encrypt_0__2__XmlElement_String(&__thrown, self.get_handle(), inputElement?.get_handle() ?? nil, keyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedData(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] EncryptData(System.Byte[], System.Security.Cryptography.SymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)
    open func EncryptData(plaintext : Optional<dotnet.System_Arr<Swift.UInt8>>, symmetricAlgorithm : Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__EncryptData_0__2__u8Array_SymmetricAlgorithm(&__thrown, self.get_handle(), (plaintext?.get_handle()), symmetricAlgorithm?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] EncryptData(System.Xml.XmlElement, System.Security.Cryptography.SymmetricAlgorithm, bool)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Xml.XmlElement,System.Security.Cryptography.SymmetricAlgorithm,System.Boolean)
    open func EncryptData(inputElement : Optional<dotnet.System.Xml.XmlElement>, symmetricAlgorithm : Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm>, content : Bool) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__EncryptData_0__3__XmlElement_SymmetricAlgorithm_bool(&__thrown, self.get_handle(), inputElement?.get_handle() ?? nil, symmetricAlgorithm?.get_handle() ?? nil, Swift.Int32(content ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] EncryptKey(System.Byte[], System.Security.Cryptography.RSA, bool)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)
    open class func EncryptKey(keyData : Optional<dotnet.System_Arr<Swift.UInt8>>, rsa : Optional<dotnet.System.Security.Cryptography.RSA>, useOAEP : Bool) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__EncryptKey_0__3__u8Array_RSA_bool(&__thrown, (keyData?.get_handle()), rsa?.get_handle() ?? nil, Swift.Int32(useOAEP ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] EncryptKey(System.Byte[], System.Security.Cryptography.SymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)
    open class func EncryptKey(keyData : Optional<dotnet.System_Arr<Swift.UInt8>>, symmetricAlgorithm : Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__EncryptKey_0__2__u8Array_SymmetricAlgorithm(&__thrown, (keyData?.get_handle()), symmetricAlgorithm?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] GetDecryptionIV(System.Security.Cryptography.Xml.EncryptedData, System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionIV(System.Security.Cryptography.Xml.EncryptedData,System.String)
    open func GetDecryptionIV(encryptedData : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData>, symmetricAlgorithmUri : Optional<dotnet.System.String>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_u8Array__GetDecryptionIV_0__2__EncryptedData_String(&__thrown, self.get_handle(), encryptedData?.get_handle() ?? nil, symmetricAlgorithmUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Cryptography.SymmetricAlgorithm GetDecryptionKey(System.Security.Cryptography.Xml.EncryptedData, System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(System.Security.Cryptography.Xml.EncryptedData,System.String)
    open func GetDecryptionKey(encryptedData : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData>, symmetricAlgorithmUri : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Security.Cryptography.SymmetricAlgorithm> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_SymmetricAlgorithm__GetDecryptionKey_0__2__EncryptedData_String(&__thrown, self.get_handle(), encryptedData?.get_handle() ?? nil, symmetricAlgorithmUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.SymmetricAlgorithm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetIdElement(System.Xml.XmlDocument, System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.GetIdElement(System.Xml.XmlDocument,System.String)
    open func GetIdElement(document : Optional<dotnet.System.Xml.XmlDocument>, idValue : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_XmlElement__GetIdElement_0__2__XmlDocument_String(&__thrown, self.get_handle(), document?.get_handle() ?? nil, idValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReplaceData(System.Xml.XmlElement, System.Byte[])
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceData(System.Xml.XmlElement,System.Byte[])
    open func ReplaceData(inputElement : Optional<dotnet.System.Xml.XmlElement>, decryptedData : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__ReplaceData_0__2__XmlElement_u8Array(&__thrown, self.get_handle(), inputElement?.get_handle() ?? nil, (decryptedData?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceElement(System.Xml.XmlElement, System.Security.Cryptography.Xml.EncryptedData, bool)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement(System.Xml.XmlElement,System.Security.Cryptography.Xml.EncryptedData,System.Boolean)
    open class func ReplaceElement(inputElement : Optional<dotnet.System.Xml.XmlElement>, encryptedData : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedData>, content : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__ReplaceElement_0__3__XmlElement_EncryptedData_bool(&__thrown, inputElement?.get_handle() ?? nil, encryptedData?.get_handle() ?? nil, Swift.Int32(content ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Policy.Evidence get_DocumentEvidence()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_DocumentEvidence
    open func get_DocumentEvidence() throws -> Optional<dotnet.System.Security.Policy.Evidence> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_Evidence__get_DocumentEvidence_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Policy.Evidence(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DocumentEvidence(System.Security.Policy.Evidence)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_DocumentEvidence(System.Security.Policy.Evidence)
    open func set_DocumentEvidence(value : Optional<dotnet.System.Security.Policy.Evidence>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_DocumentEvidence_0__1__Evidence(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.Text.Encoding)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_Encoding(System.Text.Encoding)
    open func set_Encoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_Encoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.CipherMode get_Mode()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_Mode
    open func get_Mode() throws -> dotnet.System.Security.Cryptography.CipherMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_CipherMode__get_Mode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.CipherMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Mode(System.Security.Cryptography.CipherMode)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_Mode(System.Security.Cryptography.CipherMode)
    open func set_Mode(value : dotnet.System.Security.Cryptography.CipherMode) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_Mode_0__1__CipherMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.PaddingMode get_Padding()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_Padding
    open func get_Padding() throws -> dotnet.System.Security.Cryptography.PaddingMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_PaddingMode__get_Padding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.PaddingMode(val: __return);
        }
    }
    // [IsSpecialName] void set_Padding(System.Security.Cryptography.PaddingMode)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_Padding(System.Security.Cryptography.PaddingMode)
    open func set_Padding(value : dotnet.System.Security.Cryptography.PaddingMode) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_Padding_0__1__PaddingMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Recipient()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_Recipient
    open func get_Recipient() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_String__get_Recipient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Recipient(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_Recipient(System.String)
    open func set_Recipient(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_Recipient_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlResolver get_Resolver()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_Resolver
    open func get_Resolver() throws -> Optional<dotnet.System.Xml.XmlResolver> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_XmlResolver__get_Resolver_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlResolver(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Resolver(System.Xml.XmlResolver)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_Resolver(System.Xml.XmlResolver)
    open func set_Resolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_Resolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_XmlDSigSearchDepth()
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.get_XmlDSigSearchDepth
    open func get_XmlDSigSearchDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptedXml_i32__get_XmlDSigSearchDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_XmlDSigSearchDepth(System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptedXml.set_XmlDSigSearchDepth(System.Int32)
    open func set_XmlDSigSearchDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptedXml_void__set_XmlDSigSearchDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var DocumentEvidence : Optional<dotnet.System.Security.Policy.Evidence> {
        get {
            return try! get_DocumentEvidence();
        }
        set(v) {
            return try! set_DocumentEvidence(value: v!);
        }
    }
    open var Encoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    open var Mode : dotnet.System.Security.Cryptography.CipherMode {
        get {
            return try! get_Mode();
        }
        set(v) {
            return try! set_Mode(value: v);
        }
    }
    open var Padding : dotnet.System.Security.Cryptography.PaddingMode {
        get {
            return try! get_Padding();
        }
        set(v) {
            return try! set_Padding(value: v);
        }
    }
    open var Recipient : Optional<dotnet.System.String> {
        get {
            return try! get_Recipient();
        }
        set(v) {
            return try! set_Recipient(value: v!);
        }
    }
    open var Resolver : Optional<dotnet.System.Xml.XmlResolver> {
        get {
            return try! get_Resolver();
        }
        set(v) {
            return try! set_Resolver(value: v!);
        }
    }
    /**
    
            Gets / Sets the max limit for recursive search of encryption key in signed XML
            

    */
    open var XmlDSigSearchDepth : Swift.Int32 {
        get {
            return try! get_XmlDSigSearchDepth();
        }
        set(v) {
            return try! set_XmlDSigSearchDepth(value: v);
        }
    }
} // EncryptedXml


// type: System.Security.Cryptography.Xml.EncryptionMethod
open class EncryptionMethod
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptionMethod_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptionMethod_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.#ctor(System.String)
    public init(algorithm : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptionMethod_ctor_0__1__String(&__thrown, algorithm?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionMethod_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionMethod_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_KeyAlgorithm()
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.get_KeyAlgorithm
    open func get_KeyAlgorithm() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionMethod_String__get_KeyAlgorithm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KeyAlgorithm(System.String)
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.set_KeyAlgorithm(System.String)
    open func set_KeyAlgorithm(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionMethod_void__set_KeyAlgorithm_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_KeySize()
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.get_KeySize
    open func get_KeySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionMethod_i32__get_KeySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_KeySize(System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionMethod.set_KeySize(System.Int32)
    open func set_KeySize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionMethod_void__set_KeySize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var KeyAlgorithm : Optional<dotnet.System.String> {
        get {
            return try! get_KeyAlgorithm();
        }
        set(v) {
            return try! set_KeyAlgorithm(value: v!);
        }
    }
    open var KeySize : Swift.Int32 {
        get {
            return try! get_KeySize();
        }
        set(v) {
            return try! set_KeySize(value: v);
        }
    }
} // EncryptionMethod


// type: System.Security.Cryptography.Xml.EncryptionProperty
public final class EncryptionProperty
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptionProperty_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptionProperty_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.#ctor(System.Xml.XmlElement)
    public init(elementProperty : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptionProperty_ctor_0__1__XmlElement(&__thrown, elementProperty?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.GetXml
    public func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionProperty_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.LoadXml(System.Xml.XmlElement)
    public func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionProperty_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.get_Id
    public func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionProperty_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_PropertyElement()
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.get_PropertyElement
    public func get_PropertyElement() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionProperty_XmlElement__get_PropertyElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyElement(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.set_PropertyElement(System.Xml.XmlElement)
    public func set_PropertyElement(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionProperty_void__set_PropertyElement_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Target()
// docid: M:System.Security.Cryptography.Xml.EncryptionProperty.get_Target
    public func get_Target() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionProperty_String__get_Target_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
    }
    public var PropertyElement : Optional<dotnet.System.Xml.XmlElement> {
        get {
            return try! get_PropertyElement();
        }
        set(v) {
            return try! set_PropertyElement(value: v!);
        }
    }
    public var Target : Optional<dotnet.System.String> {
        get {
            return try! get_Target();
        }
    }
} // EncryptionProperty


// type: System.Security.Cryptography.Xml.EncryptionPropertyCollection
public final class EncryptionPropertyCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_EncryptionPropertyCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_EncryptionPropertyCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Add(System.Security.Cryptography.Xml.EncryptionProperty)
    public func Add(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_i32__Add_0__1__EncryptionProperty(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Contains(System.Security.Cryptography.Xml.EncryptionProperty)
    public func Contains(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_bool__Contains_0__1__EncryptionProperty(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.CopyTo(System.Array,System.Int32)
    public func CopyTo(array : Optional<dotnet.System.Array>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array?.get_handle() ?? nil, index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Security.Cryptography.Xml.EncryptionProperty[], System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.CopyTo(System.Security.Cryptography.Xml.EncryptionProperty[],System.Int32)
    public func CopyTo(array : Optional<dotnet.System_Arr<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__CopyTo_0__2__EncryptionPropertyArray_i32(&__thrown, self.get_handle(), (array?.get_handle()), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.GetEnumerator
    public func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Int32 IndexOf(System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.IndexOf(System.Security.Cryptography.Xml.EncryptionProperty)
    public func IndexOf(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_i32__IndexOf_0__1__EncryptionProperty(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Insert(System.Int32,System.Security.Cryptography.Xml.EncryptionProperty)
    public func Insert(index : Swift.Int32, value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__Insert_0__2__i32_EncryptionProperty(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Cryptography.Xml.EncryptionProperty Item(System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Item(System.Int32)
    public func Item(index : Swift.Int32) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_EncryptionProperty__Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Remove(System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Remove(System.Security.Cryptography.Xml.EncryptionProperty)
    public func Remove(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__Remove_0__1__EncryptionProperty(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.RemoveAt(System.Int32)
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_IsFixedSize
    public func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_SyncRoot
    public func get_SyncRoot() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptionProperty get_ItemOf(System.Int32)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.get_ItemOf(System.Int32)
    public func get_ItemOf(index : Swift.Int32) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_EncryptionPropertyCollection_EncryptionProperty__get_ItemOf_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemOf(System.Int32, System.Security.Cryptography.Xml.EncryptionProperty)
// docid: M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.set_ItemOf(System.Int32,System.Security.Cryptography.Xml.EncryptionProperty)
    public func set_ItemOf(index : Swift.Int32, value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionProperty>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_EncryptionPropertyCollection_void__set_ItemOf_0__2__i32_EncryptionProperty(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    public var SyncRoot : Optional<dotnet.System.Object> {
        get {
            return try! get_SyncRoot();
        }
    }
} // EncryptionPropertyCollection


// type: System.Security.Cryptography.Xml.IRelDecryptor
open class IRelDecryptor
    :
    SGBridgeGenericValue,
    System_Security_Cryptography_Xml_IRelDecryptor
{
    open class func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_IRelDecryptor_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream Decrypt(System.Security.Cryptography.Xml.EncryptionMethod, System.Security.Cryptography.Xml.KeyInfo, System.IO.Stream)
// docid: M:System.Security.Cryptography.Xml.IRelDecryptor.Decrypt(System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo,System.IO.Stream)
    open func Decrypt(encryptionMethod : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptionMethod>, keyInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo>, toDecrypt : Optional<dotnet.System.IO.Stream>) throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_IRelDecryptor_Stream__Decrypt_0__3__EncryptionMethod_KeyInfo_Stream(&__thrown, self.get_handle(), encryptionMethod?.get_handle() ?? nil, keyInfo?.get_handle() ?? nil, toDecrypt?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IRelDecryptor


// type: System.Security.Cryptography.Xml.KeyInfo
open class KeyInfo
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfo.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddClause(System.Security.Cryptography.Xml.KeyInfoClause)
// docid: M:System.Security.Cryptography.Xml.KeyInfo.AddClause(System.Security.Cryptography.Xml.KeyInfoClause)
    open func AddClause(clause : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfo_void__AddClause_0__1__KeyInfoClause(&__thrown, self.get_handle(), clause?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.Xml.KeyInfo.GetEnumerator
    open /* method final */ func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfo_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator(System.Type)
// docid: M:System.Security.Cryptography.Xml.KeyInfo.GetEnumerator(System.Type)
    open func GetEnumerator(requestedObjectType : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfo_IEnumerator__GetEnumerator_0__1__Type(&__thrown, self.get_handle(), requestedObjectType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfo.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfo_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfo.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfo_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.Xml.KeyInfo.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfo_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.KeyInfo.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfo_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfo.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfo_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
} // KeyInfo


// type: System.Security.Cryptography.Xml.KeyInfoClause
open class KeyInfoClause
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoClause_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoClause.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoClause_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoClause.LoadXml(System.Xml.XmlElement)
    open func LoadXml(element : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoClause_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // KeyInfoClause


// type: System.Security.Cryptography.Xml.KeyInfoEncryptedKey
open class KeyInfoEncryptedKey
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoEncryptedKey_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoEncryptedKey_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.Xml.EncryptedKey)
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.#ctor(System.Security.Cryptography.Xml.EncryptedKey)
    public init(encryptedKey : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedKey>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoEncryptedKey_ctor_0__1__EncryptedKey(&__thrown, encryptedKey?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.GetXml
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoEncryptedKey_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoEncryptedKey_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptedKey get_EncryptedKey()
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.get_EncryptedKey
    open func get_EncryptedKey() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoEncryptedKey_EncryptedKey__get_EncryptedKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)
// docid: M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.set_EncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)
    open func set_EncryptedKey(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedKey>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoEncryptedKey_void__set_EncryptedKey_0__1__EncryptedKey(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var EncryptedKey : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedKey> {
        get {
            return try! get_EncryptedKey();
        }
        set(v) {
            return try! set_EncryptedKey(value: v!);
        }
    }
} // KeyInfoEncryptedKey


// type: System.Security.Cryptography.Xml.KeyInfoName
open class KeyInfoName
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoName_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoName_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.#ctor(System.String)
    public init(keyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoName_ctor_0__1__String(&__thrown, keyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.GetXml
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoName_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoName_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.get_Value
    open func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoName_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoName.set_Value(System.String)
    open func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoName_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // KeyInfoName


// type: System.Security.Cryptography.Xml.KeyInfoNode
open class KeyInfoNode
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoNode_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.#ctor(System.Xml.XmlElement)
    public init(node : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoNode_ctor_0__1__XmlElement(&__thrown, node?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.GetXml
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoNode_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoNode_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_Value()
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoNode_XmlElement__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoNode.set_Value(System.Xml.XmlElement)
    open func set_Value(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoNode_void__set_Value_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Value : Optional<dotnet.System.Xml.XmlElement> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // KeyInfoNode


// type: System.Security.Cryptography.Xml.KeyInfoRetrievalMethod
open class KeyInfoRetrievalMethod
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor(System.String)
    public init(strUri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_ctor_0__1__String(&__thrown, strUri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor(System.String,System.String)
    public init(strUri : Optional<dotnet.System.String>, typeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_ctor_0__2__String_String(&__thrown, strUri?.get_handle() ?? nil, typeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.GetXml
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Uri()
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.get_Uri
    open func get_Uri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_String__get_Uri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Uri(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.set_Uri(System.String)
    open func set_Uri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoRetrievalMethod_void__set_Uri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
    open var Uri : Optional<dotnet.System.String> {
        get {
            return try! get_Uri();
        }
        set(v) {
            return try! set_Uri(value: v!);
        }
    }
} // KeyInfoRetrievalMethod


// type: System.Security.Cryptography.Xml.KeyInfoX509Data
open class KeyInfoX509Data
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyInfoX509Data_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoX509Data_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Byte[])
    public init(rgbCert : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoX509Data_ctor_0__1__u8Array(&__thrown, (rgbCert?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
    public init(cert : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoX509Data_ctor_0__1__X509Certificate(&__thrown, cert?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509IncludeOption)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509IncludeOption)
    public init(cert : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate>, includeOption : dotnet.System.Security.Cryptography.X509Certificates.X509IncludeOption) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyInfoX509Data_ctor_0__2__X509Certificate_X509IncludeOption(&__thrown, cert?.get_handle() ?? nil, includeOption.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
    open func AddCertificate(certificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__AddCertificate_0__1__X509Certificate(&__thrown, self.get_handle(), certificate?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddIssuerSerial(System.String, System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.AddIssuerSerial(System.String,System.String)
    open func AddIssuerSerial(issuerName : Optional<dotnet.System.String>, serialNumber : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__AddIssuerSerial_0__2__String_String(&__thrown, self.get_handle(), issuerName?.get_handle() ?? nil, serialNumber?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSubjectKeyId(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.AddSubjectKeyId(System.Byte[])
    open func AddSubjectKeyId(subjectKeyId : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__AddSubjectKeyId_0__1__u8Array(&__thrown, self.get_handle(), (subjectKeyId?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSubjectKeyId(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.AddSubjectKeyId(System.String)
    open func AddSubjectKeyId(subjectKeyId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__AddSubjectKeyId_0__1__String(&__thrown, self.get_handle(), subjectKeyId?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSubjectName(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.AddSubjectName(System.String)
    open func AddSubjectName(subjectName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__AddSubjectName_0__1__String(&__thrown, self.get_handle(), subjectName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.GetXml
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.LoadXml(System.Xml.XmlElement)
    open override func LoadXml(element : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_Certificates()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.get_Certificates
    open func get_Certificates() throws -> Optional<dotnet.System.Collections.ArrayList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_ArrayList__get_Certificates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ArrayList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Byte[] get_CRL()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.get_CRL
    open func get_CRL() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_u8Array__get_CRL_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CRL(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.set_CRL(System.Byte[])
    open func set_CRL(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_KeyInfoX509Data_void__set_CRL_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_IssuerSerials()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.get_IssuerSerials
    open func get_IssuerSerials() throws -> Optional<dotnet.System.Collections.ArrayList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_ArrayList__get_IssuerSerials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ArrayList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_SubjectKeyIds()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.get_SubjectKeyIds
    open func get_SubjectKeyIds() throws -> Optional<dotnet.System.Collections.ArrayList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_ArrayList__get_SubjectKeyIds_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ArrayList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_SubjectNames()
// docid: M:System.Security.Cryptography.Xml.KeyInfoX509Data.get_SubjectNames
    open func get_SubjectNames() throws -> Optional<dotnet.System.Collections.ArrayList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_KeyInfoX509Data_ArrayList__get_SubjectNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ArrayList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var CRL : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_CRL();
        }
        set(v) {
            return try! set_CRL(value: v!);
        }
    }
    open var Certificates : Optional<dotnet.System.Collections.ArrayList> {
        get {
            return try! get_Certificates();
        }
    }
    open var IssuerSerials : Optional<dotnet.System.Collections.ArrayList> {
        get {
            return try! get_IssuerSerials();
        }
    }
    open var SubjectKeyIds : Optional<dotnet.System.Collections.ArrayList> {
        get {
            return try! get_SubjectKeyIds();
        }
    }
    open var SubjectNames : Optional<dotnet.System.Collections.ArrayList> {
        get {
            return try! get_SubjectNames();
        }
    }
} // KeyInfoX509Data


// type: System.Security.Cryptography.Xml.KeyReference
public final class KeyReference
    :
    aspnetcore.System.Security.Cryptography.Xml.EncryptedReference
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_KeyReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.KeyReference.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyReference_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.KeyReference.#ctor(System.String)
    public init(uri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyReference_ctor_0__1__String(&__thrown, uri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.Cryptography.Xml.TransformChain)
// docid: M:System.Security.Cryptography.Xml.KeyReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)
    public init(uri : Optional<dotnet.System.String>, transformChain : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_KeyReference_ctor_0__2__String_TransformChain(&__thrown, uri?.get_handle() ?? nil, transformChain?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // KeyReference


// type: System.Security.Cryptography.Xml.RSAKeyValue
open class RSAKeyValue
    :
    aspnetcore.System.Security.Cryptography.Xml.KeyInfoClause
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_RSAKeyValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_RSAKeyValue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.RSA)
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.#ctor(System.Security.Cryptography.RSA)
    public init(key : Optional<dotnet.System.Security.Cryptography.RSA>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_RSAKeyValue_ctor_0__1__RSA(&__thrown, key?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.GetXml
    /**
    
            Create an XML representation.
            

    - Returns: 
            An  containing the XML representation.
            

    */
    open override func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_RSAKeyValue_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.LoadXml(System.Xml.XmlElement)
    /**
    
            Deserialize from the XML representation.
            

    - Parameter value: 
            An  containing the XML representation. This cannot be null.
            
    */
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_RSAKeyValue_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.RSA get_Key()
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.get_Key
    open func get_Key() throws -> Optional<dotnet.System.Security.Cryptography.RSA> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_RSAKeyValue_RSA__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.RSA(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Key(System.Security.Cryptography.RSA)
// docid: M:System.Security.Cryptography.Xml.RSAKeyValue.set_Key(System.Security.Cryptography.RSA)
    open func set_Key(value : Optional<dotnet.System.Security.Cryptography.RSA>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_RSAKeyValue_void__set_Key_0__1__RSA(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Key : Optional<dotnet.System.Security.Cryptography.RSA> {
        get {
            return try! get_Key();
        }
        set(v) {
            return try! set_Key(value: v!);
        }
    }
} // RSAKeyValue


// type: System.Security.Cryptography.Xml.Reference
open class Reference
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_Reference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.Reference.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_Reference_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:System.Security.Cryptography.Xml.Reference.#ctor(System.IO.Stream)
    public init(stream : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_Reference_ctor_0__1__Stream(&__thrown, stream?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.Reference.#ctor(System.String)
    public init(uri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_Reference_ctor_0__1__String(&__thrown, uri?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddTransform(System.Security.Cryptography.Xml.Transform)
// docid: M:System.Security.Cryptography.Xml.Reference.AddTransform(System.Security.Cryptography.Xml.Transform)
    open func AddTransform(transform : Optional<aspnetcore.System.Security.Cryptography.Xml.Transform>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__AddTransform_0__1__Transform(&__thrown, self.get_handle(), transform?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.Reference.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.Reference.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DigestMethod()
// docid: M:System.Security.Cryptography.Xml.Reference.get_DigestMethod
    open func get_DigestMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_String__get_DigestMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DigestMethod(System.String)
// docid: M:System.Security.Cryptography.Xml.Reference.set_DigestMethod(System.String)
    open func set_DigestMethod(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_DigestMethod_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_DigestValue()
// docid: M:System.Security.Cryptography.Xml.Reference.get_DigestValue
    open func get_DigestValue() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_u8Array__get_DigestValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DigestValue(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.Reference.set_DigestValue(System.Byte[])
    open func set_DigestValue(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_DigestValue_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.Reference.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.Reference.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.TransformChain get_TransformChain()
// docid: M:System.Security.Cryptography.Xml.Reference.get_TransformChain
    open func get_TransformChain() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_TransformChain__get_TransformChain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.TransformChain(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TransformChain(System.Security.Cryptography.Xml.TransformChain)
// docid: M:System.Security.Cryptography.Xml.Reference.set_TransformChain(System.Security.Cryptography.Xml.TransformChain)
    open func set_TransformChain(value : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_TransformChain_0__1__TransformChain(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Type()
// docid: M:System.Security.Cryptography.Xml.Reference.get_Type
    open func get_Type() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_String__get_Type_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Type(System.String)
// docid: M:System.Security.Cryptography.Xml.Reference.set_Type(System.String)
    open func set_Type(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_Type_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Uri()
// docid: M:System.Security.Cryptography.Xml.Reference.get_Uri
    open func get_Uri() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Reference_String__get_Uri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Uri(System.String)
// docid: M:System.Security.Cryptography.Xml.Reference.set_Uri(System.String)
    open func set_Uri(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Reference_void__set_Uri_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var DigestMethod : Optional<dotnet.System.String> {
        get {
            return try! get_DigestMethod();
        }
        set(v) {
            return try! set_DigestMethod(value: v!);
        }
    }
    open var DigestValue : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_DigestValue();
        }
        set(v) {
            return try! set_DigestValue(value: v!);
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    open var TransformChain : Optional<aspnetcore.System.Security.Cryptography.Xml.TransformChain> {
        get {
            return try! get_TransformChain();
        }
        set(v) {
            return try! set_TransformChain(value: v!);
        }
    }
    open var Type_ : Optional<dotnet.System.String> {
        get {
            return try! get_Type();
        }
        set(v) {
            return try! set_Type(value: v!);
        }
    }
    open var Uri : Optional<dotnet.System.String> {
        get {
            return try! get_Uri();
        }
        set(v) {
            return try! set_Uri(value: v!);
        }
    }
} // Reference


// type: System.Security.Cryptography.Xml.ReferenceList
public final class ReferenceList
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_ReferenceList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_ReferenceList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Object)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Add(System.Object)
    public func Add(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_i32__Add_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Contains(System.Object)
    public func Contains(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_bool__Contains_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.CopyTo(System.Array,System.Int32)
    public func CopyTo(array : Optional<dotnet.System.Array>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array?.get_handle() ?? nil, index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.GetEnumerator
    public func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Int32 IndexOf(System.Object)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.IndexOf(System.Object)
    public func IndexOf(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_i32__IndexOf_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Object)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Insert(System.Int32,System.Object)
    public func Insert(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__Insert_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Cryptography.Xml.EncryptedReference Item(System.Int32)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Item(System.Int32)
    public func Item(index : Swift.Int32) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_EncryptedReference__Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedReference(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Remove(System.Object)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.Remove(System.Object)
    public func Remove(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__Remove_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.RemoveAt(System.Int32)
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Cryptography.Xml.ReferenceList.get_SyncRoot
    public func get_SyncRoot() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptedReference get_ItemOf(System.Int32)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.get_ItemOf(System.Int32)
    public func get_ItemOf(index : Swift.Int32) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_ReferenceList_EncryptedReference__get_ItemOf_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedReference(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ItemOf(System.Int32, System.Security.Cryptography.Xml.EncryptedReference)
// docid: M:System.Security.Cryptography.Xml.ReferenceList.set_ItemOf(System.Int32,System.Security.Cryptography.Xml.EncryptedReference)
    public func set_ItemOf(index : Swift.Int32, value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedReference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_ReferenceList_void__set_ItemOf_0__2__i32_EncryptedReference(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    public var SyncRoot : Optional<dotnet.System.Object> {
        get {
            return try! get_SyncRoot();
        }
    }
} // ReferenceList


// type: System.Security.Cryptography.Xml.Signature
open class Signature
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_Signature_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.Signature.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_Signature_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddObject(System.Security.Cryptography.Xml.DataObject)
// docid: M:System.Security.Cryptography.Xml.Signature.AddObject(System.Security.Cryptography.Xml.DataObject)
    open func AddObject(dataObject : Optional<aspnetcore.System.Security.Cryptography.Xml.DataObject>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__AddObject_0__1__DataObject(&__thrown, self.get_handle(), dataObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.Signature.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.Signature.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.Signature.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.Signature.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.KeyInfo get_KeyInfo()
// docid: M:System.Security.Cryptography.Xml.Signature.get_KeyInfo
    open func get_KeyInfo() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_KeyInfo__get_KeyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.KeyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
// docid: M:System.Security.Cryptography.Xml.Signature.set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
    open func set_KeyInfo(value : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__set_KeyInfo_0__1__KeyInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.IList get_ObjectList()
// docid: M:System.Security.Cryptography.Xml.Signature.get_ObjectList
    open func get_ObjectList() throws -> Optional<dotnet.System.Collections.IList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_IList__get_ObjectList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ObjectList(System.Collections.IList)
// docid: M:System.Security.Cryptography.Xml.Signature.set_ObjectList(System.Collections.IList)
    open func set_ObjectList(value : Optional<dotnet.System.Collections.IList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__set_ObjectList_0__1__IList(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_SignatureValue()
// docid: M:System.Security.Cryptography.Xml.Signature.get_SignatureValue
    open func get_SignatureValue() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_u8Array__get_SignatureValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignatureValue(System.Byte[])
// docid: M:System.Security.Cryptography.Xml.Signature.set_SignatureValue(System.Byte[])
    open func set_SignatureValue(value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__set_SignatureValue_0__1__u8Array(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.SignedInfo get_SignedInfo()
// docid: M:System.Security.Cryptography.Xml.Signature.get_SignedInfo
    open func get_SignedInfo() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.SignedInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Signature_SignedInfo__get_SignedInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.SignedInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignedInfo(System.Security.Cryptography.Xml.SignedInfo)
// docid: M:System.Security.Cryptography.Xml.Signature.set_SignedInfo(System.Security.Cryptography.Xml.SignedInfo)
    open func set_SignedInfo(value : Optional<aspnetcore.System.Security.Cryptography.Xml.SignedInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Signature_void__set_SignedInfo_0__1__SignedInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    open var KeyInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        get {
            return try! get_KeyInfo();
        }
        set(v) {
            return try! set_KeyInfo(value: v!);
        }
    }
    open var ObjectList : Optional<dotnet.System.Collections.IList> {
        get {
            return try! get_ObjectList();
        }
        set(v) {
            return try! set_ObjectList(value: v!);
        }
    }
    open var SignatureValue : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_SignatureValue();
        }
        set(v) {
            return try! set_SignatureValue(value: v!);
        }
    }
    open var SignedInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.SignedInfo> {
        get {
            return try! get_SignedInfo();
        }
        set(v) {
            return try! set_SignedInfo(value: v!);
        }
    }
} // Signature


// type: System.Security.Cryptography.Xml.SignedInfo
open class SignedInfo
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_SignedInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_SignedInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddReference(System.Security.Cryptography.Xml.Reference)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.AddReference(System.Security.Cryptography.Xml.Reference)
    open func AddReference(reference : Optional<aspnetcore.System.Security.Cryptography.Xml.Reference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__AddReference_0__1__Reference(&__thrown, self.get_handle(), reference?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.CopyTo(System.Array,System.Int32)
    open /* method final */ func CopyTo(array : Optional<dotnet.System.Array>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array?.get_handle() ?? nil, index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.GetEnumerator
    open /* method final */ func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CanonicalizationMethod()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_CanonicalizationMethod
    open func get_CanonicalizationMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_String__get_CanonicalizationMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CanonicalizationMethod(System.String)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.set_CanonicalizationMethod(System.String)
    open func set_CanonicalizationMethod(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__set_CanonicalizationMethod_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.Transform get_CanonicalizationMethodObject()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_CanonicalizationMethodObject
    open func get_CanonicalizationMethodObject() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.Transform> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_Transform__get_CanonicalizationMethodObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.Transform(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Id(System.String)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.set_Id(System.String)
    open func set_Id(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__set_Id_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ArrayList get_References()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_References
    open func get_References() throws -> Optional<dotnet.System.Collections.ArrayList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_ArrayList__get_References_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ArrayList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SignatureLength()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_SignatureLength
    open func get_SignatureLength() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_String__get_SignatureLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignatureLength(System.String)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.set_SignatureLength(System.String)
    open func set_SignatureLength(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__set_SignatureLength_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SignatureMethod()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_SignatureMethod
    open func get_SignatureMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_String__get_SignatureMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignatureMethod(System.String)
// docid: M:System.Security.Cryptography.Xml.SignedInfo.set_SignatureMethod(System.String)
    open func set_SignatureMethod(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedInfo_void__set_SignatureMethod_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Cryptography.Xml.SignedInfo.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedInfo_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var CanonicalizationMethod : Optional<dotnet.System.String> {
        get {
            return try! get_CanonicalizationMethod();
        }
        set(v) {
            return try! set_CanonicalizationMethod(value: v!);
        }
    }
    open var CanonicalizationMethodObject : Optional<aspnetcore.System.Security.Cryptography.Xml.Transform> {
        get {
            return try! get_CanonicalizationMethodObject();
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
        set(v) {
            return try! set_Id(value: v!);
        }
    }
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    open var References : Optional<dotnet.System.Collections.ArrayList> {
        get {
            return try! get_References();
        }
    }
    open var SignatureLength : Optional<dotnet.System.String> {
        get {
            return try! get_SignatureLength();
        }
        set(v) {
            return try! set_SignatureLength(value: v!);
        }
    }
    open var SignatureMethod : Optional<dotnet.System.String> {
        get {
            return try! get_SignatureMethod();
        }
        set(v) {
            return try! set_SignatureMethod(value: v!);
        }
    }
    public var SyncRoot : Optional<dotnet.System.Object> {
        get {
            return try! get_SyncRoot();
        }
    }
} // SignedInfo


// type: System.Security.Cryptography.Xml.SignedXml
open class SignedXml
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_SignedXml_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String XmlDecryptionTransformUrl
    open class var XmlDecryptionTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDecryptionTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigBase64TransformUrl
    open class var XmlDsigBase64TransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigBase64TransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigC14NTransformUrl
    open class var XmlDsigC14NTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigC14NTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigC14NWithCommentsTransformUrl
    open class var XmlDsigC14NWithCommentsTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigC14NWithCommentsTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigCanonicalizationUrl
    open class var XmlDsigCanonicalizationUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigCanonicalizationUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigCanonicalizationWithCommentsUrl
    open class var XmlDsigCanonicalizationWithCommentsUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigCanonicalizationWithCommentsUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigDSAUrl
    open class var XmlDsigDSAUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigDSAUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigEnvelopedSignatureTransformUrl
    open class var XmlDsigEnvelopedSignatureTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigEnvelopedSignatureTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigExcC14NTransformUrl
    open class var XmlDsigExcC14NTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigExcC14NTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigExcC14NWithCommentsTransformUrl
    open class var XmlDsigExcC14NWithCommentsTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigExcC14NWithCommentsTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigHMACSHA1Url
    open class var XmlDsigHMACSHA1Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigHMACSHA1Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigMinimalCanonicalizationUrl
    open class var XmlDsigMinimalCanonicalizationUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigMinimalCanonicalizationUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigNamespaceUrl
    open class var XmlDsigNamespaceUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigNamespaceUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigRSASHA1Url
    open class var XmlDsigRSASHA1Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigRSASHA1Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigRSASHA256Url
    open class var XmlDsigRSASHA256Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigRSASHA256Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigRSASHA384Url
    open class var XmlDsigRSASHA384Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigRSASHA384Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigRSASHA512Url
    open class var XmlDsigRSASHA512Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigRSASHA512Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigSHA1Url
    open class var XmlDsigSHA1Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigSHA1Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigSHA256Url
    open class var XmlDsigSHA256Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigSHA256Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigSHA384Url
    open class var XmlDsigSHA384Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigSHA384Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigSHA512Url
    open class var XmlDsigSHA512Url : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigSHA512Url();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigXPathTransformUrl
    open class var XmlDsigXPathTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigXPathTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlDsigXsltTransformUrl
    open class var XmlDsigXsltTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlDsigXsltTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // static field: System.String XmlLicenseTransformUrl
    open class var XmlLicenseTransformUrl : Optional<dotnet.System.String> {
        get {
        let __h = System_Security_Cryptography_Xml_SignedXml_get_XmlLicenseTransformUrl();
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.SignedXml.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_SignedXml_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlDocument)
// docid: M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)
    public init(document : Optional<dotnet.System.Xml.XmlDocument>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_SignedXml_ctor_0__1__XmlDocument(&__thrown, document?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)
    public init(elem : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_SignedXml_ctor_0__1__XmlElement(&__thrown, elem?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddObject(System.Security.Cryptography.Xml.DataObject)
// docid: M:System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)
    open func AddObject(dataObject : Optional<aspnetcore.System.Security.Cryptography.Xml.DataObject>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__AddObject_0__1__DataObject(&__thrown, self.get_handle(), dataObject?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddReference(System.Security.Cryptography.Xml.Reference)
// docid: M:System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)
    open func AddReference(reference : Optional<aspnetcore.System.Security.Cryptography.Xml.Reference>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__AddReference_0__1__Reference(&__thrown, self.get_handle(), reference?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CheckSignature()
// docid: M:System.Security.Cryptography.Xml.SignedXml.CheckSignature
    open func CheckSignature() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_bool__CheckSignature_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
    open func CheckSignature(key : Optional<dotnet.System.Security.Cryptography.AsymmetricAlgorithm>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_bool__CheckSignature_0__1__AsymmetricAlgorithm(&__thrown, self.get_handle(), key?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
// docid: M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
    open func CheckSignature(macAlg : Optional<dotnet.System.Security.Cryptography.KeyedHashAlgorithm>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_bool__CheckSignature_0__1__KeyedHashAlgorithm(&__thrown, self.get_handle(), macAlg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2, bool)
// docid: M:System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)
    open func CheckSignature(certificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate2>, verifySignatureOnly : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_bool__CheckSignature_0__2__X509Certificate2_bool(&__thrown, self.get_handle(), certificate?.get_handle() ?? nil, Swift.Int32(verifySignatureOnly ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckSignatureReturningKey(ref System.Security.Cryptography.AsymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)
    open func CheckSignatureReturningKey(signingKey : inout dotnet.System.Security.Cryptography.AsymmetricAlgorithm) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_signingKey = signingKey.get_handle();
        let __return = System_Security_Cryptography_Xml_SignedXml_bool__CheckSignatureReturningKey_0__1__outAsymmetricAlgorithm(&__thrown, self.get_handle(), &_tmp_out_signingKey);
        let _tmp2_signingKey = dotnet.System.Security.Cryptography.AsymmetricAlgorithm(hndl: _tmp_out_signingKey);
            signingKey = _tmp2_signingKey;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ComputeSignature()
// docid: M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature
    open func ComputeSignature() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__ComputeSignature_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
// docid: M:System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
    open func ComputeSignature(macAlg : Optional<dotnet.System.Security.Cryptography.KeyedHashAlgorithm>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__ComputeSignature_0__1__KeyedHashAlgorithm(&__thrown, self.get_handle(), macAlg?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlElement GetIdElement(System.Xml.XmlDocument, System.String)
// docid: M:System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)
    open func GetIdElement(document : Optional<dotnet.System.Xml.XmlDocument>, idValue : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_XmlElement__GetIdElement_0__2__XmlDocument_String(&__thrown, self.get_handle(), document?.get_handle() ?? nil, idValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.SignedXml.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadXml(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)
    open func LoadXml(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__LoadXml_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptedXml get_EncryptedXml()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_EncryptedXml
    open func get_EncryptedXml() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_EncryptedXml__get_EncryptedXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedXml(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EncryptedXml(System.Security.Cryptography.Xml.EncryptedXml)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_EncryptedXml(System.Security.Cryptography.Xml.EncryptedXml)
    open func set_EncryptedXml(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_EncryptedXml_0__1__EncryptedXml(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.KeyInfo get_KeyInfo()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_KeyInfo
    open func get_KeyInfo() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_KeyInfo__get_KeyInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.KeyInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_KeyInfo(System.Security.Cryptography.Xml.KeyInfo)
    open func set_KeyInfo(value : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_KeyInfo_0__1__KeyInfo(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void set_Resolver(System.Xml.XmlResolver)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_Resolver(System.Xml.XmlResolver)
    open func set_Resolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_Resolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.Collection<System.String> get_SafeCanonicalizationMethods()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SafeCanonicalizationMethods
    open func get_SafeCanonicalizationMethods() throws -> Optional<dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_System_Collections_ObjectModel_Collection_string___get_SafeCanonicalizationMethods_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ObjectModel.Collection_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.Signature get_Signature()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_Signature
    open func get_Signature() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.Signature> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_Signature__get_Signature_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.Signature(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Func<System.Security.Cryptography.Xml.SignedXml,bool> get_SignatureFormatValidator()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SignatureFormatValidator
    open func get_SignatureFormatValidator() throws -> Optional<dotnet.System.Func_2<aspnetcore.System.Security.Cryptography.Xml.SignedXml,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_System_Func_System_Security_Cryptography_Xml_SignedXml_bool___get_SignatureFormatValidator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SignatureFormatValidator(System.Func<System.Security.Cryptography.Xml.SignedXml,bool>)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_SignatureFormatValidator(System.Func{System.Security.Cryptography.Xml.SignedXml,System.Boolean})
    open func set_SignatureFormatValidator(value : Optional<dotnet.System.Func_2<aspnetcore.System.Security.Cryptography.Xml.SignedXml,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_SignatureFormatValidator_0__1__System_Func_System_Security_Cryptography_Xml_SignedXml_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_SignatureFormatValidator(value : @escaping (Optional<aspnetcore.System.Security.Cryptography.Xml.SignedXml>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.System.Security.Cryptography.Xml.SignedXml,Swift.Bool>(value);
        return try set_SignatureFormatValidator(value: del_value);
    }
    // [IsSpecialName] System.String get_SignatureLength()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SignatureLength
    open func get_SignatureLength() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_String__get_SignatureLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SignatureMethod()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SignatureMethod
    open func get_SignatureMethod() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_String__get_SignatureMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Byte[] get_SignatureValue()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SignatureValue
    open func get_SignatureValue() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_u8Array__get_SignatureValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.SignedInfo get_SignedInfo()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SignedInfo
    open func get_SignedInfo() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.SignedInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_SignedInfo__get_SignedInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.SignedInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.AsymmetricAlgorithm get_SigningKey()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SigningKey
    open func get_SigningKey() throws -> Optional<dotnet.System.Security.Cryptography.AsymmetricAlgorithm> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_AsymmetricAlgorithm__get_SigningKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.AsymmetricAlgorithm(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SigningKey(System.Security.Cryptography.AsymmetricAlgorithm)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_SigningKey(System.Security.Cryptography.AsymmetricAlgorithm)
    open func set_SigningKey(value : Optional<dotnet.System.Security.Cryptography.AsymmetricAlgorithm>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_SigningKey_0__1__AsymmetricAlgorithm(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SigningKeyName()
// docid: M:System.Security.Cryptography.Xml.SignedXml.get_SigningKeyName
    open func get_SigningKeyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_SignedXml_String__get_SigningKeyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SigningKeyName(System.String)
// docid: M:System.Security.Cryptography.Xml.SignedXml.set_SigningKeyName(System.String)
    open func set_SigningKeyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_SignedXml_void__set_SigningKeyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var EncryptedXml : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml> {
        get {
            return try! get_EncryptedXml();
        }
        set(v) {
            return try! set_EncryptedXml(value: v!);
        }
    }
    open var KeyInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.KeyInfo> {
        get {
            return try! get_KeyInfo();
        }
        set(v) {
            return try! set_KeyInfo(value: v!);
        }
    }
    open var SafeCanonicalizationMethods : Optional<dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String>> {
        get {
            return try! get_SafeCanonicalizationMethods();
        }
    }
    open var Signature : Optional<aspnetcore.System.Security.Cryptography.Xml.Signature> {
        get {
            return try! get_Signature();
        }
    }
    open var SignatureFormatValidator : Optional<dotnet.System.Func_2<aspnetcore.System.Security.Cryptography.Xml.SignedXml,Bool>> {
        get {
            return try! get_SignatureFormatValidator();
        }
        set(v) {
            return try! set_SignatureFormatValidator(value: v!);
        }
    }
    open var SignatureLength : Optional<dotnet.System.String> {
        get {
            return try! get_SignatureLength();
        }
    }
    open var SignatureMethod : Optional<dotnet.System.String> {
        get {
            return try! get_SignatureMethod();
        }
    }
    open var SignatureValue : Optional<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_SignatureValue();
        }
    }
    open var SignedInfo : Optional<aspnetcore.System.Security.Cryptography.Xml.SignedInfo> {
        get {
            return try! get_SignedInfo();
        }
    }
    open var SigningKey : Optional<dotnet.System.Security.Cryptography.AsymmetricAlgorithm> {
        get {
            return try! get_SigningKey();
        }
        set(v) {
            return try! set_SigningKey(value: v!);
        }
    }
    /**
    */
    open var SigningKeyName : Optional<dotnet.System.String> {
        get {
            return try! get_SigningKeyName();
        }
        set(v) {
            return try! set_SigningKeyName(value: v!);
        }
    }
} // SignedXml


// type: System.Security.Cryptography.Xml.Transform
open class Transform
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_Transform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Byte[] GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
// docid: M:System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
    open func GetDigestedOutput(hash : Optional<dotnet.System.Security.Cryptography.HashAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_u8Array__GetDigestedOutput_0__1__HashAlgorithm(&__thrown, self.get_handle(), hash?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.Transform.GetOutput
    open func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
    open func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlElement GetXml()
// docid: M:System.Security.Cryptography.Xml.Transform.GetXml
    open func GetXml() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_XmlElement__GetXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
    open func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Transform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
    open func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Transform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Algorithm()
// docid: M:System.Security.Cryptography.Xml.Transform.get_Algorithm
    open func get_Algorithm() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_String__get_Algorithm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Algorithm(System.String)
// docid: M:System.Security.Cryptography.Xml.Transform.set_Algorithm(System.String)
    open func set_Algorithm(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Transform_void__set_Algorithm_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlElement get_Context()
// docid: M:System.Security.Cryptography.Xml.Transform.get_Context
    open func get_Context() throws -> Optional<dotnet.System.Xml.XmlElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_XmlElement__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Context(System.Xml.XmlElement)
// docid: M:System.Security.Cryptography.Xml.Transform.set_Context(System.Xml.XmlElement)
    open func set_Context(value : Optional<dotnet.System.Xml.XmlElement>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Transform_void__set_Context_0__1__XmlElement(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.Transform.get_InputTypes
    open func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.Transform.get_OutputTypes
    open func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Hashtable get_PropagatedNamespaces()
// docid: M:System.Security.Cryptography.Xml.Transform.get_PropagatedNamespaces
    open func get_PropagatedNamespaces() throws -> Optional<dotnet.System.Collections.Hashtable> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_Transform_Hashtable__get_PropagatedNamespaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Hashtable(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Resolver(System.Xml.XmlResolver)
// docid: M:System.Security.Cryptography.Xml.Transform.set_Resolver(System.Xml.XmlResolver)
    open func set_Resolver(value : Optional<dotnet.System.Xml.XmlResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_Transform_void__set_Resolver_0__1__XmlResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Algorithm : Optional<dotnet.System.String> {
        get {
            return try! get_Algorithm();
        }
        set(v) {
            return try! set_Algorithm(value: v!);
        }
    }
    open var Context : Optional<dotnet.System.Xml.XmlElement> {
        get {
            return try! get_Context();
        }
        set(v) {
            return try! set_Context(value: v!);
        }
    }
    open var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
    open var PropagatedNamespaces : Optional<dotnet.System.Collections.Hashtable> {
        get {
            return try! get_PropagatedNamespaces();
        }
    }
} // Transform


// type: System.Security.Cryptography.Xml.TransformChain
open class TransformChain
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_TransformChain_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.TransformChain.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_TransformChain_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Security.Cryptography.Xml.Transform)
// docid: M:System.Security.Cryptography.Xml.TransformChain.Add(System.Security.Cryptography.Xml.Transform)
    open func Add(transform : Optional<aspnetcore.System.Security.Cryptography.Xml.Transform>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_TransformChain_void__Add_0__1__Transform(&__thrown, self.get_handle(), transform?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.Xml.TransformChain.GetEnumerator
    open func GetEnumerator() throws -> Optional<dotnet.System.Collections.IEnumerator> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_TransformChain_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IEnumerator(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.Xml.TransformChain.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_TransformChain_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.Transform get_Item(System.Int32)
// docid: M:System.Security.Cryptography.Xml.TransformChain.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.Transform> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_TransformChain_Transform__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.Transform(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // TransformChain


// type: System.Security.Cryptography.Xml.XmlDecryptionTransform
open class XmlDecryptionTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDecryptionTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDecryptionTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddExceptUri(System.String)
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.AddExceptUri(System.String)
    open func AddExceptUri(uri : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDecryptionTransform_void__AddExceptUri_0__1__String(&__thrown, self.get_handle(), uri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDecryptionTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDecryptionTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDecryptionTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDecryptionTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.EncryptedXml get_EncryptedXml()
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.get_EncryptedXml
    open func get_EncryptedXml() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDecryptionTransform_EncryptedXml__get_EncryptedXml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.EncryptedXml(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_EncryptedXml(System.Security.Cryptography.Xml.EncryptedXml)
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.set_EncryptedXml(System.Security.Cryptography.Xml.EncryptedXml)
    open func set_EncryptedXml(value : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDecryptionTransform_void__set_EncryptedXml_0__1__EncryptedXml(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDecryptionTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDecryptionTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDecryptionTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var EncryptedXml : Optional<aspnetcore.System.Security.Cryptography.Xml.EncryptedXml> {
        get {
            return try! get_EncryptedXml();
        }
        set(v) {
            return try! set_EncryptedXml(value: v!);
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDecryptionTransform


// type: System.Security.Cryptography.Xml.XmlDsigBase64Transform
open class XmlDsigBase64Transform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigBase64Transform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigBase64Transform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigBase64Transform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigBase64Transform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigBase64Transform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigBase64Transform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigBase64Transform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigBase64Transform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigBase64Transform


// type: System.Security.Cryptography.Xml.XmlDsigC14NTransform
open class XmlDsigC14NTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigC14NTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigC14NTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.#ctor(System.Boolean)
    public init(includeComments : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigC14NTransform_ctor_0__1__bool(&__thrown, Swift.Int32(includeComments ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Byte[] GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
    open override func GetDigestedOutput(hash : Optional<dotnet.System.Security.Cryptography.HashAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigC14NTransform_u8Array__GetDigestedOutput_0__1__HashAlgorithm(&__thrown, self.get_handle(), hash?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigC14NTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigC14NTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigC14NTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigC14NTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigC14NTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigC14NTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigC14NTransform


// type: System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform
open class XmlDsigC14NWithCommentsTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.XmlDsigC14NTransform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigC14NWithCommentsTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigC14NWithCommentsTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlDsigC14NWithCommentsTransform


// type: System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform
open class XmlDsigEnvelopedSignatureTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.#ctor(System.Boolean)
    /**
    */
    public init(includeComments : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_ctor_0__1__bool(&__thrown, Swift.Int32(includeComments ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigEnvelopedSignatureTransform


// type: System.Security.Cryptography.Xml.XmlDsigExcC14NTransform
open class XmlDsigExcC14NTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.#ctor(System.Boolean)
    public init(includeComments : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_ctor_0__1__bool(&__thrown, Swift.Int32(includeComments ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, System.String)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.#ctor(System.Boolean,System.String)
    public init(includeComments : Bool, inclusiveNamespacesPrefixList : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_ctor_0__2__bool_String(&__thrown, Swift.Int32(includeComments ? 1 : 0), inclusiveNamespacesPrefixList?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.#ctor(System.String)
    public init(inclusiveNamespacesPrefixList : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_ctor_0__1__String(&__thrown, inclusiveNamespacesPrefixList?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Byte[] GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
    open override func GetDigestedOutput(hash : Optional<dotnet.System.Security.Cryptography.HashAlgorithm>) throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_u8Array__GetDigestedOutput_0__1__HashAlgorithm(&__thrown, self.get_handle(), hash?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_InclusiveNamespacesPrefixList()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.get_InclusiveNamespacesPrefixList
    open func get_InclusiveNamespacesPrefixList() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_String__get_InclusiveNamespacesPrefixList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InclusiveNamespacesPrefixList(System.String)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.set_InclusiveNamespacesPrefixList(System.String)
    open func set_InclusiveNamespacesPrefixList(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_void__set_InclusiveNamespacesPrefixList_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigExcC14NTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var InclusiveNamespacesPrefixList : Optional<dotnet.System.String> {
        get {
            return try! get_InclusiveNamespacesPrefixList();
        }
        set(v) {
            return try! set_InclusiveNamespacesPrefixList(value: v!);
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigExcC14NTransform


// type: System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform
open class XmlDsigExcC14NWithCommentsTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.XmlDsigExcC14NTransform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigExcC14NWithCommentsTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NWithCommentsTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform.#ctor(System.String)
    public override init(inclusiveNamespacesPrefixList : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigExcC14NWithCommentsTransform_ctor_0__1__String(&__thrown, inclusiveNamespacesPrefixList?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // XmlDsigExcC14NWithCommentsTransform


// type: System.Security.Cryptography.Xml.XmlDsigXPathTransform
open class XmlDsigXPathTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigXPathTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigXPathTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXPathTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXPathTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigXPathTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigXPathTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXPathTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXPathTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigXPathTransform


// type: System.Security.Cryptography.Xml.XmlDsigXsltTransform
open class XmlDsigXsltTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlDsigXsltTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigXsltTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor(System.Boolean)
    public init(includeComments : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlDsigXsltTransform_ctor_0__1__bool(&__thrown, Swift.Int32(includeComments ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXsltTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXsltTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigXsltTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlDsigXsltTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXsltTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlDsigXsltTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlDsigXsltTransform


// type: System.Security.Cryptography.Xml.XmlLicenseTransform
open class XmlLicenseTransform
    :
    aspnetcore.System.Security.Cryptography.Xml.Transform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Xml_XmlLicenseTransform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Xml_XmlLicenseTransform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object GetOutput()
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
    open override func GetOutput() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlLicenseTransform_Object__GetOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetOutput(System.Type)
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
    open override func GetOutput(type : Optional<dotnet.System.Type_>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlLicenseTransform_Object__GetOutput_0__1__Type(&__thrown, self.get_handle(), type?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void LoadInnerXml(System.Xml.XmlNodeList)
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
    open override func LoadInnerXml(nodeList : Optional<dotnet.System.Xml.XmlNodeList>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlLicenseTransform_void__LoadInnerXml_0__1__XmlNodeList(&__thrown, self.get_handle(), nodeList?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LoadInput(System.Object)
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
    open override func LoadInput(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlLicenseTransform_void__LoadInput_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Xml.IRelDecryptor get_Decryptor()
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.get_Decryptor
    open func get_Decryptor() throws -> Optional<aspnetcore.System.Security.Cryptography.Xml.IRelDecryptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlLicenseTransform_IRelDecryptor__get_Decryptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.System.Security.Cryptography.Xml.IRelDecryptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Decryptor(System.Security.Cryptography.Xml.IRelDecryptor)
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.set_Decryptor(System.Security.Cryptography.Xml.IRelDecryptor)
    open func set_Decryptor(value : Optional<aspnetcore.System.Security.Cryptography.Xml.IRelDecryptor>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Xml_XmlLicenseTransform_void__set_Decryptor_0__1__IRelDecryptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_InputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.get_InputTypes
    open override func get_InputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlLicenseTransform_TypeArray__get_InputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type[] get_OutputTypes()
// docid: M:System.Security.Cryptography.Xml.XmlLicenseTransform.get_OutputTypes
    open override func get_OutputTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Xml_XmlLicenseTransform_TypeArray__get_OutputTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Decryptor : Optional<aspnetcore.System.Security.Cryptography.Xml.IRelDecryptor> {
        get {
            return try! get_Decryptor();
        }
        set(v) {
            return try! set_Decryptor(value: v!);
        }
    }
    open override var InputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_InputTypes();
        }
    }
    open override var OutputTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        get {
            return try! get_OutputTypes();
        }
    }
} // XmlLicenseTransform


}




public protocol System_Security_Cryptography_Xml_IRelDecryptor
    :
    SGBridgeGetHandle
{
}

