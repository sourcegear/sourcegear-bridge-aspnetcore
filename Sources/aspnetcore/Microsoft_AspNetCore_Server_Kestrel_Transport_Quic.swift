// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Hosting
extension Microsoft.AspNetCore.Hosting {
// type: Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions
public struct WebHostBuilderQuicExtensions {
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
    public static func UseQuic(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderQuicExtensions_IWebHostBuilder__UseQuic_0__1__IWebHostBuilder(&__thrown, hostBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Hosting.IWebHostBuilder UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>)
// docid: M:Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions})
    public static func UseQuic(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Hosting_WebHostBuilderQuicExtensions_IWebHostBuilder__UseQuic_0__2__IWebHostBuilder_System_Action_Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_(&__thrown, hostBuilder.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func UseQuic(hostBuilder : aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder, configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>(configureOptions);
        return try UseQuic(hostBuilder: hostBuilder, configureOptions: del_configureOptions);
    }
} // WebHostBuilderQuicExtensions


}

// Microsoft.AspNetCore.Server
// Microsoft.AspNetCore.Server.Kestrel
// Microsoft.AspNetCore.Server.Kestrel.Transport
// Microsoft.AspNetCore.Server.Kestrel.Transport.Quic
extension Microsoft.AspNetCore.Server.Kestrel.Transport.Quic {
// type: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions
    /**
    
            Options for Quic based connections.
            

    */
open class QuicTransportOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.UInt16 get_MaxBidirectionalStreamCount()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_MaxBidirectionalStreamCount
    open func get_MaxBidirectionalStreamCount() throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_u16__get_MaxBidirectionalStreamCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxBidirectionalStreamCount(System.UInt16)
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.set_MaxBidirectionalStreamCount(System.UInt16)
    open func set_MaxBidirectionalStreamCount(value : Swift.UInt16) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_void__set_MaxBidirectionalStreamCount_0__1__u16(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.UInt16 get_MaxUnidirectionalStreamCount()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_MaxUnidirectionalStreamCount
    open func get_MaxUnidirectionalStreamCount() throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_u16__get_MaxUnidirectionalStreamCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxUnidirectionalStreamCount(System.UInt16)
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.set_MaxUnidirectionalStreamCount(System.UInt16)
    open func set_MaxUnidirectionalStreamCount(value : Swift.UInt16) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_void__set_MaxUnidirectionalStreamCount_0__1__u16(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_IdleTimeout()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_IdleTimeout
    open func get_IdleTimeout() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_TimeSpan__get_IdleTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] void set_IdleTimeout(System.TimeSpan)
    // [IsSpecialName] System.Nullable<System.Int64> get_MaxReadBufferSize()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_MaxReadBufferSize
    open func get_MaxReadBufferSize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_System_Nullable_i64___get_MaxReadBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxReadBufferSize(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.set_MaxReadBufferSize(System.Nullable{System.Int64})
    open func set_MaxReadBufferSize(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_void__set_MaxReadBufferSize_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_MaxWriteBufferSize()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_MaxWriteBufferSize
    open func get_MaxWriteBufferSize() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_System_Nullable_i64___get_MaxWriteBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_MaxWriteBufferSize(System.Nullable<System.Int64>)
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.set_MaxWriteBufferSize(System.Nullable{System.Int64})
    open func set_MaxWriteBufferSize(value : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_void__set_MaxWriteBufferSize_0__1__System_Nullable_i64_(&__thrown, self.get_handle(), (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Backlog()
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.get_Backlog
    open func get_Backlog() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_i32__get_Backlog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Backlog(System.Int32)
// docid: M:Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions.set_Backlog(System.Int32)
    open func set_Backlog(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Server_Kestrel_Transport_Quic_QuicTransportOptions_void__set_Backlog_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The maximum length of the pending connection queue.
            

    */
    open var Backlog : Swift.Int32 {
        get {
            return try! get_Backlog();
        }
        set(v) {
            return try! set_Backlog(value: v);
        }
    }
    /**
    
            Sets the idle timeout for connections and streams.
            

    */
    open var IdleTimeout : dotnet.System.TimeSpan {
        get {
            return try! get_IdleTimeout();
        }
// TODO COPE prop set (span) [IsSpecialName] void set_IdleTimeout(System.TimeSpan)
    }
    /**
    
            The maximum number of concurrent bi-directional streams per connection.
            

    */
    open var MaxBidirectionalStreamCount : Swift.UInt16 {
        get {
            return try! get_MaxBidirectionalStreamCount();
        }
        set(v) {
            return try! set_MaxBidirectionalStreamCount(value: v);
        }
    }
    /**
    
            The maximum read size.
            

    */
    open var MaxReadBufferSize : Optional<Swift.Int64> {
        get {
            return try! get_MaxReadBufferSize();
        }
        set(v) {
            return try! set_MaxReadBufferSize(value: v!);
        }
    }
    /**
    
            The maximum number of concurrent inbound uni-directional streams per connection.
            

    */
    open var MaxUnidirectionalStreamCount : Swift.UInt16 {
        get {
            return try! get_MaxUnidirectionalStreamCount();
        }
        set(v) {
            return try! set_MaxUnidirectionalStreamCount(value: v);
        }
    }
    /**
    
            The maximum write size.
            

    */
    open var MaxWriteBufferSize : Optional<Swift.Int64> {
        get {
            return try! get_MaxWriteBufferSize();
        }
        set(v) {
            return try! set_MaxWriteBufferSize(value: v!);
        }
    }
} // QuicTransportOptions


}






// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseQuic() throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Hosting.IWebHostBuilder UseQuic(Microsoft.AspNetCore.Hosting.IWebHostBuilder, System.Action<Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>)
extension Microsoft_AspNetCore_Hosting_IWebHostBuilder {
    public func UseQuic(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureOptions: configureOptions);
    }
    // delegate closure overload
    public func UseQuic(configureOptions : @escaping (Optional<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportOptions>(configureOptions);
        return try aspnetcore.Microsoft.AspNetCore.Hosting.WebHostBuilderQuicExtensions.UseQuic(hostBuilder: aspnetcore.Microsoft.AspNetCore.Hosting.IWebHostBuilder(hndl: __copy_handle(self.get_handle())), configureOptions: del_configureOptions);
    }
}

