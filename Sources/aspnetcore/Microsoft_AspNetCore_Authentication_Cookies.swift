// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;
import jumptable_aspnetcore;
import dotnet;

// Microsoft
// Microsoft.AspNetCore
// Microsoft.AspNetCore.Authentication
// Microsoft.AspNetCore.Authentication.Cookies
extension Microsoft.AspNetCore.Authentication.Cookies {
// type: Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager
    /**
    
            This handles cookies that are limited by per cookie length. It breaks down long cookies for responses, and reassembles them
            from requests.
            

    */
open class ChunkingCookieManager
    :
    dotnet.System.Object,
    Microsoft_AspNetCore_Authentication_Cookies_ICookieManager
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultChunkSize
    /**
    
            The default maximum size of characters in a cookie to send back to the client.
            

    */
    open class var DefaultChunkSize : Swift.Int32 {
        get {
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_get_DefaultChunkSize();
            return __return;
        }
    }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.#ctor
    /**
    
            Initializes a new instance of .
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetRequestCookie(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.GetRequestCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Get the reassembled cookie. Non chunked cookies are returned normally.
            Cookies with missing chunks just have their "chunks-XX" header returned.
            

    - Parameter context: 
    - Parameter key: 
    - Returns: The reassembled cookie, if any, or null.

    */
    open /* method final */ func GetRequestCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_String__GetRequestCookie_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void AppendResponseCookie(Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.AppendResponseCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Appends a new response cookie to the Set-Cookie header. If the cookie is larger than the given size limit
            then it will be broken down into multiple cookies as follows:
            Set-Cookie: CookieName=chunks-3; path=/
            Set-Cookie: CookieNameC1=Segment1; path=/
            Set-Cookie: CookieNameC2=Segment2; path=/
            Set-Cookie: CookieNameC3=Segment3; path=/
            

    - Parameter context: 
    - Parameter key: 
    - Parameter value: 
    - Parameter options: 
    */
    open /* method final */ func AppendResponseCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String, value : Optional<dotnet.System.String>, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_void__AppendResponseCookie_0__4__HttpContext_String_String_CookieOptions(&__thrown, self.get_handle(), context.get_handle(), key.get_handle(), value?.get_handle() ?? nil, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteCookie(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.DeleteCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Deletes the cookie with the given key by setting an expired state. If a matching chunked cookie exists on
            the request, delete each chunk.
            

    - Parameter context: 
    - Parameter key: 
    - Parameter options: 
    */
    open /* method final */ func DeleteCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_void__DeleteCookie_0__3__HttpContext_String_CookieOptions(&__thrown, self.get_handle(), context.get_handle(), key.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> get_ChunkSize()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.get_ChunkSize
    open func get_ChunkSize() throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_System_Nullable_i32___get_ChunkSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] void set_ChunkSize(System.Nullable<System.Int32>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.set_ChunkSize(System.Nullable{System.Int32})
    open func set_ChunkSize(value : Optional<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_void__set_ChunkSize_0__1__System_Nullable_i32_(&__thrown, self.get_handle(), (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ThrowForPartialCookies()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.get_ThrowForPartialCookies
    open func get_ThrowForPartialCookies() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_bool__get_ThrowForPartialCookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ThrowForPartialCookies(bool)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ChunkingCookieManager.set_ThrowForPartialCookies(System.Boolean)
    open func set_ThrowForPartialCookies(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ChunkingCookieManager_void__set_ThrowForPartialCookies_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
             The maximum size of cookie to send back to the client. If a cookie exceeds this size it will be broken down into multiple
             cookies. Set this value to null to disable this behavior. The default is 4090 characters, which is supported by all
             common browsers.
            
             Note that browsers may also have limits on the total size of all cookies per domain, and on the number of cookies per domain.
             

    */
    open var ChunkSize : Optional<Swift.Int32> {
        get {
            return try! get_ChunkSize();
        }
        set(v) {
            return try! set_ChunkSize(value: v!);
        }
    }
    /**
    
            Throw if not all chunks of a cookie are available on a request for re-assembly.
            

    */
    open var ThrowForPartialCookies : Bool {
        get {
            return try! get_ThrowForPartialCookies();
        }
        set(v) {
            return try! set_ThrowForPartialCookies(value: v);
        }
    }
} // ChunkingCookieManager


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults
public struct CookieAuthenticationDefaults {
    // static field: System.String AuthenticationScheme
    /**
    
            The default value used for CookieAuthenticationOptions.AuthenticationScheme
            

    */
    public static var AuthenticationScheme : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_AuthenticationScheme());
            return __return;
        }
    }
    // static field: System.String CookiePrefix
    /**
    
            The prefix used to provide a default CookieAuthenticationOptions.CookieName
            

    */
    public static var CookiePrefix : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_CookiePrefix());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.PathString LoginPath
    /**
    
            The default value used by CookieAuthenticationMiddleware for the
            CookieAuthenticationOptions.LoginPath
            

    */
    public static var LoginPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_LoginPath());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.PathString LogoutPath
    /**
    
            The default value used by CookieAuthenticationMiddleware for the
            CookieAuthenticationOptions.LogoutPath
            

    */
    public static var LogoutPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_LogoutPath());
            return __return;
        }
    }
    // static field: Microsoft.AspNetCore.Http.PathString AccessDeniedPath
    /**
    
            The default value used by CookieAuthenticationMiddleware for the
            CookieAuthenticationOptions.AccessDeniedPath
            

    */
    public static var AccessDeniedPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
        let __return = aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_AccessDeniedPath());
            return __return;
        }
    }
    // static field: System.String ReturnUrlParameter
    /**
    
            The default value of the CookieAuthenticationOptions.ReturnUrlParameter
            

    */
    public static var ReturnUrlParameter : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationDefaults_get_ReturnUrlParameter());
            return __return;
        }
    }
} // CookieAuthenticationDefaults


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents
    /**
    
            Allows subscribing to events raised during cookie authentication.
            

    */
open class CookieAuthenticationEvents
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Threading.Tasks.Task ValidatePrincipal(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.ValidatePrincipal(Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext)
    /**
    
            Invoked to validate the prinicipal.
            

    - Parameter context: The .
    */
    open func ValidatePrincipal(context : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__ValidatePrincipal_0__1__CookieValidatePrincipalContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SigningIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.SigningIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext)
    /**
    
            Invoked during sign in.
            

    - Parameter context: The .
    */
    open func SigningIn(context : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__SigningIn_0__1__CookieSigningInContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SignedIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.SignedIn(Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext)
    /**
    
            Invoked after sign in has completed.
            

    - Parameter context: The .
    */
    open func SignedIn(context : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__SignedIn_0__1__CookieSignedInContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SigningOut(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.SigningOut(Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext)
    /**
    
            Invoked on sign out.
            

    - Parameter context: The .
    */
    open func SigningOut(context : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__SigningOut_0__1__CookieSigningOutContext(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RedirectToLogout(Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.RedirectToLogout(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Invoked when the client is being redirected to the log out url.
            

    - Parameter context: The .
    */
    open func RedirectToLogout(context : aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__RedirectToLogout_0__1__Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RedirectToLogin(Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.RedirectToLogin(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Invoked when the client is being redirected to the log in url.
            

    - Parameter context: The .
    */
    open func RedirectToLogin(context : aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__RedirectToLogin_0__1__Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RedirectToReturnUrl(Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.RedirectToReturnUrl(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Invoked when the client is being redirected after log out.
            

    - Parameter context: The .
    */
    open func RedirectToReturnUrl(context : aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__RedirectToReturnUrl_0__1__Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task RedirectToAccessDenied(Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.RedirectToAccessDenied(Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Invoked when the client is being redirected to the access denied url.
            

    - Parameter context: The .
    */
    open func RedirectToAccessDenied(context : aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_Task__RedirectToAccessDenied_0__1__Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,System.Threading.Tasks.Task> get_OnValidatePrincipal()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnValidatePrincipal
    open func get_OnValidatePrincipal() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_Task___get_OnValidatePrincipal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnValidatePrincipal(System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnValidatePrincipal(System.Func{Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,System.Threading.Tasks.Task})
    open func set_OnValidatePrincipal(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnValidatePrincipal_0__1__System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnValidatePrincipal(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnValidatePrincipal(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,System.Threading.Tasks.Task> get_OnCheckSlidingExpiration()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnCheckSlidingExpiration
    open func get_OnCheckSlidingExpiration() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_Task___get_OnCheckSlidingExpiration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnCheckSlidingExpiration(System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnCheckSlidingExpiration(System.Func{Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,System.Threading.Tasks.Task})
    open func set_OnCheckSlidingExpiration(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnCheckSlidingExpiration_0__1__System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnCheckSlidingExpiration(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnCheckSlidingExpiration(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,System.Threading.Tasks.Task> get_OnSigningIn()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnSigningIn
    open func get_OnSigningIn() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_Task___get_OnSigningIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnSigningIn(System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnSigningIn(System.Func{Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,System.Threading.Tasks.Task})
    open func set_OnSigningIn(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnSigningIn_0__1__System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnSigningIn(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnSigningIn(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,System.Threading.Tasks.Task> get_OnSignedIn()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnSignedIn
    open func get_OnSignedIn() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSignedInContext_Task___get_OnSignedIn_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnSignedIn(System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnSignedIn(System.Func{Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,System.Threading.Tasks.Task})
    open func set_OnSignedIn(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnSignedIn_0__1__System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSignedInContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnSignedIn(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnSignedIn(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,System.Threading.Tasks.Task> get_OnSigningOut()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnSigningOut
    open func get_OnSigningOut() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_Task___get_OnSigningOut_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnSigningOut(System.Func<Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnSigningOut(System.Func{Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,System.Threading.Tasks.Task})
    open func set_OnSigningOut(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnSigningOut_0__1__System_Func_Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnSigningOut(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnSigningOut(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task> get_OnRedirectToLogin()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnRedirectToLogin
    open func get_OnRedirectToLogin() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task___get_OnRedirectToLogin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRedirectToLogin(System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnRedirectToLogin(System.Func{Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions},System.Threading.Tasks.Task})
    open func set_OnRedirectToLogin(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnRedirectToLogin_0__1__System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRedirectToLogin(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRedirectToLogin(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task> get_OnRedirectToAccessDenied()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnRedirectToAccessDenied
    open func get_OnRedirectToAccessDenied() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task___get_OnRedirectToAccessDenied_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRedirectToAccessDenied(System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnRedirectToAccessDenied(System.Func{Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions},System.Threading.Tasks.Task})
    open func set_OnRedirectToAccessDenied(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnRedirectToAccessDenied_0__1__System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRedirectToAccessDenied(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRedirectToAccessDenied(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task> get_OnRedirectToLogout()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnRedirectToLogout
    open func get_OnRedirectToLogout() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task___get_OnRedirectToLogout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRedirectToLogout(System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnRedirectToLogout(System.Func{Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions},System.Threading.Tasks.Task})
    open func set_OnRedirectToLogout(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnRedirectToLogout_0__1__System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRedirectToLogout(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRedirectToLogout(value: del_value);
    }
    // [IsSpecialName] System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task> get_OnRedirectToReturnUrl()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.get_OnRedirectToReturnUrl
    open func get_OnRedirectToReturnUrl() throws -> dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task___get_OnRedirectToReturnUrl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Func_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OnRedirectToReturnUrl(System.Func<Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,System.Threading.Tasks.Task>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents.set_OnRedirectToReturnUrl(System.Func{Microsoft.AspNetCore.Authentication.RedirectContext{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions},System.Threading.Tasks.Task})
    open func set_OnRedirectToReturnUrl(value : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationEvents_void__set_OnRedirectToReturnUrl_0__1__System_Func_Microsoft_AspNetCore_Authentication_Microsoft_AspNetCore_Authentication_RedirectContext_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__Task_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_OnRedirectToReturnUrl(value : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> dotnet.System.Threading.Tasks.Task) throws {
        let del_value = try dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task>(value);
        return try set_OnRedirectToReturnUrl(value: del_value);
    }
    /**
    
            Invoked to check if the cookie should be renewed.
            

    */
    open var OnCheckSlidingExpiration : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnCheckSlidingExpiration();
        }
        set(v) {
            return try! set_OnCheckSlidingExpiration(value: v);
        }
    }
    /**
    
            Invoked when the client needs to be redirected to the access denied url.
            

    */
    open var OnRedirectToAccessDenied : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRedirectToAccessDenied();
        }
        set(v) {
            return try! set_OnRedirectToAccessDenied(value: v);
        }
    }
    /**
    
            Invoked when the client needs to be redirected to the sign in url.
            

    */
    open var OnRedirectToLogin : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRedirectToLogin();
        }
        set(v) {
            return try! set_OnRedirectToLogin(value: v);
        }
    }
    /**
    
            Invoked when the client is to be redirected to logout.
            

    */
    open var OnRedirectToLogout : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRedirectToLogout();
        }
        set(v) {
            return try! set_OnRedirectToLogout(value: v);
        }
    }
    /**
    
            Invoked when the client is to be redirected after logout.
            

    */
    open var OnRedirectToReturnUrl : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.RedirectContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnRedirectToReturnUrl();
        }
        set(v) {
            return try! set_OnRedirectToReturnUrl(value: v);
        }
    }
    /**
    
            Invoked after sign in has completed.
            

    */
    open var OnSignedIn : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnSignedIn();
        }
        set(v) {
            return try! set_OnSignedIn(value: v);
        }
    }
    /**
    
            Invoked on signing in.
            

    */
    open var OnSigningIn : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnSigningIn();
        }
        set(v) {
            return try! set_OnSigningIn(value: v);
        }
    }
    /**
    
            Invoked on signing out.
            

    */
    open var OnSigningOut : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnSigningOut();
        }
        set(v) {
            return try! set_OnSigningOut(value: v);
        }
    }
    /**
    
            Invoked to validate the principal.
            

    */
    open var OnValidatePrincipal : dotnet.System.Func_2<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext,dotnet.System.Threading.Tasks.Task> {
        get {
            return try! get_OnValidatePrincipal();
        }
        set(v) {
            return try! set_OnValidatePrincipal(value: v);
        }
    }
} // CookieAuthenticationEvents


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler
    /**
    
            Implementation for the cookie-based authentication handler.
            

    */
open class CookieAuthenticationHandler
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationHandler_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>, Microsoft.Extensions.Logging.ILoggerFactory, System.Text.Encodings.Web.UrlEncoder, Microsoft.AspNetCore.Authentication.ISystemClock)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)
    /**
    
            Initializes a new instance of .
            

    - Parameter options: Accessor to .
    - Parameter logger: The .
    - Parameter encoder: The .
    - Parameter clock: The .
    */
    public override init(options : aspnetcore.Microsoft.Extensions.Options.IOptionsMonitor_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>, logger : aspnetcore.Microsoft.Extensions.Logging.ILoggerFactory, encoder : dotnet.System.Text.Encodings.Web.UrlEncoder, clock : aspnetcore.Microsoft.AspNetCore.Authentication.ISystemClock) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationHandler_ctor_0__4__Microsoft_Extensions_Options_IOptionsMonitor_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions__ILoggerFactory_UrlEncoder_ISystemClock(&__thrown, options.get_handle(), logger.get_handle(), encoder.get_handle(), clock.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // CookieAuthenticationHandler


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions
    /**
    
            Configuration options for .
            

    */
open class CookieAuthenticationOptions
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.#ctor
    /**
    
            Create an instance of the options initialized with the default values
            

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieBuilder get_Cookie()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_Cookie
    open func get_Cookie() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_CookieBuilder__get_Cookie_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_Cookie(Microsoft.AspNetCore.Http.CookieBuilder)
    open func set_Cookie(value : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_Cookie_0__1__CookieBuilder(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.DataProtection.IDataProtectionProvider get_DataProtectionProvider()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_DataProtectionProvider
    open func get_DataProtectionProvider() throws -> Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_IDataProtectionProvider__get_DataProtectionProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_DataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
    open func set_DataProtectionProvider(value : Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_DataProtectionProvider_0__1__IDataProtectionProvider(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SlidingExpiration()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_SlidingExpiration
    open func get_SlidingExpiration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_bool__get_SlidingExpiration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SlidingExpiration(bool)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_SlidingExpiration(System.Boolean)
    open func set_SlidingExpiration(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_SlidingExpiration_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_LoginPath()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_LoginPath
    open func get_LoginPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_PathString__get_LoginPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_LoginPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_LoginPath(Microsoft.AspNetCore.Http.PathString)
    open func set_LoginPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_LoginPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_LogoutPath()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_LogoutPath
    open func get_LogoutPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_PathString__get_LogoutPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_LogoutPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_LogoutPath(Microsoft.AspNetCore.Http.PathString)
    open func set_LogoutPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_LogoutPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.PathString get_AccessDeniedPath()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_AccessDeniedPath
    open func get_AccessDeniedPath() throws -> aspnetcore.Microsoft.AspNetCore.Http.PathString {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_PathString__get_AccessDeniedPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.PathString(hndl : __return);
        }
    }
    // [IsSpecialName] void set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_AccessDeniedPath(Microsoft.AspNetCore.Http.PathString)
    open func set_AccessDeniedPath(value : aspnetcore.Microsoft.AspNetCore.Http.PathString) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_AccessDeniedPath_0__1__PathString(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ReturnUrlParameter()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_ReturnUrlParameter
    open func get_ReturnUrlParameter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_String__get_ReturnUrlParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ReturnUrlParameter(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_ReturnUrlParameter(System.String)
    open func set_ReturnUrlParameter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_ReturnUrlParameter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents get_Events()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_Events
    open override func get_Events() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_CookieAuthenticationEvents__get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Events(Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_Events(Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents)
    open func set_Events(value : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_Events_0__1__CookieAuthenticationEvents(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.ISecureDataFormat<Microsoft.AspNetCore.Authentication.AuthenticationTicket> get_TicketDataFormat()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_TicketDataFormat
    open func get_TicketDataFormat() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_Microsoft_AspNetCore_Authentication_ISecureDataFormat_Microsoft_AspNetCore_Authentication_AuthenticationTicket___get_TicketDataFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TicketDataFormat(Microsoft.AspNetCore.Authentication.ISecureDataFormat<Microsoft.AspNetCore.Authentication.AuthenticationTicket>)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_TicketDataFormat(Microsoft.AspNetCore.Authentication.ISecureDataFormat{Microsoft.AspNetCore.Authentication.AuthenticationTicket})
    open func set_TicketDataFormat(value : aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_TicketDataFormat_0__1__Microsoft_AspNetCore_Authentication_ISecureDataFormat_Microsoft_AspNetCore_Authentication_AuthenticationTicket_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.Cookies.ICookieManager get_CookieManager()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_CookieManager
    open func get_CookieManager() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ICookieManager {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_ICookieManager__get_CookieManager_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ICookieManager(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieManager(Microsoft.AspNetCore.Authentication.Cookies.ICookieManager)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_CookieManager(Microsoft.AspNetCore.Authentication.Cookies.ICookieManager)
    open func set_CookieManager(value : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ICookieManager) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_CookieManager_0__1__ICookieManager(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Authentication.Cookies.ITicketStore get_SessionStore()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_SessionStore
    open func get_SessionStore() throws -> Optional<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ITicketStore> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_ITicketStore__get_SessionStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ITicketStore(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SessionStore(Microsoft.AspNetCore.Authentication.Cookies.ITicketStore)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_SessionStore(Microsoft.AspNetCore.Authentication.Cookies.ITicketStore)
    open func set_SessionStore(value : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ITicketStore>) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_SessionStore_0__1__ITicketStore(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_ExpireTimeSpan()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.get_ExpireTimeSpan
    open func get_ExpireTimeSpan() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_TimeSpan__get_ExpireTimeSpan_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ExpireTimeSpan(System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions.set_ExpireTimeSpan(System.TimeSpan)
    open func set_ExpireTimeSpan(value : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_void__set_ExpireTimeSpan_0__1__TimeSpan(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The AccessDeniedPath property is used by the handler for the redirection target when handling ForbidAsync.
            

    */
    open var AccessDeniedPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_AccessDeniedPath();
        }
        set(v) {
            return try! set_AccessDeniedPath(value: v);
        }
    }
    /**
    
            
            Determines the settings used to create the cookie.
            
            
             defaults to .
             defaults to true.
             defaults to .
            
            

    */
    open var Cookie : aspnetcore.Microsoft.AspNetCore.Http.CookieBuilder {
        get {
            return try! get_Cookie();
        }
        set(v) {
            return try! set_Cookie(value: v);
        }
    }
    /**
    
             The component used to get cookies from the request or set them on the response.
            
             ChunkingCookieManager will be used by default.
             

    */
    open var CookieManager : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ICookieManager {
        get {
            return try! get_CookieManager();
        }
        set(v) {
            return try! set_CookieManager(value: v);
        }
    }
    /**
    
            If set this will be used by the CookieAuthenticationHandler for data protection.
            

    */
    open var DataProtectionProvider : Optional<aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider> {
        get {
            return try! get_DataProtectionProvider();
        }
        set(v) {
            return try! set_DataProtectionProvider(value: v!);
        }
    }
// TODO COPE (is_override_mutable_optional_with_covariant) [IsSpecialName] Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents get_Events()
    /**
    
            
            Controls how much time the authentication ticket stored in the cookie will remain valid from the point it is created
            The expiration information is stored in the protected cookie ticket. Because of that an expired cookie will be ignored
            even if it is passed to the server after the browser should have purged it.
            
            
            This is separate from the value of , which specifies
            how long the browser will keep the cookie.
            
            

    */
    open var ExpireTimeSpan : dotnet.System.TimeSpan {
        get {
            return try! get_ExpireTimeSpan();
        }
        set(v) {
            return try! set_ExpireTimeSpan(value: v);
        }
    }
    /**
    
            The LoginPath property is used by the handler for the redirection target when handling ChallengeAsync.
            The current url which is added to the LoginPath as a query string parameter named by the ReturnUrlParameter.
            Once a request to the LoginPath grants a new SignIn identity, the ReturnUrlParameter value is used to redirect
            the browser back to the original url.
            

    */
    open var LoginPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_LoginPath();
        }
        set(v) {
            return try! set_LoginPath(value: v);
        }
    }
    /**
    
            If the LogoutPath is provided the handler then a request to that path will redirect based on the ReturnUrlParameter.
            

    */
    open var LogoutPath : aspnetcore.Microsoft.AspNetCore.Http.PathString {
        get {
            return try! get_LogoutPath();
        }
        set(v) {
            return try! set_LogoutPath(value: v);
        }
    }
    /**
    
            The ReturnUrlParameter determines the name of the query string parameter which is appended by the handler
            during a Challenge. This is also the query string parameter looked for when a request arrives on the login
            path or logout path, in order to return to the original url after the action is performed.
            

    */
    open var ReturnUrlParameter : dotnet.System.String {
        get {
            return try! get_ReturnUrlParameter();
        }
        set(v) {
            return try! set_ReturnUrlParameter(value: v);
        }
    }
    /**
    
            An optional container in which to store the identity across requests. When used, only a session identifier is sent
            to the client. This can be used to mitigate potential problems with very large identities.
            

    */
    open var SessionStore : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.ITicketStore> {
        get {
            return try! get_SessionStore();
        }
        set(v) {
            return try! set_SessionStore(value: v!);
        }
    }
    /**
    
            The SlidingExpiration is set to true to instruct the handler to re-issue a new cookie with a new
            expiration time any time it processes a request which is more than halfway through the expiration window.
            

    */
    open var SlidingExpiration : Bool {
        get {
            return try! get_SlidingExpiration();
        }
        set(v) {
            return try! set_SlidingExpiration(value: v);
        }
    }
    /**
    
            The TicketDataFormat is used to protect and unprotect the identity and other properties which are stored in the
            cookie value. If not provided one will be created using .
            

    */
    open var TicketDataFormat : aspnetcore.Microsoft.AspNetCore.Authentication.ISecureDataFormat_1<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket> {
        get {
            return try! get_TicketDataFormat();
        }
        set(v) {
            return try! set_TicketDataFormat(value: v);
        }
    }
} // CookieAuthenticationOptions


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext
    /**
    
            Context object passed to the ICookieAuthenticationEvents method SignedIn.
            

    */
open class CookieSignedInContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PrincipalContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieSignedInContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)
    /**
    
            Creates a new instance of the context object.
            

    - Parameter context: The HTTP request context
    - Parameter scheme: The scheme data
    - Parameter principal: Initializes Principal property
    - Parameter properties: Initializes Properties property
    - Parameter options: The handler options
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieSignedInContext_ctor_0__5__HttpContext_AuthenticationScheme_ClaimsPrincipal_AuthenticationProperties_CookieAuthenticationOptions(&__thrown, context.get_handle(), scheme.get_handle(), principal.get_handle(), properties?.get_handle() ?? nil, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // CookieSignedInContext


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext
    /**
    
            Context object passed to the .
            

    */
open class CookieSigningInContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PrincipalContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authentication.AuthenticationProperties, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Creates a new instance of the context object.
            

    - Parameter context: The HTTP request context
    - Parameter scheme: The scheme data
    - Parameter options: The handler options
    - Parameter principal: Initializes Principal property
    - Parameter properties: The authentication properties.
    - Parameter cookieOptions: Initializes options for the authentication cookie.
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, principal : dotnet.System.Security.Claims.ClaimsPrincipal, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>, cookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_ctor_0__6__HttpContext_AuthenticationScheme_CookieAuthenticationOptions_ClaimsPrincipal_AuthenticationProperties_CookieOptions(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), principal.get_handle(), properties?.get_handle() ?? nil, cookieOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieOptions get_CookieOptions()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext.get_CookieOptions
    open func get_CookieOptions() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_CookieOptions__get_CookieOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieOptions(Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext.set_CookieOptions(Microsoft.AspNetCore.Http.CookieOptions)
    open func set_CookieOptions(value : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieSigningInContext_void__set_CookieOptions_0__1__CookieOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The options for creating the outgoing cookie.
            May be replace or altered during the SigningIn call.
            

    */
    open var CookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        get {
            return try! get_CookieOptions();
        }
        set(v) {
            return try! set_CookieOptions(value: v);
        }
    }
} // CookieSigningInContext


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext
    /**
    
            Context object passed to the 
            

    */
open class CookieSigningOutContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PropertiesContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, Microsoft.AspNetCore.Authentication.AuthenticationProperties, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions,Microsoft.AspNetCore.Authentication.AuthenticationProperties,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            
             

    - Parameter context: 
    - Parameter scheme: 
    - Parameter options: 
    - Parameter properties: 
    - Parameter cookieOptions: 
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, properties : Optional<aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationProperties>, cookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_ctor_0__5__HttpContext_AuthenticationScheme_CookieAuthenticationOptions_AuthenticationProperties_CookieOptions(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), properties?.get_handle() ?? nil, cookieOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.AspNetCore.Http.CookieOptions get_CookieOptions()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext.get_CookieOptions
    open func get_CookieOptions() throws -> aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_CookieOptions__get_CookieOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Http.CookieOptions(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CookieOptions(Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext.set_CookieOptions(Microsoft.AspNetCore.Http.CookieOptions)
    open func set_CookieOptions(value : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieSigningOutContext_void__set_CookieOptions_0__1__CookieOptions(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The options for creating the outgoing cookie.
            May be replace or altered during the SigningOut call.
            

    */
    open var CookieOptions : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions {
        get {
            return try! get_CookieOptions();
        }
        set(v) {
            return try! set_CookieOptions(value: v);
        }
    }
} // CookieSigningOutContext


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext
    /**
    
            Context object passed to the CookieAuthenticationEvents OnCheckSlidingExpiration method.
            

    */
open class CookieSlidingExpirationContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PrincipalContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, Microsoft.AspNetCore.Authentication.AuthenticationTicket, System.TimeSpan, System.TimeSpan)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions,Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.TimeSpan,System.TimeSpan)
    /**
    
            Creates a new instance of the context object.
            

    - Parameter context: 
    - Parameter scheme: 
    - Parameter ticket: Contains the initial values for identity and extra data
    - Parameter elapsedTime: 
    - Parameter remainingTime: 
    - Parameter options: 
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket, elapsedTime : dotnet.System.TimeSpan, remainingTime : dotnet.System.TimeSpan) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_ctor_0__6__HttpContext_AuthenticationScheme_CookieAuthenticationOptions_AuthenticationTicket_TimeSpan_TimeSpan(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), ticket.get_handle(), elapsedTime.get_handle(), remainingTime.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.TimeSpan get_ElapsedTime()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext.get_ElapsedTime
    open func get_ElapsedTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_TimeSpan__get_ElapsedTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_RemainingTime()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext.get_RemainingTime
    open func get_RemainingTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_TimeSpan__get_RemainingTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ShouldRenew()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext.get_ShouldRenew
    open func get_ShouldRenew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_bool__get_ShouldRenew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShouldRenew(bool)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieSlidingExpirationContext.set_ShouldRenew(System.Boolean)
    open func set_ShouldRenew(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieSlidingExpirationContext_void__set_ShouldRenew_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            The amount of time that has elapsed since the cookie was issued or renewed.
            

    */
    open var ElapsedTime : dotnet.System.TimeSpan {
        get {
            return try! get_ElapsedTime();
        }
    }
    /**
    
            The amount of time left until the cookie expires.
            

    */
    open var RemainingTime : dotnet.System.TimeSpan {
        get {
            return try! get_RemainingTime();
        }
    }
    /**
    
            If true, the cookie will be renewed. The initial value will be true if the elapsed time
            is greater than the remaining time (e.g. more than 50% expired).
            

    */
    open var ShouldRenew : Bool {
        get {
            return try! get_ShouldRenew();
        }
        set(v) {
            return try! set_ShouldRenew(value: v);
        }
    }
} // CookieSlidingExpirationContext


// type: Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext
    /**
    
            Context object passed to the CookieAuthenticationEvents ValidatePrincipal method.
            

    */
open class CookieValidatePrincipalContext
    :
    aspnetcore.Microsoft.AspNetCore.Authentication.PrincipalContext_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Authentication.AuthenticationScheme, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions,Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Creates a new instance of the context object.
            

    - Parameter context: 
    - Parameter scheme: 
    - Parameter ticket: Contains the initial values for identity and extra data
    - Parameter options: 
    */
    public init(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, scheme : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationScheme, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_ctor_0__4__HttpContext_AuthenticationScheme_CookieAuthenticationOptions_AuthenticationTicket(&__thrown, context.get_handle(), scheme.get_handle(), options.get_handle(), ticket.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void ReplacePrincipal(System.Security.Claims.ClaimsPrincipal)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext.ReplacePrincipal(System.Security.Claims.ClaimsPrincipal)
    /**
    
            Called to replace the claims principal. The supplied principal will replace the value of the
            Principal property, which determines the identity of the authenticated request.
            

    - Parameter principal: The  used as the replacement
    */
    open func ReplacePrincipal(principal : dotnet.System.Security.Claims.ClaimsPrincipal) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_void__ReplacePrincipal_0__1__ClaimsPrincipal(&__thrown, self.get_handle(), principal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RejectPrincipal()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext.RejectPrincipal
    /**
    
            Called to reject the incoming principal. This may be done if the application has determined the
            account is no longer active, and the request should be treated as if it was anonymous.
            

    */
    open func RejectPrincipal() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_void__RejectPrincipal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ShouldRenew()
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext.get_ShouldRenew
    open func get_ShouldRenew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_bool__get_ShouldRenew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ShouldRenew(bool)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext.set_ShouldRenew(System.Boolean)
    open func set_ShouldRenew(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_CookieValidatePrincipalContext_void__set_ShouldRenew_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    
            If true, the cookie will be renewed
            

    */
    open var ShouldRenew : Bool {
        get {
            return try! get_ShouldRenew();
        }
        set(v) {
            return try! set_ShouldRenew(value: v);
        }
    }
} // CookieValidatePrincipalContext


// type: Microsoft.AspNetCore.Authentication.Cookies.ICookieManager
    /**
    
            This is used by the CookieAuthenticationMiddleware to process request and response cookies.
            It is abstracted from the normal cookie APIs to allow for complex operations like chunking.
            

    */
open class ICookieManager
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_Cookies_ICookieManager
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_ICookieManager_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String GetRequestCookie(Microsoft.AspNetCore.Http.HttpContext, System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ICookieManager.GetRequestCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)
    /**
    
            Retrieve a cookie of the given name from the request.
            

    - Parameter context: 
    - Parameter key: 
    - Returns: 

    */
    open func GetRequestCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ICookieManager_String__GetRequestCookie_0__2__HttpContext_String(&__thrown, self.get_handle(), context.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void AppendResponseCookie(Microsoft.AspNetCore.Http.HttpContext, System.String, System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ICookieManager.AppendResponseCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Append the given cookie to the response.
            

    - Parameter context: 
    - Parameter key: 
    - Parameter value: 
    - Parameter options: 
    */
    open func AppendResponseCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String, value : Optional<dotnet.System.String>, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ICookieManager_void__AppendResponseCookie_0__4__HttpContext_String_String_CookieOptions(&__thrown, self.get_handle(), context.get_handle(), key.get_handle(), value?.get_handle() ?? nil, options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteCookie(Microsoft.AspNetCore.Http.HttpContext, System.String, Microsoft.AspNetCore.Http.CookieOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ICookieManager.DeleteCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Http.CookieOptions)
    /**
    
            Append a delete cookie to the response.
            

    - Parameter context: 
    - Parameter key: 
    - Parameter options: 
    */
    open func DeleteCookie(context : aspnetcore.Microsoft.AspNetCore.Http.HttpContext, key : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Http.CookieOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_ICookieManager_void__DeleteCookie_0__3__HttpContext_String_CookieOptions(&__thrown, self.get_handle(), context.get_handle(), key.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ICookieManager


// type: Microsoft.AspNetCore.Authentication.Cookies.ITicketStore
    /**
    
            This provides an abstract storage mechanic to preserve identity information on the server
            while only sending a simple identifier key to the client. This is most commonly used to mitigate
            issues with serializing large identities into cookies.
            

    */
open class ITicketStore
    :
    SGBridgeGenericValue,
    Microsoft_AspNetCore_Authentication_Cookies_ITicketStore
{
    open class func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_get_type_handle();
    }
    open class func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Task<System.String> StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Store the identity ticket and return the associated key.
            

    - Parameter ticket: The identity information to store.
    - Returns: The key that can be used to retrieve the identity later.

    */
    open func StoreAsync(ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) async throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_System_Threading_Tasks_Task_string___StoreAsync_0__1__AuthenticationTicket(&__thrown, self.get_handle(), ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<System.String> StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.StoreAsync(Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.Threading.CancellationToken)
    /**
    
            Store the identity ticket and return the associated key.
            

    - Parameter ticket: The identity information to store.
    - Parameter cancellationToken: The  used to propagate notifications that the operation should be canceled.
    - Returns: The key that can be used to retrieve the identity later.

    */
    open func StoreAsync(ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket, cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_System_Threading_Tasks_Task_string___StoreAsync_0__2__AuthenticationTicket_CancellationToken(&__thrown, self.get_handle(), ticket.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task RenewAsync(System.String, Microsoft.AspNetCore.Authentication.AuthenticationTicket)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RenewAsync(System.String,Microsoft.AspNetCore.Authentication.AuthenticationTicket)
    /**
    
            Tells the store that the given identity should be updated.
            

    - Parameter key: 
    - Parameter ticket: 
    - Returns: 

    */
    open func RenewAsync(key : dotnet.System.String, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_Task__RenewAsync_0__2__String_AuthenticationTicket(&__thrown, self.get_handle(), key.get_handle(), ticket.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task RenewAsync(System.String, Microsoft.AspNetCore.Authentication.AuthenticationTicket, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RenewAsync(System.String,Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.Threading.CancellationToken)
    /**
    
            Tells the store that the given identity should be updated.
            

    - Parameter key: 
    - Parameter ticket: 
    - Parameter cancellationToken: The  used to propagate notifications that the operation should be canceled.
    - Returns: 

    */
    open func RenewAsync(key : dotnet.System.String, ticket : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket, cancellationToken : dotnet.System.Threading.CancellationToken) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_Task__RenewAsync_0__3__String_AuthenticationTicket_CancellationToken(&__thrown, self.get_handle(), key.get_handle(), ticket.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationTicket> RetrieveAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RetrieveAsync(System.String)
    /**
    
            Retrieves an identity from the store for the given key.
            

    - Parameter key: The key associated with the identity.
    - Returns: The identity associated with the given key, or null if not found.

    */
    open func RetrieveAsync(key : dotnet.System.String) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationTicket___RetrieveAsync_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticationTicket> RetrieveAsync(System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RetrieveAsync(System.String,System.Threading.CancellationToken)
    /**
    
            Retrieves an identity from the store for the given key.
            

    - Parameter key: The key associated with the identity.
    - Parameter cancellationToken: The  used to propagate notifications that the operation should be canceled.
    - Returns: The identity associated with the given key, or null if not found.

    */
    open func RetrieveAsync(key : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken) async throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationTicket {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_System_Threading_Tasks_Task_Microsoft_AspNetCore_Authentication_AuthenticationTicket___RetrieveAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), key.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task_1(hndl: __return).to_async_result();
        }
    }
    // System.Threading.Tasks.Task RemoveAsync(System.String)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RemoveAsync(System.String)
    /**
    
            Remove the identity associated with the given key.
            

    - Parameter key: The key associated with the identity.
    - Returns: 

    */
    open func RemoveAsync(key : dotnet.System.String) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_Task__RemoveAsync_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
    // System.Threading.Tasks.Task RemoveAsync(System.String, System.Threading.CancellationToken)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.ITicketStore.RemoveAsync(System.String,System.Threading.CancellationToken)
    /**
    
            Remove the identity associated with the given key.
            

    - Parameter key: The key associated with the identity.
    - Parameter cancellationToken: The  used to propagate notifications that the operation should be canceled.
    - Returns: 

    */
    open func RemoveAsync(key : dotnet.System.String, cancellationToken : dotnet.System.Threading.CancellationToken) async throws {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_AspNetCore_Authentication_Cookies_ITicketStore_Task__RemoveAsync_0__2__String_CancellationToken(&__thrown, self.get_handle(), key.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return try await dotnet.System.Threading.Tasks.Task(hndl: __return).to_async_void();
        }
    }
} // ITicketStore


// type: Microsoft.AspNetCore.Authentication.Cookies.PostConfigureCookieAuthenticationOptions
    /**
    
            Used to setup defaults for all .
            

    */
open class PostConfigureCookieAuthenticationOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return Microsoft_AspNetCore_Authentication_Cookies_PostConfigureCookieAuthenticationOptions_get_type_handle();
    }
    open class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.PostConfigureCookieAuthenticationOptions.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider)
    /**
    
            Initializes a new instance of .
            

    - Parameter dataProtection: The .
    */
    public init(dataProtection : aspnetcore.Microsoft.AspNetCore.DataProtection.IDataProtectionProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_AspNetCore_Authentication_Cookies_PostConfigureCookieAuthenticationOptions_ctor_0__1__IDataProtectionProvider(&__thrown, dataProtection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void PostConfigure(System.String, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)
// docid: M:Microsoft.AspNetCore.Authentication.Cookies.PostConfigureCookieAuthenticationOptions.PostConfigure(System.String,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)
    /**
    
            Invoked to post configure a TOptions instance.
            

    - Parameter name: The name of the options instance being configured.
    - Parameter options: The options instance to configure.
    */
    open /* method final */ func PostConfigure(name : dotnet.System.String, options : aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_AspNetCore_Authentication_Cookies_PostConfigureCookieAuthenticationOptions_void__PostConfigure_0__2__String_CookieAuthenticationOptions(&__thrown, self.get_handle(), name.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PostConfigureCookieAuthenticationOptions


}



// Microsoft.Extensions
// Microsoft.Extensions.DependencyInjection
extension Microsoft.Extensions.DependencyInjection {
// type: Microsoft.Extensions.DependencyInjection.CookieExtensions
public struct CookieExtensions {
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)
// docid: M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)
    /**
    
            Adds cookie authentication to  using the default scheme.
            The default scheme is specified by .
            
            Cookie authentication uses a HTTP cookie persisted in the client to perform authentication.
            
            

    - Parameter builder: The .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookieExtensions_AuthenticationBuilder__AddCookie_0__1__AuthenticationBuilder(&__thrown, builder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String)
// docid: M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String)
    /**
    
            Adds cookie authentication to  using the specified scheme.
            
            Cookie authentication uses a HTTP cookie persisted in the client to perform authentication.
            
            

    - Parameter builder: The .
    - Parameter authenticationScheme: The authentication scheme.
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookieExtensions_AuthenticationBuilder__AddCookie_0__2__AuthenticationBuilder_String(&__thrown, builder.get_handle(), authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Adds cookie authentication to  using the default scheme.
            The default scheme is specified by .
            
            Cookie authentication uses a HTTP cookie persisted in the client to perform authentication.
            
            

    - Parameter builder: The .
    - Parameter configureOptions: A delegate to configure .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookieExtensions_AuthenticationBuilder__AddCookie_0__2__AuthenticationBuilder_System_Action_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, builder.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try AddCookie(builder: builder, configureOptions: del_configureOptions);
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Adds cookie authentication to  using the specified scheme.
            
            Cookie authentication uses a HTTP cookie persisted in the client to perform authentication.
            
            

    - Parameter builder: The .
    - Parameter authenticationScheme: The authentication scheme.
    - Parameter configureOptions: A delegate to configure .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookieExtensions_AuthenticationBuilder__AddCookie_0__3__AuthenticationBuilder_String_System_Action_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, builder.get_handle(), authenticationScheme.get_handle(), configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try AddCookie(builder: builder, authenticationScheme: authenticationScheme, configureOptions: del_configureOptions);
    }
    // Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
// docid: M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})
    /**
    
            Adds cookie authentication to  using the specified scheme.
            
            Cookie authentication uses a HTTP cookie persisted in the client to perform authentication.
            
            

    - Parameter builder: The .
    - Parameter authenticationScheme: The authentication scheme.
    - Parameter displayName: A display name for the authentication handler.
    - Parameter configureOptions: A delegate to configure .
    - Returns: A reference to  after the operation has completed.

    */
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Extensions_DependencyInjection_CookieExtensions_AuthenticationBuilder__AddCookie_0__4__AuthenticationBuilder_String_String_System_Action_Microsoft_AspNetCore_Authentication_Cookies_CookieAuthenticationOptions_(&__thrown, builder.get_handle(), authenticationScheme.get_handle(), displayName?.get_handle() ?? nil, configureOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder(hndl : __return);
        }
    }
    // delegate closure overload
    public static func AddCookie(builder : aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder, authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try AddCookie(builder: builder, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: del_configureOptions);
    }
} // CookieExtensions


}



public protocol Microsoft_AspNetCore_Authentication_Cookies_ICookieManager
    :
    SGBridgeGetHandle
{
}

public protocol Microsoft_AspNetCore_Authentication_Cookies_ITicketStore
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddCookie() throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddCookie(authenticationScheme : dotnet.System.String) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, authenticationScheme: authenticationScheme);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddCookie(configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddCookie(configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddCookie(authenticationScheme : dotnet.System.String, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, authenticationScheme: authenticationScheme, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddCookie(authenticationScheme : dotnet.System.String, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, authenticationScheme: authenticationScheme, configureOptions: del_configureOptions);
    }
}

// EXTENSION METHOD Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder, System.String, System.String, System.Action<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>)
extension aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
    public func AddCookie(authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: configureOptions);
    }
    // delegate closure overload
    public func AddCookie(authenticationScheme : dotnet.System.String, displayName : Optional<dotnet.System.String>, configureOptions : @escaping (aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions) throws -> Void) throws -> aspnetcore.Microsoft.AspNetCore.Authentication.AuthenticationBuilder {
        let del_configureOptions = try dotnet.System.Action_1<aspnetcore.Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>(configureOptions);
        return try aspnetcore.Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(builder: self, authenticationScheme: authenticationScheme, displayName: displayName, configureOptions: del_configureOptions);
    }
}

